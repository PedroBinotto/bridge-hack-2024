service,"package br.ufsc.bridge.jornadaestudante.backend.module.info.service;\n\nimport lombok.Getter;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class InfoService {\n\n	@Getter\n	@Value(""${bridge.validadorDiploma.url:}"")\n	private String urlValidadorDiploma;\n\n	public String loadUrlValidadorDiploma() {\n		return this.getUrlValidadorDiploma();\n	}\n\n}\n"
enum,"package br.ufsc.bridge.jornadaestudante.backend.module.info.model;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n@AllArgsConstructor\n@Getter\npublic enum ModuleVersionEnum {\n\n	AVALIACAO_SERVICO(""avaliacaoServico"", ""v1"", ""v1""),\n	ENDERECO(""endereco"", ""v2"", ""v2""),\n	ESTUDANTE(""estudante"", ""v3"", ""v3""),\n	INSTITUICAO(""instituicao"", ""v1"", ""v2""),\n	MENSAGEM(""mensagem"", ""v1"", ""v1""),\n	SOLICITACAO_DADOS(""solicitacaoDados"", ""v2"", ""v2""),\n	FIREBASE(""firebase"", ""v1"", ""v1""),\n	BANNER(""banner"", ""v1"", ""v1""),\n	PE_DE_MEIA(""pedemeia"", ""v1"", ""v1"");\n\n	private String description;\n	private String minVersion;\n	private String latestVersion;\n\n	@Getter\n	private static final Map<String, ModuleVersion> moduleVersionMap = Arrays.stream(ModuleVersionEnum.values())\n			.collect(toMap(ModuleVersionEnum::getDescription,\n					versionEnum -> new ModuleVersion(versionEnum.getMinVersion(), versionEnum.getLatestVersion())));\n\n	protected record ModuleVersion(String minVersion, String latestVersion) {\n\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.info.model;\n\nimport java.util.Map;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.model.ModuleVersionEnum.ModuleVersion;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class InfoDto {\n\n	private Map<String, ModuleVersion> modules;\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.info.controller;\n\nimport javax.annotation.PostConstruct;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.model.InfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.model.ModuleVersionEnum;\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.service.InfoService;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@Tag(name = ""info"")\n@RestController\n@RequiredArgsConstructor\npublic class InfoController {\n\n	private InfoDto infoDto;\n	private final InfoService service;\n\n	@PostConstruct\n	protected void init() {\n		this.infoDto = new InfoDto(ModuleVersionEnum.getModuleVersionMap());\n	}\n\n	@GetMapping(""/api/info"")\n	@Operation(summary = ""Informações da API"")\n	public InfoDto showInfo() {\n		return this.infoDto;\n	}\n\n	@GetMapping(""/api/info/validador-documento"")\n	@Operation(summary = ""Informação da URL do validador de diploma"")\n	public String showValidadorDiplomaInfo() {\n		return this.service.loadUrlValidadorDiploma();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.service;\n\nimport static java.util.Objects.nonNull;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.AllDevicesTopicSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.EstudanteAndDependentesInstituicaoIdListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenIdByTokenAndEstudanteIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenUpdateCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTopicListByTokenDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.InstituicaoFirebaseTopicListSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.TokenHasAnotherEstudanteQueryCommand;\n\n@Service\n@RequiredArgsConstructor\npublic class FirebaseTokenService {\n\n	private final AllDevicesTopicSaveCommand allDevicesTopicSaveCommand;\n	private final EstudanteAndDependentesInstituicaoIdListQueryCommand estudanteAndDependentesInstituicaoIdListQueryCommand;\n	private final FirebaseTokenDeleteCommand firebaseTokenDeleteCommand;\n	private final FirebaseTokenIdByTokenAndEstudanteIdQueryCommand firebaseTokenIdByTokenAndEstudanteIdQueryCommand;\n	private final FirebaseTokenIdQueryCommand firebaseTokenIdQueryCommand;\n	private final FirebaseTokenSaveCommand firebaseTokenSaveCommand;\n	private final FirebaseTokenUpdateCommand firebaseTokenUpdateCommand;\n	private final FirebaseTopicListByTokenDeleteCommand firebaseTopicListByTokenDeleteCommand;\n	private final InstituicaoFirebaseTopicListSaveCommand instituicaoFirebaseTopicListSaveCommand;\n	private final TokenHasAnotherEstudanteQueryCommand tokenHasAnotherEstudanteQueryCommand;\n\n	@Transactional\n	public void saveTokenEstudante(String token, Long estudanteId) {\n		var firebaseTokenId = this.firebaseTokenIdQueryCommand.execute(token);\n		if (nonNull(firebaseTokenId)) {\n			this.firebaseTokenUpdateCommand.execute(firebaseTokenId);\n		} else {\n			firebaseTokenId = this.firebaseTokenSaveCommand.execute(token, estudanteId);\n		}\n\n		this.allDevicesTopicSaveCommand.execute(token, firebaseTokenId);\n		var instituicaoIdSet = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(estudanteId);\n		this.instituicaoFirebaseTopicListSaveCommand.execute(token, firebaseTokenId, instituicaoIdSet);\n	}\n\n	@Transactional\n	public void deleteTokenEstudante(String token, Long estudanteId) {\n		var tokenId = this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand.execute(token, estudanteId);\n		if (nonNull(tokenId)) {\n			this.firebaseTopicListByTokenDeleteCommand.execute(tokenId, token);\n			this.firebaseTokenDeleteCommand.execute(tokenId);\n		}\n	}\n\n	public boolean tokenHasAnotherEstudante(Long estudanteId, String token) {\n		return this.tokenHasAnotherEstudanteQueryCommand.execute(estudanteId, token);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FirebaseTokenDto {\n\n	private String token;\n\n}\n"
validator,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model.MFirebaseTokenDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.maxLength;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model.FirebaseTokenDto;\nimport br.ufsc.bridge.jornadaestudante.common.validation.Validator;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTokenValidator {\n\n	public Validator<FirebaseTokenDto> validate(FirebaseTokenDto form) {\n		var validator = Validator.of(form);\n\n		validator.check(meta.token, required)\n				.check(meta.token, maxLength(255));\n\n		return validator;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static java.util.stream.Collectors.toSet;\n\nimport java.util.Set;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.firebase.FirebaseTopicWrapper;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.common.utils.FirebaseTopicUtils;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseTopic;\n\n@Component\n@RequiredArgsConstructor\npublic class InstituicaoFirebaseTopicListSaveCommand {\n\n	private final DAO dao;\n	private final FirebaseTopicNamesQueryCommand firebaseTopicNamesQueryCommand;\n	private final FirebaseTopicWrapper firebaseTopicWrapper;\n\n	public void execute(String token, Long firebaseTokenId, Set<Long> instituicaoIdSet) {\n		var topicNames = instituicaoIdSet\n				.stream()\n				.map(FirebaseTopicUtils::formatInstituicaoTopic)\n				.collect(toSet());\n		var topicsAlreadySubscribed = this.firebaseTopicNamesQueryCommand.execute(firebaseTokenId, topicNames);\n\n		topicNames\n				.stream()\n				.filter(topicName -> !topicsAlreadySubscribed.contains(topicName))\n				.forEach(topicName -> {\n					this.firebaseTopicWrapper.subscribeInTopic(token, topicName);\n					var firebaseTopic = new FirebaseTopic();\n					firebaseTopic.setTopic(topicName);\n					firebaseTopic.setFirebaseTokenId(firebaseTokenId);\n					this.dao.persist(firebaseTopic);\n				});\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseTopic.firebaseTopic;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.firebase.FirebaseTopicWrapper;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTopicListByTokenDeleteCommand {\n\n	private final DAO dao;\n\n	private final FirebaseTopicListByTokenIdQueryCommand firebaseTopicListByTokenIdQueryCommand;\n	private final FirebaseTopicWrapper firebaseTopicWrapper;\n\n	public void execute(Long tokenId, String token) {\n		var topicList = this.firebaseTopicListByTokenIdQueryCommand.execute(tokenId);\n		topicList.forEach(topic -> this.firebaseTopicWrapper.unsubscribeInTopic(token, topic));\n\n		this.dao.queryFactory()\n				.delete(firebaseTopic)\n				.where(firebaseTopic.firebaseTokenId.eq(tokenId))\n				.where(firebaseTopic.topic.in(topicList))\n				.execute();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport java.time.Instant;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseToken;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTokenUpdateCommand {\n\n	private final DAO dao;\n\n	public void execute(Long firebaseTokenId) {\n		var firebaseToken = this.dao.safeFind(FirebaseToken.class, firebaseTokenId);\n		firebaseToken.setDataAtualizacao(Instant.now());\n		this.dao.persist(firebaseToken);\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseTopic.firebaseTopic;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTopicListByTokenIdQueryCommand {\n\n	private final DAO dao;\n\n	public List<String> execute(Long tokenId) {\n		return this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseTopic)\n				.where(firebaseTopic.firebaseTokenId.eq(tokenId))\n				.fetch();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseTopic.firebaseTopic;\nimport static java.util.stream.Collectors.toSet;\n\nimport java.util.Set;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTopicNamesQueryCommand {\n\n	private final DAO dao;\n\n	public Set<String> execute(Long firebaseTokenId, Set<String> topics) {\n		return this.dao.queryFactory()\n				.from(firebaseTopic)\n				.where(firebaseTopic.firebaseTokenId.eq(firebaseTokenId))\n				.where(firebaseTopic.topic.in(topics))\n				.select(firebaseTopic.topic)\n				.fetch()\n				.stream()\n				.collect(toSet());\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseToken.firebaseToken;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTokenDeleteCommand {\n\n	private final DAO dao;\n\n	public void execute(Long tokenId) {\n		this.dao.queryFactory()\n				.delete(firebaseToken)\n				.where(firebaseToken.id.eq(tokenId))\n				.execute();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseToken.firebaseToken;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class TokenHasAnotherEstudanteQueryCommand {\n\n	private final DAO dao;\n\n	public boolean execute(Long estudanteId, String token) {\n		return this.dao.queryFactory()\n				.selectFrom(firebaseToken)\n				.where(firebaseToken.token.eq(token))\n				.where(firebaseToken.estudanteId.ne(estudanteId))\n				.fetchOne() != null;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseToken.firebaseToken;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTokenIdByTokenAndEstudanteIdQueryCommand {\n\n	private final DAO dao;\n\n	public Long execute(String token, Long estudanteId) {\n		return this.dao.queryFactory()\n				.select(firebaseToken.id)\n				.from(firebaseToken)\n				.where(firebaseToken.token.eq(token))\n				.where(firebaseToken.estudanteId.eq(estudanteId))\n				.fetchOne();\n	}\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.common.utils.FirebaseTopicUtils.TOPICO_TODOS_DISPOSITIVOS;\n\nimport java.util.Set;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.firebase.FirebaseTopicWrapper;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseTopic;\n\n@Component\n@RequiredArgsConstructor\npublic class AllDevicesTopicSaveCommand {\n\n	private final DAO dao;\n	private final FirebaseTopicNamesQueryCommand firebaseTopicNamesQueryCommand;\n	private final FirebaseTopicWrapper firebaseTopicWrapper;\n\n	public Long execute(String token, Long firebaseTokenId) {\n		this.firebaseTopicWrapper.subscribeInTopic(token, TOPICO_TODOS_DISPOSITIVOS);\n		if (this.firebaseTopicNamesQueryCommand.execute(firebaseTokenId, Set.of(TOPICO_TODOS_DISPOSITIVOS)).isEmpty()) {\n			var firebaseTopic = new FirebaseTopic();\n			firebaseTopic.setTopic(TOPICO_TODOS_DISPOSITIVOS);\n			firebaseTopic.setFirebaseTokenId(firebaseTokenId);\n			this.dao.persist(firebaseTopic);\n			return firebaseTopic.getId();\n		}\n		return null;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseToken.firebaseToken;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTokenIdQueryCommand {\n\n	private final DAO dao;\n\n	public Long execute(String token) {\n		return this.dao.queryFactory()\n				.from(firebaseToken)\n				.where(firebaseToken.token.eq(token))\n				.select(firebaseToken.id)\n				.fetchOne();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudanteResponsavel.estudanteResponsavel;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\nimport static java.util.stream.Collectors.toSet;\n\nimport java.util.Set;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.QEstudante;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteAndDependentesInstituicaoIdListQueryCommand {\n\n	private final DAO dao;\n\n	public Set<Long> execute(Long estudanteId) {\n		var estudanteDependente = new QEstudante(""estudanteDependente"");\n\n		return this.dao.queryFactory()\n				.select(curso.instituicaoId)\n				.from(estudante)\n				.leftJoin(estudanteResponsavel).on(estudanteResponsavel.cpfResponsavel.eq(estudante.cpf))\n				.leftJoin(estudanteDependente).on(estudanteDependente.cpf.eq(estudanteResponsavel.cpfEstudante))\n				.leftJoin(matricula).on(matricula.estudanteId.eq(estudante.id)\n						.or(matricula.estudanteId.eq(estudanteDependente.id)))\n				.leftJoin(curso).on(curso.id.eq(matricula.cursoId))\n				.where(estudante.id.eq(estudanteId))\n				.groupBy(curso.instituicaoId)\n				.fetch()\n				.stream()\n				.collect(toSet());\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport java.time.Instant;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseToken;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTokenSaveCommand {\n\n	private final DAO dao;\n\n	public Long execute(String token, Long estudanteId) {\n		var firebaseToken = new FirebaseToken();\n		firebaseToken.setToken(token);\n		firebaseToken.setEstudanteId(estudanteId);\n		firebaseToken.setDataAtualizacao(Instant.now());\n		this.dao.persist(firebaseToken);\n\n		return firebaseToken.getId();\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.controller;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model.FirebaseTokenDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.service.FirebaseTokenService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.validator.FirebasePermissionAccess;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.validator.FirebaseTokenValidator;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\nimport br.ufsc.bridge.jornadaestudante.backend.security.exception.HttpForbidden;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""firebase-token"")\n@RequestMapping(""/api/v1/firebase/token"")\npublic class FirebaseTokenController {\n\n	private final FirebasePermissionAccess firebasePermissionAccess;\n	private final FirebaseTokenService firebaseTokenService;\n	private final FirebaseTokenValidator firebaseTokenValidator;\n\n	@PostMapping\n	@Operation(summary = ""Salva ou atualiza o token do estudante, fornecido pelo Firebase Cloud Messages"")\n	public FirebaseTokenDto storeFirebaseToken(@AuthenticationPrincipal Jwt principal, @RequestBody FirebaseTokenDto firebaseTokenDto) {\n		var estudanteId = AuthContext.from(principal).getPrincipal().getId();\n		this.firebasePermissionAccess.checkTokenAccess(firebaseTokenDto, estudanteId);\n		this.firebaseTokenValidator.validate(firebaseTokenDto).throwIfInvalid();\n		try {\n			this.firebaseTokenService.saveTokenEstudante(firebaseTokenDto.getToken(), estudanteId);\n		} catch (HttpForbidden error) {\n			this.firebaseTokenService.deleteTokenEstudante(firebaseTokenDto.getToken(), estudanteId);\n			throw error;\n		}\n		return firebaseTokenDto;\n	}\n\n	@DeleteMapping(""/{token}"")\n	@Operation(summary = ""Deleta um token do estudante, fornecido pelo Firebase Cloud Messages"")\n	public void deleteFirebaseToken(@AuthenticationPrincipal Jwt principal, @PathVariable String token) {\n		var estudanteId = AuthContext.from(principal).getPrincipal().getId();\n		this.firebaseTokenService.deleteTokenEstudante(token, estudanteId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.command.ParcelasEstudanteQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\n\n@Service\n@RequiredArgsConstructor\npublic class PeMeiaService {\n\n	private final ParcelasEstudanteQueryCommand parcelasEstudanteQueryCommand;\n\n	public List<PeMeiaParcelaDto> loadDadosEstudante(Long estudanteId) {\n		return this.parcelasEstudanteQueryCommand.execute(estudanteId);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class PeMeiaParcelaDto {\n\n	private Long codigoParcela;\n	private BigDecimal valorParcela;\n	private Integer numeroParcela;\n	private Integer situacaoParcelaId;\n	private String competencia;\n	private LocalDate dataOperacao;\n	private Integer motivoRejeicaoId;\n	private String descricaoMotivoRejeicao;\n	private String orientacaoMotivoRejeicao;\n	private String codigoBanco;\n	private String codigoAgencia;\n	private String numeroConta;\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.MPeMeiaParcelaDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QDadosBancarios.dadosBancarios;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QMotivoRejeicao.motivoRejeicao;\nimport static br.ufsc.bridge.jornadaestudante.model.QParcelaPeMeia.parcelaPeMeia;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class ParcelasEstudanteQueryCommand {\n\n	private final DAO dao;\n\n	public List<PeMeiaParcelaDto> execute(Long estudanteId) {\n		Select<PeMeiaParcelaDto> select = new Select<>(PeMeiaParcelaDto.class);\n		select.as(parcelaPeMeia.codigoParcela, meta.codigoParcela);\n		select.as(parcelaPeMeia.valorParcela, meta.valorParcela);\n		select.as(parcelaPeMeia.numeroParcela, meta.numeroParcela);\n		select.as(parcelaPeMeia.situacaoParcelaId, meta.situacaoParcelaId);\n		select.as(parcelaPeMeia.competencia, meta.competencia);\n		select.as(parcelaPeMeia.dataOperacao, meta.dataOperacao);\n		select.as(parcelaPeMeia.motivoRejeicaoId, meta.motivoRejeicaoId);\n		select.as(dadosBancarios.codigoBanco, meta.codigoBanco);\n		select.as(dadosBancarios.codigoAgencia, meta.codigoAgencia);\n		select.as(dadosBancarios.numeroConta, meta.numeroConta);\n		select.as(motivoRejeicao.motivo, meta.descricaoMotivoRejeicao);\n		select.as(motivoRejeicao.orientacao, meta.orientacaoMotivoRejeicao);\n\n		return this.dao.queryFactory()\n				.select(select)\n				.from(parcelaPeMeia)\n				.join(estudante).on(estudante.cpf.eq(parcelaPeMeia.cpf))\n				.leftJoin(dadosBancarios).on(dadosBancarios.id.eq(parcelaPeMeia.dadosBancariosId))\n				.leftJoin(motivoRejeicao).on(motivoRejeicao.id.eq(parcelaPeMeia.motivoRejeicaoId))\n				.where(estudante.id.eq(estudanteId))\n				.fetch();\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service.PeMeiaService;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""pedemeia"")\n@RequestMapping(""/api/v1/pedemeia"")\npublic class PeMeiaController {\n\n	private final PeMeiaService peMeiaService;\n\n	@GetMapping\n	@Operation(summary = ""Retorna a lista de parcelas do estudante"")\n	public List<PeMeiaParcelaDto> showParcelas(@AuthenticationPrincipal Jwt principal) {\n		return this.peMeiaService.loadDadosEstudante(AuthContext.from(principal).getPrincipal().getId());\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command.EstudanteInstituicaoIdsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command.MensagemDtoListAllEstudantesQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MensagemDto;\n\n@Service\n@RequiredArgsConstructor\npublic class MensagemService {\n\n	private final EstudanteInstituicaoIdsQueryCommand estudanteInstituicaoIdsQueryCommand;\n	private final MensagemDtoListAllEstudantesQueryCommand mensagemDtoListAllEstudantesQueryCommand;\n\n	public List<MensagemDto> loadMensagens(Long estudanteId) {\n		var instituicaoIds = this.estudanteInstituicaoIdsQueryCommand.execute(estudanteId);\n		return this.mensagemDtoListAllEstudantesQueryCommand.execute(instituicaoIds);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model;\n\nimport static com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@Data\n@Metafy\npublic class MensagemDto {\n\n	private String titulo;\n	private String descricao;\n	private LocalDate dataValidade;\n\n	@JsonProperty(access = READ_ONLY)\n	private Long id;\n\n	@JsonProperty(access = READ_ONLY)\n	private Instant dataCriacao;\n\n	@JsonProperty(access = READ_ONLY)\n	private Instant dataAtualizacao;\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteInstituicaoIdsQueryCommand {\n\n	private final DAO dao;\n\n	public List<Long> execute(Long estudanteId) {\n		return this.dao.queryFactory()\n				.from(matricula)\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.where(matricula.estudanteId.eq(estudanteId))\n				.select(curso.instituicaoId)\n				.groupBy(curso.instituicaoId)\n				.fetch();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MMensagemDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QMensagem.mensagem;\nimport static br.ufsc.bridge.jornadaestudante.model.QMensagemInstituicao.mensagemInstituicao;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MensagemDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SituacaoMensagemDbEnum;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class MensagemDtoListAllEstudantesQueryCommand {\n\n	private final DAO dao;\n\n	public List<MensagemDto> execute(List<Long> instituicaoIds) {\n		Select<MensagemDto> select = new Select<>(MensagemDto.class);\n		select.as(mensagem.id, meta.id);\n		select.as(mensagem.titulo, meta.titulo);\n		select.as(mensagem.descricao, meta.descricao);\n		select.as(mensagem.dataValidade, meta.dataValidade);\n		select.as(mensagem.dataCriacao, meta.dataCriacao);\n		select.as(mensagem.dataAtualizacao, meta.dataAtualizacao);\n\n		var mensagensFilterByInstituicaoOrAllUsers = this.dao.queryFactory()\n				.from(mensagem)\n				.leftJoin(mensagemInstituicao).on(mensagemInstituicao.mensagemId.eq(mensagem.id))\n				.where(mensagemInstituicao.instituicaoId.in(instituicaoIds)\n						.or(mensagemInstituicao.instituicaoId.isNull()))\n				.where(mensagem.dataValidade.goe(LocalDate.now()))\n				.where(mensagem.situacaoMensagem.eq(SituacaoMensagemDbEnum.ATIVA.getId()))\n				.select(mensagem.id);\n\n		return this.dao.queryFactory()\n				.from(mensagem)\n				.where(mensagem.id.in(mensagensFilterByInstituicaoOrAllUsers))\n				.select(select)\n				.fetch();\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator.EstudantePermissionAccess;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MensagemDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.service.MensagemService;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""mensagens"")\n@RequestMapping(""/api/v1/mensagens"")\npublic class MensagemController {\n\n	private final EstudantePermissionAccess permissionAccess;\n	private final MensagemService service;\n\n	@GetMapping\n	@Operation(summary = ""Retorna a lista de mensagens enviadas pelo MEC"")\n	public List<MensagemDto> indexMensagens(\n			@AuthenticationPrincipal Jwt principal,\n			@RequestParam(required = false) Long estudanteId\n	) {\n		var estudanteLogadoId = AuthContext.from(principal).getPrincipal().getId();\n		this.permissionAccess.checkEstudantePermission(estudanteLogadoId, estudanteId);\n		return this.service.loadMensagens(estudanteId != null ? estudanteId : estudanteLogadoId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command.CursoDtoByFilterListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command.InstituicaoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.InstituicaoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class InstituicaoService {\n\n	private final InstituicaoDtoListQueryCommand instituicaoDtoListQueryCommand;\n	private final CursoDtoByFilterListQueryCommand cursoDtoByFilterListQueryCommand;\n\n	public List<InstituicaoDto> loadInstituicaoList(Long municipioId, Integer sistemaOrigemId) {\n		return this.instituicaoDtoListQueryCommand.execute(municipioId, sistemaOrigemId);\n	}\n\n	public List<CursoSolicitacaoDadosDto> loadCursoListByInstituicao(Long instituicaoId, Long municipioId, Integer turnoId) {\n		return this.cursoDtoByFilterListQueryCommand.execute(instituicaoId, municipioId, turnoId);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class CursoSolicitacaoDadosDto {\n\n	private Long id;\n	private String nome;\n	private Integer cargaHoraria;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class InstituicaoDto {\n\n	private Long id;\n	private String nome;\n	private String sigla;\n	private String siglaUfReitoria;\n	private String municipioReitoria;\n	private String cnpj;\n	private String email;\n	private String telefone;\n	private String inep;\n	private String dependenciaAdministrativa;\n	private String cep;\n\n}"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.MInstituicaoDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QDependenciaAdministrativa.dependenciaAdministrativa;\nimport static br.ufsc.bridge.jornadaestudante.model.QInstituicao.instituicao;\nimport static br.ufsc.bridge.jornadaestudante.model.QLocalOferta.localOferta;\nimport static br.ufsc.bridge.jornadaestudante.model.QMunicipio.municipio;\nimport static br.ufsc.bridge.jornadaestudante.model.QUF.uF;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.InstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class InstituicaoDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public List<InstituicaoDto> execute(Long municipioId, Integer sistemaOrigemId) {\n		Select<InstituicaoDto> select = new Select<>(InstituicaoDto.class);\n		select.as(instituicao.id, meta.id);\n		select.as(instituicao.nome, meta.nome);\n		select.as(instituicao.sigla, meta.sigla);\n		select.as(uF.siglaUf, meta.siglaUfReitoria);\n		select.as(municipio.nome, meta.municipioReitoria);\n		select.as(instituicao.cnpj, meta.cnpj);\n		select.as(instituicao.email, meta.email);\n		select.as(instituicao.telefone, meta.telefone);\n		select.as(instituicao.inep, meta.inep);\n		select.as(dependenciaAdministrativa.nome, meta.dependenciaAdministrativa);\n		select.as(instituicao.cep, meta.cep);\n\n		var query = this.dao.queryFactory().from(localOferta)\n				.join(curso).on(curso.id.eq(localOferta.cursoId))\n				.join(instituicao).on(instituicao.id.eq(curso.instituicaoId))\n				.leftJoin(municipio).on(municipio.id.eq(instituicao.municipioAdmId))\n				.leftJoin(uF).on(uF.id.eq(municipio.ufId))\n				.leftJoin(dependenciaAdministrativa).on(dependenciaAdministrativa.id.eq(instituicao.dependenciaAdministrativaId))\n				.where(localOferta.municipioId.eq(municipioId))\n				.groupBy(instituicao.id,\n						instituicao.nome,\n						instituicao.sigla,\n						uF.siglaUf,\n						municipio.nome,\n						instituicao.cnpj,\n						instituicao.email,\n						instituicao.telefone,\n						instituicao.inep,\n						dependenciaAdministrativa.nome,\n						instituicao.cep);\n\n		if (sistemaOrigemId != null) {\n			query.where(instituicao.sistemaOrigemInstituicao.eq(sistemaOrigemId));\n		}\n\n		return query.select(select).fetch();\n	}\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.MCursoSolicitacaoDadosDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QCursoTurno.cursoTurno;\nimport static br.ufsc.bridge.jornadaestudante.model.QLocalOferta.localOferta;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class CursoDtoByFilterListQueryCommand {\n\n	private final DAO dao;\n\n	public List<CursoSolicitacaoDadosDto> execute(Long instituicaoId, Long municipioId, Integer turnoId) {\n		Select<CursoSolicitacaoDadosDto> select = new Select<>(CursoSolicitacaoDadosDto.class);\n		select.as(curso.id, meta.id);\n		select.as(curso.nome, meta.nome);\n		select.as(curso.cargaHoraria, meta.cargaHoraria);\n\n		var query = this.dao.queryFactory()\n				.from(localOferta)\n				.join(curso).on(curso.id.eq(localOferta.cursoId))\n				.where(curso.instituicaoId.eq(instituicaoId)\n						.and(localOferta.municipioId.eq(municipioId)));\n\n		if (turnoId != null) {\n			query.join(cursoTurno).on(curso.id.eq(cursoTurno.cursoId))\n					.where(cursoTurno.turnoId.eq(turnoId));\n		}\n\n		return query.select(select)\n				.fetch();\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.InstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.service.InstituicaoService;\nimport br.ufsc.bridge.jornadaestudante.model.enums.EnumDto;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SistemaOrigemDbEnum;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SistemaOrigemDto;\nimport br.ufsc.bridge.jornadaestudante.model.enums.TurnoDbEnum;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""instituicoes"")\n@RequestMapping(""/api/v2/instituicoes"")\npublic class InstituicaoController {\n\n	private final InstituicaoService instituicaoService;\n\n	@GetMapping\n	@Operation(summary = ""Retorna as instituições de ensino filtradas pelo id do município e sistema de origem"")\n	public List<InstituicaoDto> indexInstituicoes(@RequestParam Long municipioId, @RequestParam(required = false) Integer sistemaOrigemId) {\n		return this.instituicaoService.loadInstituicaoList(municipioId, sistemaOrigemId);\n	}\n\n	@GetMapping(value = ""/{instituicaoId}/cursos"")\n	@Operation(summary = ""Retorna os cursos filtrados pelo id da instituicao, do município e turno do curso"")\n	public List<CursoSolicitacaoDadosDto> indexCursos(\n			@PathVariable Long instituicaoId,\n			@RequestParam Long municipioId,\n			@RequestParam(required = false) Integer turnoId\n	) {\n		return this.instituicaoService.loadCursoListByInstituicao(instituicaoId, municipioId, turnoId);\n	}\n\n	@GetMapping(value = ""/sistemas-origem"")\n	@Operation(summary = ""Retorna os possíveis sistemas de origem e escolaridades equivalentes"")\n	public List<SistemaOrigemDto> indexSistemasOrigem() {\n		return SistemaOrigemDbEnum.list();\n	}\n\n	@GetMapping(value = ""/turnos"")\n	@Operation(summary = ""Retorna os possíveis turnos dos cursos"")\n	public List<EnumDto> indexCursoTurnos() {\n		return TurnoDbEnum.list();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.command.V1CursoDtoByFilterListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.command.V1InstituicaoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1InstituicaoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class V1InstituicaoService {\n\n	private final V1InstituicaoDtoListQueryCommand instituicaoDtoListQueryCommand;\n	private final V1CursoDtoByFilterListQueryCommand cursoDtoByFilterListQueryCommand;\n\n	public List<V1InstituicaoDto> loadInstituicaoList(Long municipioId) {\n		return this.instituicaoDtoListQueryCommand.execute(municipioId);\n	}\n\n	public List<V1CursoSolicitacaoDadosDto> loadCursoListByInstituicao(Long instituicaoId, Long municipioId) {\n		return this.cursoDtoByFilterListQueryCommand.execute(instituicaoId, municipioId);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class V1InstituicaoDto {\n\n	private Long id;\n	private String nome;\n	private String sigla;\n	private String siglaUfReitoria;\n	private String municipioReitoria;\n	private String cnpj;\n	private String email;\n	private String telefone;\n	private String inep;\n	private String dependenciaAdministrativa;\n	private String cep;\n\n}"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class V1CursoSolicitacaoDadosDto {\n\n	private Long id;\n	private String nome;\n\n}"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.MV1InstituicaoDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QDependenciaAdministrativa.dependenciaAdministrativa;\nimport static br.ufsc.bridge.jornadaestudante.model.QInstituicao.instituicao;\nimport static br.ufsc.bridge.jornadaestudante.model.QLocalOferta.localOferta;\nimport static br.ufsc.bridge.jornadaestudante.model.QMunicipio.municipio;\nimport static br.ufsc.bridge.jornadaestudante.model.QUF.uF;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1InstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class V1InstituicaoDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public List<V1InstituicaoDto> execute(Long municipioId) {\n		Select<V1InstituicaoDto> select = new Select<>(V1InstituicaoDto.class);\n		select.as(instituicao.id, meta.id);\n		select.as(instituicao.nome, meta.nome);\n		select.as(instituicao.sigla, meta.sigla);\n		select.as(uF.siglaUf, meta.siglaUfReitoria);\n		select.as(municipio.nome, meta.municipioReitoria);\n		select.as(instituicao.cnpj, meta.cnpj);\n		select.as(instituicao.email, meta.email);\n		select.as(instituicao.telefone, meta.telefone);\n		select.as(instituicao.inep, meta.inep);\n		select.as(dependenciaAdministrativa.nome, meta.dependenciaAdministrativa);\n		select.as(instituicao.cep, meta.cep);\n\n		return this.dao.queryFactory().from(localOferta)\n				.join(curso).on(curso.id.eq(localOferta.cursoId))\n				.join(instituicao).on(instituicao.id.eq(curso.instituicaoId))\n				.leftJoin(municipio).on(municipio.id.eq(instituicao.municipioAdmId))\n				.leftJoin(uF).on(uF.id.eq(municipio.ufId))\n				.leftJoin(dependenciaAdministrativa).on(dependenciaAdministrativa.id.eq(instituicao.dependenciaAdministrativaId))\n				.where(localOferta.municipioId.eq(municipioId))\n				.groupBy(instituicao.id,\n						instituicao.nome,\n						instituicao.sigla,\n						uF.siglaUf,\n						municipio.nome,\n						instituicao.cnpj,\n						instituicao.email,\n						instituicao.telefone,\n						instituicao.inep,\n						dependenciaAdministrativa.nome,\n						instituicao.cep)\n				.select(select)\n				.fetch();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.MV1CursoSolicitacaoDadosDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QLocalOferta.localOferta;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class V1CursoDtoByFilterListQueryCommand {\n\n	private final DAO dao;\n\n	public List<V1CursoSolicitacaoDadosDto> execute(Long instituicaoId, Long municipioId) {\n		Select<V1CursoSolicitacaoDadosDto> select = new Select<>(V1CursoSolicitacaoDadosDto.class);\n		select.as(curso.id, meta.id);\n		select.as(curso.nome, meta.nome);\n\n		return this.dao.queryFactory().from(localOferta)\n				.join(curso).on(curso.id.eq(localOferta.cursoId))\n				.where(curso.instituicaoId.eq(instituicaoId).and(localOferta.municipioId.eq(municipioId)))\n				.select(select)\n				.fetch();\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1InstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.service.V1InstituicaoService;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""instituicoes"")\n@RequestMapping(""/api/v1/instituicoes"")\npublic class V1InstituicaoController {\n\n	private final V1InstituicaoService instituicaoService;\n\n	@GetMapping\n	@Operation(summary = ""Retorna as instituições de ensino filtradas pelo id do município"")\n	public List<V1InstituicaoDto> indexInstituicoes(@RequestParam Long municipioId) {\n		return this.instituicaoService.loadInstituicaoList(municipioId);\n	}\n\n	@GetMapping(value = ""/cursos"")\n	@Operation(summary = ""Retorna os cursos filtrados pelo id da instituicao e id do município"")\n	public List<V1CursoSolicitacaoDadosDto> indexCursos(@RequestParam Long instituicaoId, @RequestParam Long municipioId) {\n		return this.instituicaoService.loadCursoListByInstituicao(instituicaoId, municipioId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service;\n\nimport static java.util.Objects.nonNull;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.service.BcpfService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.DependenteDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteCpfByIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteCreateUpdateCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteIdByMatriculaIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteLoginDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.TermoUsoEstudanteSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteCreateUpdateInput;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class EstudanteService {\n\n	private final BcpfService bcpfService;\n	private final DependenteDtoListQueryCommand dependenteDtoListQueryCommand;\n	private final EstudanteCreateUpdateCommand estudanteCreateUpdateCommand;\n	private final EstudanteCpfByIdQueryCommand estudanteCpfByIdQueryCommand;\n	private final EstudanteDtoQueryCommand estudanteDtoQueryCommand;\n	private final EstudanteIdByMatriculaIdQueryCommand estudanteIdByMatriculaIdQueryCommand;\n	private final EstudanteLoginDtoQueryCommand estudanteLoginDtoQueryCommand;\n	private final MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand;\n	private final EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand;\n	private final TermoUsoEstudanteSaveCommand termoUsoEstudanteSaveCommand;\n\n	public EstudanteAuthenticatedDto createUpdate(EstudanteCreateUpdateInput estudanteInput) {\n		var estudanteBcpf = this.bcpfService.getDadosEstudanteByCpf(estudanteInput.getCpf());\n		return this.estudanteCreateUpdateCommand.execute(estudanteInput, estudanteBcpf);\n	}\n\n	public EstudanteAuthenticatedDto getEstudanteAuthenticatedDto(String cpf) {\n		return this.estudanteLoginDtoQueryCommand.execute(cpf);\n	}\n\n	public String loadCpfById(Long estudanteId) {\n		return this.estudanteCpfByIdQueryCommand.execute(estudanteId);\n	}\n\n	public EstudanteDto loadDadosPessoais(Long estudanteId) {\n		var estudanteDto = this.estudanteDtoQueryCommand.execute(estudanteId);\n		estudanteDto.setMotivosSituacaoPeMeia(this.motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand.execute(estudanteId));\n		return estudanteDto;\n	}\n\n	public List<EstudanteDto> loadDependentes(Long estudanteId) {\n		var dependenteDtoList = this.dependenteDtoListQueryCommand.execute(estudanteId);\n		var estudanteIdSet = dependenteDtoList.stream()\n				.map(EstudanteDto::getId)\n				.collect(Collectors.toSet());\n		var estudanteIdToMotivoSituacao = this.estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand.execute(estudanteIdSet);\n		return dependenteDtoList.stream()\n				.map(estudanteDto -> {\n					estudanteDto.setMotivosSituacaoPeMeia(estudanteIdToMotivoSituacao.get(estudanteDto.getId()));\n					return estudanteDto;\n				}).toList();\n	}\n\n	public List<EstudanteDto> loadDependentesBcpf(Long estudanteId) {\n		this.loadDependentes(estudanteId).forEach(dependente -> {\n			var estudanteBcpf = this.bcpfService.getDadosEstudanteByCpf(dependente.getCpf());\n\n			if (nonNull(estudanteBcpf)) {\n				this.estudanteCreateUpdateCommand.executeBcpf(dependente.getCpf(), estudanteBcpf);\n			}\n		});\n\n		return this.loadDependentes(estudanteId)\n				.stream()\n				.filter(dto -> dto.getDataNascimento() != null)\n				.toList();\n	}\n\n	public Long loadEstudanteIdByMatriculaId(Long matriculaId) {\n		return this.estudanteIdByMatriculaIdQueryCommand.execute(matriculaId);\n	}\n\n	public TermoUsoDto saveTermoUso(TermoUsoDto termoUso, Long estudanteId) {\n		return this.termoUsoEstudanteSaveCommand.execute(termoUso, estudanteId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service;\n\nimport static java.util.stream.Collectors.toSet;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.CursoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.DisciplinaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteInstituicaoDtoByInstituicaoIdsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.MatriculaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.DisciplinaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MatriculaDto;\n\n@Service\n@RequiredArgsConstructor\npublic class MatriculaService {\n\n	private final CursoDtoListQueryCommand cursoDtoListQueryCommand;\n	private final DisciplinaDtoListQueryCommand disciplinaDtoListQueryCommand;\n	private final EstudanteInstituicaoDtoByInstituicaoIdsQueryCommand estudanteInstituicaoDtoByInstituicaoIdsQueryCommand;\n	private final MatriculaDtoListQueryCommand matriculaDtoListQueryCommand;\n\n	public List<MatriculaDto> loadMatriculasByEstudanteId(Long estudanteId) {\n		var matriculas = this.matriculaDtoListQueryCommand.execute(estudanteId);\n\n		if (!matriculas.isEmpty()) {\n			var cursos = this.cursoDtoListQueryCommand.executeByIds(matriculas.values().stream().map(MatriculaDto::getCursoId).collect(toSet()));\n\n			if (!cursos.isEmpty()) {\n				var instituicoes = this.estudanteInstituicaoDtoByInstituicaoIdsQueryCommand.execute(\n						matriculas\n								.values()\n								.stream()\n								.map(MatriculaDto::getInstituicaoId)\n								.collect(toSet())\n				);\n\n				matriculas.forEach((matriculaId, matriculaDto) -> {\n					matriculaDto.setInstituicao(instituicoes.get(matriculaDto.getInstituicaoId()));\n					matriculaDto.setCurso(cursos.get(matriculaDto.getCursoId()));\n				});\n			}\n		}\n\n		return matriculas\n				.values()\n				.stream()\n				.toList();\n	}\n\n	public List<DisciplinaDto> loadDisciplinasByMatricula(Long matriculaId) {\n		return this.disciplinaDtoListQueryCommand.executeByMatriculaId(matriculaId);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Metafy\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class MotivoSituacaoPeMeiaDto {\n\n	private Integer id;\n	private String motivo;\n	private String orientacao;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class EstudanteDto {\n\n	private Long id;\n	private String cpf;\n	private String nome;\n	private String nomeSocial;\n	private String nomeMae;\n	private LocalDate dataNascimento;\n	private String email;\n	private String telefone;\n	private String paisNascimento;\n	private Boolean isResponsavel = false;\n	private Boolean aceitouTermoUso;\n	private Instant dataRegistroTermo;\n	private Instant dataAtualizacaoSituacaoPeMeia;\n	private List<MotivoSituacaoPeMeiaDto> motivosSituacaoPeMeia;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class EstudanteAuthenticatedDto {\n\n	private Long id;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class EstudanteInstituicaoDto {\n\n	private Long id;\n	private String nome;\n	private String sigla;\n	private String siglaUfReitoria;\n	private String municipioReitoria;\n	private String cnpj;\n	private String email;\n	private String telefone;\n	private String inep;\n	private String dependenciaAdministrativa;\n	private String cep;\n\n}"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class TermoUsoDto {\n\n	private Boolean aceitouTermoUso;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DisciplinaDto {\n\n	private Long id;\n	private String identificadorDisciplina;\n	private String nome;\n	private Integer cargaHoraria;\n	private Integer periodo;\n	private Boolean matrizCurso;\n	private String resultado;\n	private String nota;\n	private Boolean componenteObrigatorio;\n\n}"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CursoDto {\n\n	private Long id;\n	private String nome;\n	private String grauAcademico;\n	private String nivelEnsino;\n	private String etapaEnsino;\n	private String email;\n	private String telefone;\n	private String eixoTecnologico;\n	private String areaCurso;\n	private String nomePrograma;\n	private String nomeAreaConhecimento;\n	private String modalidadePosGraduacao;\n\n}"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.YearMonth;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class MatriculaDto {\n\n	private Long id;\n	private String numeroMatricula;\n	private Integer situacaoVinculoId;\n	private String situacaoVinculo;\n	@Schema(type = ""string"", format = ""yearmonth"")\n	private YearMonth anoMesIngresso;\n	@Schema(type = ""string"", format = ""yearmonth"")\n	private YearMonth anoMesConclusao;\n	private Integer posicionamentoCurso;\n	private String turno;\n	private Integer cargaHorariaIntegralizada;\n	private Integer cargaHorariaTotalCurso;\n	private Double indiceAproveitamentoEstudante;\n	private Double indiceAproveitamentoMedio;\n	private Instant dataAtualizacao;\n	private EstudanteInstituicaoDto instituicao;\n	private CursoDto curso;\n	private String modalidadeEnsino;\n	private LocalDate dataQualificacao;\n	private LocalDate dataDefesa;\n	private String urlDiplomaXml;\n	private String urlDiplomaPdf;\n\n	@JsonIgnore\n	private Long instituicaoId;\n	@JsonIgnore\n	private Long cursoId;\n\n}"
validator,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MTermoUsoDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\nimport br.ufsc.bridge.jornadaestudante.common.validation.Validator;\n\n@Component\n@RequiredArgsConstructor\npublic class TermoUsoValidator {\n\n	public Validator<TermoUsoDto> validate(TermoUsoDto termoUsoDto) {\n		var validator = Validator.of(termoUsoDto);\n\n		validator.check(meta.aceitouTermoUso, required);\n		return validator;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteByCpfQueryCommand {\n\n	private final DAO dao;\n\n	public Estudante execute(String cpf) {\n		return this.dao.queryFactory()\n				.selectFrom(estudante)\n				.where(estudante.cpf.eq(cpf))\n				.fetchOne();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteLoginDtoQueryCommand {\n\n	private final DAO dao;\n\n	public EstudanteAuthenticatedDto execute(String cpf) {\n		var estudanteId = this.dao.queryFactory().from(estudante)\n				.where(estudante.cpf.eq(cpf))\n				.select(estudante.id)\n				.fetchOne();\n\n		if (estudanteId != null) {\n			return new EstudanteAuthenticatedDto(estudanteId);\n		}\n\n		return null;\n	}\n\n}"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MMotivoSituacaoPeMeiaDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudanteMotivoSituacao.estudanteMotivoSituacao;\nimport static br.ufsc.bridge.jornadaestudante.model.QMotivoSituacaoPeMeia.motivoSituacaoPeMeia;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MotivoSituacaoPeMeiaDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand {\n\n	private final DAO dao;\n\n	public List<MotivoSituacaoPeMeiaDto> execute(Long estudanteId) {\n		var select = new Select<>(MotivoSituacaoPeMeiaDto.class);\n		select.as(motivoSituacaoPeMeia.id, meta.id);\n		select.as(motivoSituacaoPeMeia.motivo, meta.motivo);\n		select.as(motivoSituacaoPeMeia.orientacao, meta.orientacao);\n\n		return this.dao.queryFactory()\n				.select(select)\n				.from(estudanteMotivoSituacao)\n				.join(motivoSituacaoPeMeia).on(motivoSituacaoPeMeia.id.eq(estudanteMotivoSituacao.motivoSituacaoId))\n				.where(estudanteMotivoSituacao.estudanteId.eq(estudanteId))\n				.fetch();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MEstudanteDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudanteResponsavel.estudanteResponsavel;\nimport static br.ufsc.bridge.jornadaestudante.model.QPais.pais;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.QEstudante;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\nimport com.querydsl.core.types.dsl.Coalesce;\nimport com.querydsl.core.types.dsl.ComparableExpression;\n\n@Component\n@RequiredArgsConstructor\npublic class DependenteDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public List<EstudanteDto> execute(Long estudanteId) {\n		var estudanteResp = new QEstudante(""estudanteResp"");\n\n		Select<EstudanteDto> select = new Select<>(EstudanteDto.class);\n		select.as(estudante.id, meta.id);\n		select.as(coalesceCpf, meta.cpf);\n		select.as(estudante.nomeCivil, meta.nome);\n		select.as(estudante.nomeSocial, meta.nomeSocial);\n		select.as(estudante.nomeMae, meta.nomeMae);\n		select.as(estudante.dataNascimento, meta.dataNascimento);\n		select.as(estudante.email, meta.email);\n		select.as(estudante.telefone, meta.telefone);\n		select.as(pais.nome, meta.paisNascimento);\n		select.as(estudante.dataAtualizacaoSituacaoPeMeia, meta.dataAtualizacaoSituacaoPeMeia);\n\n		return this.dao.queryFactory()\n				.from(estudanteResp)\n				.join(estudanteResponsavel).on(estudanteResponsavel.cpfResponsavel.eq(estudanteResp.cpf))\n				.leftJoin(estudante).on(estudante.cpf.eq(estudanteResponsavel.cpfEstudante))\n				.leftJoin(pais).on(pais.id.eq(estudante.paisId))\n				.where(estudanteResp.id.eq(estudanteId))\n				.select(select)\n				.fetch();\n	}\n\n	private static final ComparableExpression<String> coalesceCpf = new Coalesce<>(String.class)\n			.add(estudante.cpf)\n			.add(estudanteResponsavel.cpfEstudante)\n			.getValue();\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MDisciplinaDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QDisciplina.disciplina;\nimport static br.ufsc.bridge.jornadaestudante.model.QDisciplinaResultado.disciplinaResultado;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoMatriculaDbEnum.CONSISTENTE;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.DisciplinaDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class DisciplinaDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public List<DisciplinaDto> executeByMatriculaId(Long matriculaId) {\n		Select<DisciplinaDto> select = new Select<>(DisciplinaDto.class);\n		select.as(disciplina.id, meta.id);\n		select.as(disciplina.identificadorDisciplina, meta.identificadorDisciplina);\n		select.as(disciplina.nome, meta.nome);\n		select.as(disciplina.cargaHoraria, meta.cargaHoraria);\n		select.as(disciplina.periodo, meta.periodo);\n		select.as(disciplina.matrizCurso, meta.matrizCurso);\n		select.as(disciplinaResultado.nome, meta.resultado);\n		select.as(disciplina.nota, meta.nota);\n		select.as(disciplina.componenteObrigatorio, meta.componenteObrigatorio);\n\n		return this.dao.queryFactory()\n				.from(disciplina)\n				.join(disciplinaResultado).on(disciplinaResultado.id.eq(disciplina.resultadoId))\n				.join(matricula).on(matricula.id.eq(disciplina.matriculaId))\n				.where(disciplina.matriculaId.eq(matriculaId))\n				.where(matricula.situacaoMatriculaId.eq(CONSISTENTE.getId()))\n				.select(select)\n				.fetch();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MMatriculaDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\nimport static br.ufsc.bridge.jornadaestudante.model.QModalidadeEnsino.modalidadeEnsino;\nimport static br.ufsc.bridge.jornadaestudante.model.QSituacaoVinculo.situacaoVinculo;\nimport static br.ufsc.bridge.jornadaestudante.model.QTurno.turno;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoMatriculaDbEnum.CONSISTENTE;\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Map;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.common.converter.AnoMesSelectionConverter;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class MatriculaDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public Map<Long, MatriculaDto> execute(Long estudanteId) {\n		Select<MatriculaDto> select = new Select<>(MatriculaDto.class);\n		select.as(matricula.id, meta.id);\n		select.as(matricula.numeroMatricula, meta.numeroMatricula);\n		select.as(situacaoVinculo.id, meta.situacaoVinculoId);\n		select.as(situacaoVinculo.nome, meta.situacaoVinculo);\n		select.as(matricula.dataIngresso, meta.anoMesIngresso, new AnoMesSelectionConverter());\n		select.as(matricula.dataConclusao, meta.anoMesConclusao, new AnoMesSelectionConverter());\n		select.as(matricula.posicionamento, meta.posicionamentoCurso);\n		select.as(turno.nome, meta.turno);\n		select.as(matricula.cargaHorariaIntegralizada, meta.cargaHorariaIntegralizada);\n		select.as(curso.cargaHoraria, meta.cargaHorariaTotalCurso);\n		select.as(matricula.indiceAproveitamento, meta.indiceAproveitamentoEstudante);\n		select.as(matricula.indiceAproveitamentoMedio, meta.indiceAproveitamentoMedio);\n		select.as(matricula.dataAtualizacao, meta.dataAtualizacao);\n		select.as(curso.instituicaoId, meta.instituicaoId);\n		select.as(curso.id, meta.cursoId);\n		select.as(modalidadeEnsino.nome, meta.modalidadeEnsino);\n		select.as(matricula.dataQualificacao, meta.dataQualificacao);\n		select.as(matricula.dataDefesa, meta.dataDefesa);\n		select.as(matricula.urlDiplomaXml, meta.urlDiplomaXml);\n		select.as(matricula.urlDiplomaPdf, meta.urlDiplomaPdf);\n\n		return this.dao.queryFactory()\n				.select(matricula.id, select)\n				.from(matricula)\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.join(situacaoVinculo).on(situacaoVinculo.id.eq(matricula.situacaoVinculoId))\n				.leftJoin(modalidadeEnsino).on(modalidadeEnsino.id.eq(matricula.modalidadeEnsinoId))\n				.leftJoin(turno).on(turno.id.eq(matricula.turnoId))\n				.where(matricula.estudanteId.eq(estudanteId))\n				.where(matricula.situacaoMatriculaId.eq(CONSISTENTE.getId()))\n				.fetch()\n				.stream()\n				.collect(toMap(\n						tuple -> tuple.get(matricula.id),\n						tuple -> tuple.get(select))\n				);\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport java.time.Instant;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@Component\n@Transactional\n@RequiredArgsConstructor\npublic class TermoUsoEstudanteSaveCommand {\n\n	private final DAO dao;\n\n	public TermoUsoDto execute(TermoUsoDto termoUso, Long estudanteId) {\n		var estudante = this.dao.safeFind(Estudante.class, estudanteId);\n		estudante.setAceitouTermoUso(termoUso.getAceitouTermoUso());\n		estudante.setDataRegistroTermo(Instant.now());\n		this.dao.persist(estudante);\n		return termoUso;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteIdByMatriculaIdQueryCommand {\n\n	private final DAO dao;\n\n	public Long execute(Long matriculaId) {\n		return this.dao.queryFactory().from(matricula)\n				.where(matricula.id.eq(matriculaId))\n				.select(matricula.estudanteId)\n				.fetchOne();\n	}\n\n}"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MEstudanteInstituicaoDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QDependenciaAdministrativa.dependenciaAdministrativa;\nimport static br.ufsc.bridge.jornadaestudante.model.QInstituicao.instituicao;\nimport static br.ufsc.bridge.jornadaestudante.model.QUF.uF;\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Map;\nimport java.util.Set;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteInstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.QMunicipio;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteInstituicaoDtoByInstituicaoIdsQueryCommand {\n\n	private final DAO dao;\n\n	public Map<Long, EstudanteInstituicaoDto> execute(Set<Long> instituicaoIds) {\n		QMunicipio municipioReitoria = new QMunicipio(""municipioReitoria"");\n		Select<EstudanteInstituicaoDto> select = new Select<>(EstudanteInstituicaoDto.class);\n		select.as(instituicao.id, meta.id);\n		select.as(instituicao.nome, meta.nome);\n		select.as(instituicao.sigla, meta.sigla);\n		select.as(uF.siglaUf, meta.siglaUfReitoria);\n		select.as(municipioReitoria.nome, meta.municipioReitoria);\n		select.as(instituicao.cnpj, meta.cnpj);\n		select.as(instituicao.email, meta.email);\n		select.as(instituicao.telefone, meta.telefone);\n		select.as(instituicao.inep, meta.inep);\n		select.as(dependenciaAdministrativa.nome, meta.dependenciaAdministrativa);\n		select.as(instituicao.cep, meta.cep);\n\n		return this.dao.queryFactory()\n				.select(instituicao.id, select)\n				.from(instituicao)\n				.leftJoin(municipioReitoria).on(municipioReitoria.id.eq(instituicao.municipioAdmId))\n				.leftJoin(uF).on(uF.id.eq(municipioReitoria.ufId))\n				.leftJoin(dependenciaAdministrativa).on(dependenciaAdministrativa.id.eq(instituicao.dependenciaAdministrativaId))\n				.where(instituicao.id.in(instituicaoIds))\n				.fetch()\n				.stream()\n				.collect(toMap(tuple -> tuple.get(instituicao.id), tuple -> tuple.get(select)));\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MEstudanteDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudanteResponsavel.estudanteResponsavel;\nimport static br.ufsc.bridge.jornadaestudante.model.QPais.pais;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\nimport com.querydsl.core.types.dsl.CaseBuilder;\nimport com.querydsl.core.types.dsl.ComparableExpression;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteDtoQueryCommand {\n\n	private final DAO dao;\n\n	public EstudanteDto execute(Long estudanteId) {\n		Select<EstudanteDto> select = new Select<>(EstudanteDto.class);\n		select.as(estudante.id, meta.id);\n		select.as(estudante.cpf, meta.cpf);\n		select.as(estudante.nomeCivil, meta.nome);\n		select.as(estudante.nomeSocial, meta.nomeSocial);\n		select.as(estudante.nomeMae, meta.nomeMae);\n		select.as(estudante.dataNascimento, meta.dataNascimento);\n		select.as(estudante.email, meta.email);\n		select.as(estudante.telefone, meta.telefone);\n		select.as(pais.nome, meta.paisNascimento);\n		select.as(this.isResponsavelSubQuery(), meta.isResponsavel);\n		select.as(estudante.aceitouTermoUso, meta.aceitouTermoUso);\n		select.as(estudante.dataRegistroTermo, meta.dataRegistroTermo);\n		select.as(estudante.dataAtualizacaoSituacaoPeMeia, meta.dataAtualizacaoSituacaoPeMeia);\n\n		return this.dao.queryFactory()\n				.from(estudante)\n				.leftJoin(pais).on(pais.id.eq(estudante.paisId))\n				.where(estudante.id.eq(estudanteId))\n				.select(select)\n				.fetchOne();\n	}\n\n	private ComparableExpression<Boolean> isResponsavelSubQuery() {\n		var query = this.dao.queryFactory()\n				.selectFrom(estudanteResponsavel)\n				.where(estudanteResponsavel.cpfResponsavel.eq(estudante.cpf))\n				.exists();\n\n		return new CaseBuilder()\n				.when(query)\n				.then(Boolean.TRUE)\n				.otherwise(Boolean.FALSE);\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudanteMotivoSituacao.estudanteMotivoSituacao;\nimport static br.ufsc.bridge.jornadaestudante.model.QMotivoSituacaoPeMeia.motivoSituacaoPeMeia;\nimport static java.util.stream.Collectors.groupingBy;\nimport static java.util.stream.Collectors.mapping;\nimport static java.util.stream.Collectors.toList;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MotivoSituacaoPeMeiaDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public Map<Long, List<MotivoSituacaoPeMeiaDto>> execute(Set<Long> estudanteIdList) {\n		return this.dao.queryFactory()\n				.select(estudanteMotivoSituacao.estudanteId,\n						motivoSituacaoPeMeia.id,\n						motivoSituacaoPeMeia.motivo,\n						motivoSituacaoPeMeia.orientacao)\n				.from(estudanteMotivoSituacao)\n				.join(motivoSituacaoPeMeia).on(motivoSituacaoPeMeia.id.eq(estudanteMotivoSituacao.motivoSituacaoId))\n				.where(estudanteMotivoSituacao.estudanteId.in(estudanteIdList))\n				.fetch()\n				.stream()\n				.collect(groupingBy(tuple -> tuple.get(estudanteMotivoSituacao.estudanteId),\n								mapping(tuple -> new MotivoSituacaoPeMeiaDto(\n												tuple.get(motivoSituacaoPeMeia.id),\n												tuple.get(motivoSituacaoPeMeia.motivo),\n												tuple.get(motivoSituacaoPeMeia.orientacao)),\n										toList())\n						)\n				);\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.common.utils.JEStringUtils.capitalizeNames;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.MotivoSituacaoCodigoProcessamentoEnum.INELEGIVEL_PADRAO;\nimport static java.util.Objects.isNull;\nimport static java.util.Objects.nonNull;\nimport static org.apache.commons.lang3.StringUtils.isBlank;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteCreateUpdateInput;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@Component\n@RequiredArgsConstructor\n@Transactional\npublic class EstudanteCreateUpdateCommand {\n\n	private final DAO dao;\n	private final EstudanteByCpfQueryCommand estudanteByCpfQueryCommand;\n	private final EstudanteMotivoSituacaoSaveCommand estudanteMotivoSituacaoSaveCommand;\n\n	public EstudanteAuthenticatedDto execute(EstudanteCreateUpdateInput estudanteInput, BcpfEstudanteDto estudanteBcpf) {\n		var estudante = this.createBaseEstudante(estudanteInput.getCpf(), estudanteBcpf);\n		estudante.setEmail(estudanteInput.getEmail());\n		estudante.setTelefone(estudanteInput.getTelefone());\n\n		if (isBlank(estudante.getNomeCivil())) {\n			estudante.setNomeCivil(capitalizeNames(estudanteInput.getNome()));\n		}\n\n		if (isBlank(estudante.getNomeSocial())) {\n			estudante.setNomeSocial(capitalizeNames(estudanteInput.getNomeSocial()));\n		}\n\n		this.dao.persist(estudante);\n\n		this.estudanteMotivoSituacaoSaveCommand.execute(estudante.getId(), INELEGIVEL_PADRAO.getId());\n\n		return new EstudanteAuthenticatedDto(estudante.getId());\n	}\n\n	public Estudante executeBcpf(String cpf, BcpfEstudanteDto estudanteBcpf) {\n		var estudante = this.createBaseEstudante(cpf, estudanteBcpf);\n		this.dao.persist(estudante);\n\n		this.estudanteMotivoSituacaoSaveCommand.execute(estudante.getId(), INELEGIVEL_PADRAO.getId());\n\n		return estudante;\n	}\n\n	private Estudante createBaseEstudante(String cpf, BcpfEstudanteDto estudanteBcpf) {\n		var estudante = this.estudanteByCpfQueryCommand.execute(cpf);\n\n		if (isNull(estudante)) {\n			estudante = new Estudante();\n			estudante.setCpf(cpf);\n		}\n\n		if (nonNull(estudanteBcpf)) {\n			estudante.setNomeCivil(capitalizeNames(estudanteBcpf.getNome()));\n			estudante.setNomeSocial(capitalizeNames(estudanteBcpf.getNomeSocial()));\n			estudante.setNomeMae(capitalizeNames(estudanteBcpf.getNomeMae()));\n			estudante.setDataNascimento(estudanteBcpf.getDataNascimento());\n		}\n\n		return estudante;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MCursoDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QAreaConhecimento.areaConhecimento;\nimport static br.ufsc.bridge.jornadaestudante.model.QAreaCurso.areaCurso;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QEixoTecnologico.eixoTecnologico;\nimport static br.ufsc.bridge.jornadaestudante.model.QEtapaEnsino.etapaEnsino;\nimport static br.ufsc.bridge.jornadaestudante.model.QGrauAcademico.grauAcademico;\nimport static br.ufsc.bridge.jornadaestudante.model.QModalidadePosGraduacao.modalidadePosGraduacao;\nimport static br.ufsc.bridge.jornadaestudante.model.QNivelEnsino.nivelEnsino;\nimport static br.ufsc.bridge.jornadaestudante.model.QProgramaCurso.programaCurso;\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Map;\nimport java.util.Set;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.CursoDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class CursoDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public Map<Long, CursoDto> executeByIds(Set<Long> cursoIds) {\n		Select<CursoDto> select = new Select<>(CursoDto.class);\n		select.as(curso.id, meta.id);\n		select.as(curso.nome, meta.nome);\n		select.as(grauAcademico.nome, meta.grauAcademico);\n		select.as(nivelEnsino.nome, meta.nivelEnsino);\n		select.as(etapaEnsino.nome, meta.etapaEnsino);\n		select.as(curso.email, meta.email);\n		select.as(curso.telefone, meta.telefone);\n		select.as(eixoTecnologico.nome, meta.eixoTecnologico);\n		select.as(areaCurso.nome, meta.areaCurso);\n		select.as(programaCurso.nomeProgramaCurso, meta.nomePrograma);\n		select.as(areaConhecimento.nomeAreaConhecimento, meta.nomeAreaConhecimento);\n		select.as(modalidadePosGraduacao.nome, meta.modalidadePosGraduacao);\n\n		return this.dao.queryFactory()\n				.select(curso.id, select)\n				.from(curso)\n				.join(nivelEnsino).on(nivelEnsino.id.eq(curso.nivelEnsinoId))\n				.leftJoin(etapaEnsino).on(etapaEnsino.id.eq(curso.etapaEnsinoId))\n				.leftJoin(modalidadePosGraduacao).on(modalidadePosGraduacao.id.eq(etapaEnsino.modalidadePosGraduacaoId))\n				.leftJoin(grauAcademico).on(grauAcademico.id.eq(curso.grauAcademicoId))\n				.leftJoin(eixoTecnologico).on(eixoTecnologico.id.eq(curso.eixoTecnologicoId))\n				.leftJoin(areaCurso).on(areaCurso.id.eq(curso.areaCursoId))\n				.leftJoin(programaCurso).on(programaCurso.id.eq(curso.programaCursoId))\n				.leftJoin(areaConhecimento).on(areaConhecimento.id.eq(programaCurso.areaConhecimentoId))\n				.where(curso.id.in(cursoIds))\n				.fetch()\n				.stream().collect(toMap(tuple -> tuple.get(curso.id), tuple -> tuple.get(select)));\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.EstudanteMotivoSituacao;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteMotivoSituacaoSaveCommand {\n\n	private final DAO dao;\n\n	public void execute(Long estudanteId, Integer motivoSituacaoId) {\n		var estudanteMotivoSituacao = new EstudanteMotivoSituacao();\n		estudanteMotivoSituacao.setEstudanteId(estudanteId);\n		estudanteMotivoSituacao.setMotivoSituacaoId(motivoSituacaoId);\n		this.dao.persist(estudanteMotivoSituacao);\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteCpfByIdQueryCommand {\n\n	private final DAO dao;\n\n	public String execute(Long estudanteId) {\n		return this.dao.queryFactory().from(estudante)\n				.where(estudante.id.eq(estudanteId))\n				.select(estudante.cpf)\n				.fetchOne();\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.DisciplinaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.MatriculaService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator.EstudantePermissionAccess;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""matriculas"")\n@RequestMapping(""/api/v3/estudante/matriculas"")\npublic class MatriculaController {\n\n	private final MatriculaService matriculaService;\n	private final EstudantePermissionAccess permissionAccess;\n\n	@GetMapping\n	@Operation(summary = ""Retorna todas as matrículas de um estudante"")\n	public List<MatriculaDto> indexMatriculasByEstudante(\n			@AuthenticationPrincipal Jwt principal,\n			@RequestParam(required = false) Long estudanteId\n	) {\n		var estudanteLogadoId = AuthContext.from(principal).getPrincipal().getId();\n		this.permissionAccess.checkEstudantePermission(estudanteLogadoId, estudanteId);\n		return this.matriculaService.loadMatriculasByEstudanteId(estudanteId != null ? estudanteId : estudanteLogadoId);\n	}\n\n	@GetMapping(""/{matriculaId}/disciplinas"")\n	@Operation(summary = ""Retorna as disciplinas cursadas pelo estudante, filtradas pelo id da matricula"")\n	public List<DisciplinaDto> indexDisciplinasByMatricula(\n			@AuthenticationPrincipal Jwt principal,\n			@PathVariable(""matriculaId"") Long matriculaId\n	) {\n		this.permissionAccess.checkMatriculaPermission(AuthContext.from(principal).getPrincipal().getId(), matriculaId);\n		return this.matriculaService.loadDisciplinasByMatricula(matriculaId);\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator.TermoUsoValidator;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""estudante"")\n@RequestMapping(""/api/v3/estudante"")\npublic class EstudanteController {\n\n	private final EstudanteService estudanteService;\n	private final TermoUsoValidator termoUsoValidator;\n\n	@GetMapping\n	@Operation(summary = ""Retorna os dados pessoais do estudante"")\n	public EstudanteDto showDadosPessoais(@AuthenticationPrincipal Jwt principal) {\n		return this.estudanteService.loadDadosPessoais(AuthContext.from(principal).getPrincipal().getId());\n	}\n\n	@GetMapping(""/dependentes"")\n	@Operation(summary = ""Retorna a listagem dos dependentes do estudante logado"")\n	public List<EstudanteDto> indexDependentes(@AuthenticationPrincipal Jwt principal) {\n		return this.estudanteService.loadDependentesBcpf(AuthContext.from(principal).getPrincipal().getId());\n	}\n\n	@PostMapping(""/termo-uso"")\n	@Operation(summary = ""Armazena informação do registro de um termo de uso"")\n	public TermoUsoDto storeTermoUso(@AuthenticationPrincipal Jwt principal, @RequestBody TermoUsoDto termoUso) {\n		this.termoUsoValidator.validate(termoUso).throwIfInvalid();\n		return this.estudanteService.saveTermoUso(termoUso, AuthContext.from(principal).getPrincipal().getId());\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.MunicipioDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.UfDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.UfDto;\n\n@Service\n@RequiredArgsConstructor\npublic class EnderecoService {\n\n	private final UfDtoListQueryCommand ufDtoListQueryCommand;\n	private final MunicipioDtoListQueryCommand municipioDtoListQueryCommand;\n\n	public List<UfDto> loadUfList() {\n		return this.ufDtoListQueryCommand.execute();\n	}\n\n	public List<MunicipioDto> loadMunicipioList(Long ufId) {\n		return this.municipioDtoListQueryCommand.execute(ufId);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class UfDto {\n\n	private Long id;\n	private String nome;\n	private String sigla;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class MunicipioDto {\n\n	private Long id;\n	private String nome;\n	private Long ufId;\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MUfDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QUF.uF;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.UfDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class UfDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public List<UfDto> execute() {\n		Select<UfDto> select = new Select<>(UfDto.class);\n		select.as(uF.id, meta.id);\n		select.as(uF.nome, meta.nome);\n		select.as(uF.siglaUf, meta.sigla);\n\n		return this.dao.queryFactory().from(uF)\n				.select(select)\n				.fetch();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QLocalOferta.localOferta;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class CursoExistInMunicipioQueryCommand {\n\n	private final DAO dao;\n\n	public Boolean execute(Long cursoId, Long municipioId) {\n		return this.dao.queryFactory()\n				.from(localOferta)\n				.where(localOferta.cursoId.eq(cursoId).and(localOferta.municipioId.eq(municipioId)))\n				.fetchOne() != null;\n	}\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MMunicipioDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QMunicipio.municipio;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class MunicipioDtoListQueryCommand {\n	private final DAO dao;\n\n	public List<MunicipioDto> execute(Long ufId) {\n		Select<MunicipioDto> select = new Select<>(MunicipioDto.class);\n		select.as(municipio.id, meta.id);\n		select.as(municipio.nome, meta.nome);\n		select.as(municipio.ufId, meta.ufId);\n\n		var query = this.dao.queryFactory()\n				.from(municipio)\n				.select(select);\n\n		if (ufId != null) {\n			query.where(municipio.ufId.eq(ufId));\n		}\n\n		return query.fetch();\n	}\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.UfDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.service.EnderecoService;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""enderecos"")\npublic class EnderecoController {\n\n	private final EnderecoService enderecoService;\n\n	@GetMapping(""/api/v2/unidades-federativas"")\n	@Operation(summary = ""Retorna as unidades federativas"")\n	public List<UfDto> indexUf() {\n		return this.enderecoService.loadUfList();\n	}\n\n	@GetMapping(""/api/v2/municipios"")\n	@Operation(summary = ""Retorna os municípios"")\n	public List<MunicipioDto> indexMunicipios(@RequestParam(required = false) Long ufId) {\n		return this.enderecoService.loadMunicipioList(ufId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.command.BannerListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\n\n@Service\n@RequiredArgsConstructor\npublic class BannerService {\n	private final BannerListQueryCommand bannerListQueryCommand;\n\n	public List<BannerDto> loadBannerList() {\n		return this.bannerListQueryCommand.execute();\n	}\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class BannerDto {\n	private Long id;\n	private String titulo;\n	private byte[] banner;\n	private String contentType;\n	private String url;\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.banner.common.BannerConstants.MAX_SIZE_BANNERS;\nimport static br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.MBannerDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QBanner.banner;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.ATIVO;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\n@Component\n@RequiredArgsConstructor\npublic class BannerListQueryCommand {\n\n	private final DAO dao;\n\n	public List<BannerDto> execute() {\n		Select<BannerDto> select = new Select<>(BannerDto.class);\n		select.as(banner.id, meta.id);\n		select.as(banner.file, meta.banner);\n		select.as(banner.titulo, meta.titulo);\n		select.as(banner.url, meta.url);\n		select.as(banner.contentType, meta.contentType);\n\n		return this.dao.queryFactory()\n				.select(select)\n				.from(banner)\n				.where(banner.situacaoBanner.eq(ATIVO.getId()))\n				.where(banner.dataValidade.goe(LocalDate.now()))\n				.orderBy(banner.dataAtualizacao.desc())\n				.limit(MAX_SIZE_BANNERS)\n				.fetch();\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.service.BannerService;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@Tag(name = ""banners"")\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(""/api/v1/banners"")\npublic class BannerController {\n\n	private final BannerService service;\n\n	@GetMapping\n	@Operation(summary = ""Retorna a lista de banners enviados pelo MEC"")\n	public List<BannerDto> indexBanner() {\n		return this.service.loadBannerList();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.bcpf.service;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.lang.Nullable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfResponse;\n\nimport reactor.core.publisher.Mono;\n\n@Service\n@Slf4j\npublic class BcpfService {\n\n	private final WebClient webClient;\n\n	private BcpfService(@Nullable @Qualifier(""bcpfWebClient"") WebClient webClient) {\n		this.webClient = webClient;\n	}\n\n	public BcpfEstudanteDto getDadosEstudanteByCpf(String cpf) {\n		return this.webClient != null ?\n				this.webClient\n						.post()\n						.uri(""/api/cpf/consultar-cpf"")\n						.bodyValue(new BcpfDto(cpf))\n						.retrieve()\n						.bodyToMono(BcpfResponse.class)\n						.flatMap(bcpfResponse -> Mono.just(bcpfResponse.getData()))\n						.doOnError(error -> log.error(""Não foi possível sincronizar com o b-CPF. {}"", error.getMessage()))\n						.onErrorResume(error -> Mono.empty())\n						.block()\n				: null;\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class BcpfDto {\n\n	private String cpf;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model;\n\nimport java.time.LocalDate;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@Getter\n@Setter\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class BcpfEstudanteDto {\n\n	private String nome;\n	private String nomeSocial;\n	private String nomeMae;\n	private Long codigoPaisNacionalidade;\n\n	@JsonFormat(pattern = ""yyyyMMdd"")\n	private LocalDate dataNascimento;\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service;\n\nimport static java.util.Objects.isNull;\nimport static java.util.Objects.nonNull;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ComprovanteVinculoDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ComprovanteVinculoInfoDtoFillCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.HashValidadorExistsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ValidadorHashSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.VinculoMatriculaQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.VinculoMatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.VinculoHash;\n\n@Service\n@RequiredArgsConstructor\npublic class ComprovanteVinculoService {\n\n	private final ComprovanteVinculoBuilder builder;\n	private final ComprovanteVinculoDtoQueryCommand comprovanteVinculoDtoQueryCommand;\n	private final ComprovanteVinculoInfoDtoFillCommand comprovanteVinculoInfoDtoFillCommand;\n	private final ValidadorHashSaveCommand validadorHashSaveCommand;\n	private final VinculoMatriculaQueryCommand vinculoMatriculaQueryCommand;\n	private final HashValidadorExistsQueryCommand hashValidadorExistsQueryCommand;\n\n	public ByteArrayResource generateComprovanteVinculoPdf(Long matriculaId) {\n		var vinculoDto = this.generateComprovanteVinculo(matriculaId);\n		return nonNull(vinculoDto) ? this.builder.generatePdfComprovanteVinculo(vinculoDto) : null;\n	}\n\n	public ComprovanteVinculoInfoDto generateComprovanteVinculoInfo(Long matriculaId) {\n		var vinculoDto = this.generateComprovanteVinculo(matriculaId);\n		return nonNull(vinculoDto) ? this.comprovanteVinculoInfoDtoFillCommand.execute(vinculoDto) : null;\n	}\n\n	public VinculoMatriculaDto loadVinculoByHashValidador(String hash) {\n		return this.vinculoMatriculaQueryCommand.execute(hash);\n	}\n\n	protected ComprovanteVinculoDto generateComprovanteVinculo(Long matriculaId) {\n		var vinculoDto = this.comprovanteVinculoDtoQueryCommand.execute(matriculaId);\n		if (nonNull(vinculoDto) && isNull(vinculoDto.getHash())) {\n			String hash;\n			do {\n				hash = VinculoHash.generate();\n			} while (this.hashValidadorExistsQueryCommand.execute(hash));\n			this.validadorHashSaveCommand.execute(vinculoDto.getMatriculaId(), hash);\n			vinculoDto.setHash(hash);\n		}\n		return vinculoDto;\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class ComprovanteVinculoDto {\n\n	private Long matriculaId;\n	private String cpfEstudante;\n	private String nomeEstudante;\n	private String nomeSocial;\n	private String nomeCurso;\n	private String nomeInstituicao;\n	private String hash;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model;\n\nimport lombok.Data;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@RequiredArgsConstructor\npublic class VinculoMatriculaDto {\n\n	private String nome;\n	private String cpf;\n	private String nomeInstituicao;\n	private String nomeCurso;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model;\n\nimport lombok.Data;\n\n@Data\npublic class ComprovanteVinculoInfoDto {\n\n	private String nomeEstudante;\n	private String cpfEstudante;\n	private String nomeInstituicao;\n	private String nomeCurso;\n	private String qrCode;\n	private String codigoValidacao;\n	private String urlValidador;\n\n}"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.Matricula;\n\n@Component\n@RequiredArgsConstructor\npublic class ValidadorHashSaveCommand {\n\n	private final DAO dao;\n\n	@Transactional\n	public void execute(Long matriculaId, String hash) {\n		var matricula = this.dao.find(Matricula.class, matriculaId);\n		matricula.setHashValidador(hash);\n		this.dao.persist(matricula);\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class HashValidadorExistsQueryCommand {\n\n	private final DAO dao;\n\n	public boolean execute(String hash) {\n		return this.dao.queryFactory()\n				.selectFrom(matricula)\n				.where(matricula.hashValidador.eq(hash))\n				.fetchOne() != null;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.MComprovanteVinculoDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QInstituicao.instituicao;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\nimport static java.time.temporal.TemporalAdjusters.lastDayOfMonth;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.Month;\nimport java.time.ZoneId;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\nimport com.querydsl.core.types.dsl.Expressions;\n\n@Component\n@RequiredArgsConstructor\npublic class ComprovanteVinculoDtoQueryCommand {\n\n	private final DAO dao;\n\n	public ComprovanteVinculoDto execute(Long matriculaId) {\n		Select<ComprovanteVinculoDto> select = new Select<>(ComprovanteVinculoDto.class);\n		select.as(matricula.id, meta.matriculaId);\n		select.as(matricula.hashValidador, meta.hash);\n		select.as(estudante.cpf, meta.cpfEstudante);\n		select.as(estudante.nomeCivil, meta.nomeEstudante);\n		select.as(estudante.nomeSocial, meta.nomeSocial);\n		select.as(curso.nome, meta.nomeCurso);\n		select.as(instituicao.nome, meta.nomeInstituicao);\n\n		var yearNow = LocalDate.now().getYear();\n		var lastDayMarch = LocalDate.of(yearNow, Month.MARCH, 1)\n				.with(lastDayOfMonth())\n				.atTime(LocalTime.MAX)\n				.atZone(ZoneId.systemDefault())\n				.toInstant();\n\n		return this.dao.queryFactory()\n				.from(matricula)\n				.join(estudante).on(estudante.id.eq(matricula.estudanteId))\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.join(instituicao).on(instituicao.id.eq(curso.instituicaoId))\n				.where(matricula.dataAtualizacao.year().eq(yearNow)\n						.or(matricula.dataAtualizacao.year().eq(yearNow - 1)\n								.and(Expressions.asBoolean(Instant.now().isBefore(lastDayMarch)).isTrue())))\n				.where(matricula.situacaoVinculoId.eq(SituacaoVinculoDbEnum.CURSANDO.getId()))\n				.where(matricula.id.eq(matriculaId))\n				.select(select)\n				.fetchOne();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.MVinculoMatriculaDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QInstituicao.instituicao;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\nimport static java.time.temporal.TemporalAdjusters.lastDayOfMonth;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.Month;\nimport java.time.ZoneId;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.converter.CpfOcultConverter;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.VinculoMatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\nimport com.querydsl.core.types.dsl.Coalesce;\nimport com.querydsl.core.types.dsl.Expressions;\n\n@Component\n@RequiredArgsConstructor\npublic class VinculoMatriculaQueryCommand {\n\n	private final DAO dao;\n\n	public VinculoMatriculaDto execute(String hash) {\n		var nomeEstudanteCoalesce = new Coalesce<>(String.class)\n				.add(estudante.nomeSocial)\n				.add(estudante.nomeCivil)\n				.getValue();\n\n		Select<VinculoMatriculaDto> select = new Select<>(VinculoMatriculaDto.class);\n		select.as(nomeEstudanteCoalesce, meta.nome);\n		select.as(estudante.cpf, meta.cpf, new CpfOcultConverter());\n		select.as(instituicao.nome, meta.nomeInstituicao);\n		select.as(curso.nome, meta.nomeCurso);\n\n		var yearNow = LocalDate.now().getYear();\n		var lastDayMarch = LocalDate.of(yearNow, Month.MARCH, 1)\n				.with(lastDayOfMonth())\n				.atTime(LocalTime.MAX)\n				.atZone(ZoneId.systemDefault())\n				.toInstant();\n\n		return this.dao.queryFactory()\n				.from(matricula)\n				.join(estudante).on(estudante.id.eq(matricula.estudanteId))\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.join(instituicao).on(instituicao.id.eq(curso.instituicaoId))\n				.where(matricula.dataAtualizacao.year().eq(yearNow)\n						.or(matricula.dataAtualizacao.year().eq(yearNow - 1)\n								.and(Expressions.asBoolean(Instant.now().isBefore(lastDayMarch)).isTrue())))\n				.where(matricula.situacaoVinculoId.eq(SituacaoVinculoDbEnum.CURSANDO.getId()))\n				.where(matricula.hashValidador.eq(hash))\n				.select(select)\n				.fetchOne();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static java.util.Objects.nonNull;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.QRCodeGenerator;\n\n@Component\npublic class ComprovanteVinculoInfoDtoFillCommand {\n\n	@Value(""${bridge.comprovanteVinculo.validador.url:localhost}"")\n	private String url;\n\n	public ComprovanteVinculoInfoDto execute(ComprovanteVinculoDto vinculoDto) {\n		ComprovanteVinculoInfoDto infoDto = new ComprovanteVinculoInfoDto();\n		infoDto.setCpfEstudante(vinculoDto.getCpfEstudante());\n		infoDto.setNomeInstituicao(vinculoDto.getNomeInstituicao());\n		infoDto.setNomeCurso(vinculoDto.getNomeCurso());\n		infoDto.setQrCode(QRCodeGenerator.buildQrCodeBase64(this.url + ""?codigoValidacao="" + vinculoDto.getHash()));\n		infoDto.setCodigoValidacao(vinculoDto.getHash());\n		infoDto.setUrlValidador(this.url);\n\n		var nomeSocial = vinculoDto.getNomeSocial();\n		infoDto.setNomeEstudante(nonNull(nomeSocial) ? nomeSocial : vinculoDto.getNomeEstudante());\n		return infoDto;\n	}\n\n}"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.controller;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service.ComprovanteVinculoService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.ResponseEntityUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator.EstudantePermissionAccess;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""comprovante-vinculo"")\n@RequestMapping(""/api/comprovante-vinculo"")\npublic class ComprovanteVinculoController {\n\n	private final ComprovanteVinculoService comprovanteVinculoService;\n	private final EstudantePermissionAccess permissionAccess;\n\n	@GetMapping\n	@Operation(summary = ""Gera o template do comprovante de vínculo e disponibiliza para download."")\n	public ResponseEntity<Resource> showComprovanteVinculo(\n			@AuthenticationPrincipal Jwt principal,\n			@RequestParam Long matriculaId\n	) {\n		this.permissionAccess.checkMatriculaPermission(AuthContext.from(principal).getPrincipal().getId(), matriculaId);\n		var resource = this.comprovanteVinculoService.generateComprovanteVinculoPdf(matriculaId);\n		if (resource != null) {\n			return ResponseEntityUtils.download(""comprovante_vinculo_estudantil.pdf"", resource.getByteArray());\n		}\n		return ResponseEntity.badRequest().build();\n	}\n\n	@GetMapping(""/info"")\n	@Operation(summary = ""Retorna as informações do comprovante de vínculo"")\n	public ComprovanteVinculoInfoDto showComprovanteVinculoInfo(\n			@AuthenticationPrincipal Jwt principal,\n			@RequestParam Long matriculaId\n	) {\n		this.permissionAccess.checkMatriculaPermission(AuthContext.from(principal).getPrincipal().getId(), matriculaId);\n		return this.comprovanteVinculoService.generateComprovanteVinculoInfo(matriculaId);\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.controller;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.VinculoMatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service.ComprovanteVinculoService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.recaptcha.util.RecaptchaGoogleValidator;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""validacao-comprovante-vinculo"")\n@RequestMapping(""/api/public/validacao-comprovante-vinculo"")\npublic class ValidacaoComprovanteVinculoController {\n\n	private final ComprovanteVinculoService service;\n	private final RecaptchaGoogleValidator recaptchaGoogleValidator;\n\n	@GetMapping\n	@Operation(summary = ""Retorna os dados do vínculo da matrícula do estudante para validação do comprovante de vínculo, filtrados pelo hash da matricula e o token gerado pelo reCaptcha"")\n	public ResponseEntity<VinculoMatriculaDto> showVinculo(@RequestParam String hash, @RequestParam String token) {\n		if (!this.recaptchaGoogleValidator.isValid(token)) {\n			return ResponseEntity.badRequest().build();\n		}\n\n		return ResponseEntity.ok(this.service.loadVinculoByHashValidador(hash));\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.service;\n\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.formatDayMonthYear;\n\nimport java.time.LocalDate;\nimport java.util.UUID;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.lang.Nullable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.config.AvaliacaoServicoProperties;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AcompanhamentoPayload;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AcompanhamentoResponse;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AvaliacaoServicoPayload;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AvaliacaoServicoResponse;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\n\nimport reactor.core.publisher.Mono;\n\n@Service\n@Slf4j\npublic class AvaliacaoService {\n\n	private final WebClient avaliacaoWebClient;\n	private final WebClient acompanhamentoWebClient;\n	private final AvaliacaoServicoProperties properties;\n	private final EstudanteService estudanteService;\n\n	private AvaliacaoService(AvaliacaoServicoProperties properties, EstudanteService estudanteService,\n			@Nullable @Qualifier(""avaliacaoWebClient"") WebClient avaliacaoWebClient,\n			@Nullable @Qualifier(""acompanhamentoWebClient"") WebClient acompanhamentoWebClient) {\n		this.properties = properties;\n		this.avaliacaoWebClient = avaliacaoWebClient;\n		this.acompanhamentoWebClient = acompanhamentoWebClient;\n		this.estudanteService = estudanteService;\n	}\n\n	public AvaliacaoServicoResponse getAvaliacaoServicoForm(Long estudanteId, String servico) {\n		var servicoId = this.properties.getServico(servico);\n		var orgao = this.properties.getOrgao();\n		if (StringUtils.isNotBlank(orgao) && servicoId != null && this.avaliacaoWebClient != null && this.acompanhamentoWebClient != null) {\n			var acompanhamento = this.generateAcompanhamento(this.estudanteService.loadCpfById(estudanteId), orgao, servicoId);\n			if (acompanhamento != null) {\n				return this.generateAvaliacao(acompanhamento);\n			}\n		}\n\n		log.error(""Não foi possível obter formulário de avaliação para o serviço {}."", servico);\n		return null;\n	}\n\n	private AcompanhamentoPayload generateAcompanhamento(String cpfCidadao, String orgao, String servicoId) {\n		var dataEtapa = formatDayMonthYear(LocalDate.now());\n		var payload =\n				AcompanhamentoPayload.builder()\n						.cpfCidadao(cpfCidadao)\n						.dataEtapa(dataEtapa)\n						.dataSituacaoEtapa(dataEtapa)\n						.orgao(orgao)\n						.protocolo(UUID.randomUUID().toString())\n						.servico(servicoId)\n						.etapa(AcompanhamentoPayload.ETAPA_INICIAL)\n						.situacaoEtapa(AcompanhamentoPayload.ETAPA_INICIAL)\n						.build();\n\n		return this.acompanhamentoWebClient\n				.post()\n				.uri(""/api/acompanhamento/"")\n				.body(Mono.just(payload), AcompanhamentoPayload.class)\n				.retrieve()\n				.bodyToMono(AcompanhamentoResponse.class)\n				.flatMap(response -> Mono.just(payload))\n				.doOnError(error -> log.error(""Não foi possível criar um novo acompanhamento. {}"", error.getMessage()))\n				.onErrorResume(error -> Mono.empty())\n				.block();\n	}\n\n	private AvaliacaoServicoResponse generateAvaliacao(AcompanhamentoPayload acompanhamento) {\n		var payload = AvaliacaoServicoPayload.builder()\n				.orgao(acompanhamento.getOrgao())\n				.etapa(acompanhamento.getEtapa())\n				.protocolo(acompanhamento.getProtocolo())\n				.servico(acompanhamento.getServico())\n				.cpfCidadao(acompanhamento.getCpfCidadao())\n				.build();\n\n		return this.avaliacaoWebClient\n				.post()\n				.uri(""/api/avaliacao/formulario"")\n				.body(Mono.just(payload), AvaliacaoServicoPayload.class)\n				.retrieve()\n				.bodyToMono(AvaliacaoServicoResponse.class)\n				.doOnError(error -> log.error(""Não foi possível obter formulário de avaliação. {}"", error.getMessage()))\n				.onErrorResume(error -> Mono.empty())\n				.block();\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.controller;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AvaliacaoServicoResponse;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.service.AvaliacaoService;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""avaliacao-servico"")\n@RequestMapping(""/api/v1/avaliacao-servico"")\npublic class AvaliacaoServicoController {\n\n	private final AvaliacaoService avaliacaoService;\n\n	@GetMapping(""/{servico}"")\n	@Operation(summary = ""Retorna o link do formulário de avaliação para um determinado serviço"")\n	public AvaliacaoServicoResponse showAvaliacaoForm(@PathVariable String servico, @AuthenticationPrincipal Jwt jwt) {\n		return this.avaliacaoService.getAvaliacaoServicoForm(AuthContext.from(jwt).getPrincipal().getId(), servico);\n	}\n\n}\n"
validator,"package br.ufsc.bridge.jornadaestudante.backend.module.recaptcha.util;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.recaptcha.model.RecaptchaResponse;\n\nimport reactor.core.publisher.Mono;\n\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class RecaptchaGoogleValidator {\n\n	@Value(""${google.recaptcha.invisible.secret:}"")\n	private String secret;\n	private final WebClient googleRecaptchaWebClient;\n\n	public boolean isValid(String token) {\n		var response = this.googleRecaptchaWebClient\n				.get()\n				.uri(uriBuilder -> uriBuilder\n						.queryParam(""secret"", this.secret)\n						.queryParam(""response"", token)\n						.build())\n				.retrieve()\n				.bodyToMono(RecaptchaResponse.class)\n				.doOnError(error -> log.error(""Não foi possível validar o recaptcha. {}"", error.getMessage()))\n				.onErrorResume(error -> Mono.empty())\n				.block();\n		return response != null && response.isSuccess();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.CursoExistInMunicipioQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.CursoTurnoExistsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.DependenteIdListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.EstudanteIdBySolicitacaoDadosIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormDto;\n\n@Service\n@RequiredArgsConstructor\npublic class SolicitacaoDadosService {\n\n	private final CursoExistInMunicipioQueryCommand cursoExistInMunicipioQueryCommand;\n	private final CursoTurnoExistsQueryCommand cursoTurnoExistsQueryCommand;\n	private final DependenteIdListQueryCommand dependenteIdListQueryCommand;\n	private final EstudanteIdBySolicitacaoDadosIdQueryCommand estudanteIdBySolicitacaoDadosIdQueryCommand;\n	private final SolicitacaoDadosEstudanteDeleteCommand solicitacaoDadosEstudantedDeleteCommand;\n	private final SolicitacaoDadosEstudanteDtoListQueryCommand solicitacaoDadosEstudanteDtoListQueryCommand;\n	private final SolicitacaoDadosEstudanteSaveCommand solicitacaoDadosEstudanteSaveCommand;\n\n	@Transactional\n	public SolicitacaoDadosEstudanteFormDto saveSolicitacaoDadosEstudante(\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosDto,\n			Long estudanteLogadoId,\n			Long estudanteId\n	) {\n		this.solicitacaoDadosEstudanteSaveCommand.save(solicitacaoDadosDto, estudanteLogadoId, estudanteId);\n		return solicitacaoDadosDto;\n	}\n\n	public List<SolicitacaoDadosEstudanteDto> loadSolicitacaoDadosEstudanteList(Long estudanteId) {\n		return this.solicitacaoDadosEstudanteDtoListQueryCommand.execute(estudanteId);\n	}\n\n	@Transactional\n	public SolicitacaoDadosEstudanteFormDto updateSolicitacaoDadosEstudante(\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosDto,\n			Long estudanteLogadoId,\n			Long solicitacaoDadosId\n	) {\n		this.solicitacaoDadosEstudanteSaveCommand.update(solicitacaoDadosDto, estudanteLogadoId, solicitacaoDadosId);\n		return solicitacaoDadosDto;\n	}\n\n	public Long loadEstudanteIdBySolicitacaoDadosId(Long solicitacaoDadosId) {\n		return this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosId);\n	}\n\n	public List<Long> loadDependentesIds(Long estudanteId) {\n		return this.dependenteIdListQueryCommand.execute(estudanteId);\n	}\n\n	public Boolean cursoExistsInMunicipio(Long cursoId, Long municipioId) {\n		return this.cursoExistInMunicipioQueryCommand.execute(cursoId, municipioId);\n	}\n\n	public Boolean cursoTurnoExists(Long cursoId, Integer turnoId) {\n		return this.cursoTurnoExistsQueryCommand.execute(cursoId, turnoId);\n	}\n\n	@Transactional\n	public void deleteSolicitacaoDadosEstudante(Long solicitacaoDadosId) {\n		this.solicitacaoDadosEstudantedDeleteCommand.execute(solicitacaoDadosId);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@NoArgsConstructor\n@Metafy\npublic class SolicitacaoDadosEstudanteFormDto {\n\n	private Long municipioId;\n	private Long cursoId;\n	private Integer turnoId;\n	private Integer situacaoVinculoId;\n	private Integer dataAnoInicio;\n	private Integer dataAnoFim;\n\n	@Deprecated\n	private Long instituicaoId;\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@NoArgsConstructor\npublic class SolicitacaoDadosEstudanteDto {\n\n	private Long id;\n	private Long instituicaoId;\n	private String nomeInstituicao;\n	private String siglaInstituicao;\n	private Integer sistemaOrigemInstituicaoId;\n	private Long cursoId;\n	private String nomeCurso;\n	private Integer turnoId;\n	private Integer cargaHorariaCurso;\n	private Long municipioId;\n	private String nomeMunicipio;\n	private Long ufId;\n	private String nomeUf;\n	private LocalDate dataAnoInicio;\n	private LocalDate dataAnoFim;\n	private Integer situacaoVinculoId;\n	private LocalDate dataSolicitacao;\n	private String nomeAutorSolicitacao;\n	private LocalDate dataAtualizacao;\n	private String nomeAutorAtualizacao;\n\n}\n"
validator,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.MSolicitacaoDadosEstudanteFormDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.common.validation.MECRules.ano;\nimport static br.ufsc.bridge.jornadaestudante.common.validation.MECRules.verify;\nimport static br.ufsc.bridge.jornadaestudante.common.validation.messages.ValidationMessages.INFO_NAO_ENCONTRADA_DB;\nimport static br.ufsc.bridge.jornadaestudante.common.validation.messages.ValidationMessages.OPCAO_INVALIDA;\nimport static br.ufsc.bridge.jornadaestudante.common.validation.messages.ValidationMessages.afterOrEqualFieldValidationMessage;\nimport static br.ufsc.bridge.jornadaestudante.common.validation.messages.ValidationMessages.validationMsgWithRelatedFields;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum.CURSANDO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum.MATRICULA_TRANCADA;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.empty;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\nimport static java.lang.Boolean.FALSE;\nimport static java.util.Objects.isNull;\nimport static java.util.Objects.nonNull;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.service.SolicitacaoDadosService;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.common.validation.Validator;\nimport br.ufsc.bridge.jornadaestudante.model.SolicitacaoDadosEstudante;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum;\n\n@Component\n@RequiredArgsConstructor\npublic class SolicitacaoDadosValidator {\n\n	private final DAO dao;\n	private final SolicitacaoDadosService solicitacaoDadosService;\n\n	public Validator<SolicitacaoDadosEstudanteFormDto> validate(SolicitacaoDadosEstudanteFormDto solicitacaoDadosEstudanteFormDto, Long solicitacaoDadosId) {\n		var validator = Validator.of(solicitacaoDadosEstudanteFormDto);\n\n		if (nonNull(solicitacaoDadosId) && isNull(this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosId))) {\n			validator.error(INFO_NAO_ENCONTRADA_DB);\n		}\n\n		validator\n				.check(meta.cursoId, required)\n				.check(meta.municipioId, required)\n				.check(meta.situacaoVinculoId, required)\n				.check(meta.dataAnoInicio, required)\n				.check(meta.dataAnoInicio, ano)\n				.check(meta.dataAnoFim, ano);\n\n		if (validator.isValid()) {\n			var cursoId = solicitacaoDadosEstudanteFormDto.getCursoId();\n			if (FALSE.equals(this.solicitacaoDadosService.cursoExistsInMunicipio(cursoId, solicitacaoDadosEstudanteFormDto.getMunicipioId()))) {\n				validator.fieldError(meta.cursoId, validationMsgWithRelatedFields(INFO_NAO_ENCONTRADA_DB, meta.municipioId));\n			}\n\n			var turnoId = solicitacaoDadosEstudanteFormDto.getTurnoId();\n			if (nonNull(turnoId)\n					&& validator.isValid(meta.cursoId)\n					&& FALSE.equals(this.solicitacaoDadosService.cursoTurnoExists(cursoId, turnoId))) {\n				validator.fieldError(meta.cursoId, validationMsgWithRelatedFields(INFO_NAO_ENCONTRADA_DB, meta.turnoId));\n			}\n\n			validator.check(meta.situacaoVinculoId, verify(SituacaoVinculoDbEnum::containsValidId).ifNot(OPCAO_INVALIDA));\n\n			if (validator.isValid(meta.situacaoVinculoId)\n					&& List.of(CURSANDO.getId(), MATRICULA_TRANCADA.getId()).contains(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId())) {\n				validator.check(meta.dataAnoFim, empty);\n			}\n\n			if (validator.isValid(meta.dataAnoFim)\n					&& nonNull(solicitacaoDadosEstudanteFormDto.getDataAnoFim())\n					&& solicitacaoDadosEstudanteFormDto.getDataAnoInicio() > solicitacaoDadosEstudanteFormDto.getDataAnoFim()) {\n				validator.fieldError(meta.dataAnoFim, afterOrEqualFieldValidationMessage(meta.dataAnoInicio));\n			}\n		}\n\n		return validator;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.MSolicitacaoDadosEstudanteDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QInstituicao.instituicao;\nimport static br.ufsc.bridge.jornadaestudante.model.QMunicipio.municipio;\nimport static br.ufsc.bridge.jornadaestudante.model.QSolicitacaoDadosEstudante.solicitacaoDadosEstudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QUF.uF;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.QEstudante;\nimport br.ufsc.bridge.querydsl.selection.Select;\n\nimport com.querydsl.core.types.dsl.Coalesce;\nimport com.querydsl.core.types.dsl.ComparableExpression;\n\n@Component\n@RequiredArgsConstructor\npublic class SolicitacaoDadosEstudanteDtoListQueryCommand {\n\n	private final DAO dao;\n\n	public List<SolicitacaoDadosEstudanteDto> execute(Long estudanteId) {\n		QEstudante autorAtualizacao = new QEstudante(""autorAtualizacao"");\n\n		Select<SolicitacaoDadosEstudanteDto> select = new Select<>(SolicitacaoDadosEstudanteDto.class);\n		select.as(solicitacaoDadosEstudante.id, meta.id);\n		select.as(solicitacaoDadosEstudante.dataSolicitacao, meta.dataSolicitacao, value -> LocalDate.ofInstant(value, ZoneId.systemDefault()));\n		select.as(solicitacaoDadosEstudante.dataAtualizacao, meta.dataAtualizacao, value -> LocalDate.ofInstant(value, ZoneId.systemDefault()));\n		select.as(solicitacaoDadosEstudante.dataAnoInicio, meta.dataAnoInicio);\n		select.as(solicitacaoDadosEstudante.dataAnoFim, meta.dataAnoFim);\n		select.as(solicitacaoDadosEstudante.situacaoVinculoId, meta.situacaoVinculoId);\n		select.as(solicitacaoDadosEstudante.turnoId, meta.turnoId);\n		select.as(instituicao.id, meta.instituicaoId);\n		select.as(instituicao.nome, meta.nomeInstituicao);\n		select.as(instituicao.sigla, meta.siglaInstituicao);\n		select.as(instituicao.sistemaOrigemInstituicao, meta.sistemaOrigemInstituicaoId);\n		select.as(curso.id, meta.cursoId);\n		select.as(curso.nome, meta.nomeCurso);\n		select.as(curso.cargaHoraria, meta.cargaHorariaCurso);\n		select.as(municipio.id, meta.municipioId);\n		select.as(municipio.nome, meta.nomeMunicipio);\n		select.as(uF.id, meta.ufId);\n		select.as(uF.nome, meta.nomeUf);\n		select.as(coalesceNomeEstudante(estudante), meta.nomeAutorSolicitacao);\n		select.as(coalesceNomeEstudante(autorAtualizacao), meta.nomeAutorAtualizacao);\n\n		return this.dao.queryFactory().from(solicitacaoDadosEstudante)\n				.join(estudante).on(estudante.id.eq(solicitacaoDadosEstudante.autorSolicitacaoId))\n				.join(autorAtualizacao).on(autorAtualizacao.id.eq(solicitacaoDadosEstudante.autorAtualizacaoId))\n				.join(instituicao).on(instituicao.id.eq(solicitacaoDadosEstudante.instituicaoId))\n				.leftJoin(curso).on(curso.id.eq(solicitacaoDadosEstudante.cursoId))\n				.leftJoin(municipio).on(municipio.id.eq(solicitacaoDadosEstudante.municipioId))\n				.leftJoin(uF).on(uF.id.eq(municipio.ufId))\n				.where(solicitacaoDadosEstudante.estudanteId.eq(estudanteId))\n				.where(solicitacaoDadosEstudante.solicitacaoAtendida.isFalse())\n				.select(select)\n				.fetch();\n	}\n\n	public static ComparableExpression<String> coalesceNomeEstudante(QEstudante estudante) {\n		return new Coalesce<>(String.class)\n				.add(estudante.nomeSocial)\n				.add(estudante.nomeCivil)\n				.getValue();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.SolicitacaoDadosEstudante;\n\n@Component\n@RequiredArgsConstructor\npublic class SolicitacaoDadosEstudanteDeleteCommand {\n\n	private final DAO dao;\n\n	public void execute(Long solicitacaoDadosId) {\n		this.dao.remove(this.dao.safeFind(SolicitacaoDadosEstudante.class, solicitacaoDadosId));\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudanteResponsavel.estudanteResponsavel;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.QEstudante;\n\n@Component\n@RequiredArgsConstructor\npublic class DependenteIdListQueryCommand {\n\n	private final DAO dao;\n\n	public List<Long> execute(Long estudanteId) {\n		var estudanteDependentes = new QEstudante(""estudanteDependentes"");\n\n		return this.dao.queryFactory()\n				.from(estudanteDependentes)\n				.join(estudanteResponsavel).on(estudanteResponsavel.cpfResponsavel.eq(estudanteDependentes.cpf))\n				.join(estudante).on(estudante.cpf.eq(estudanteResponsavel.cpfEstudante))\n				.where(estudanteDependentes.id.eq(estudanteId))\n				.select(estudante.id)\n				.fetch();\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QCursoTurno.cursoTurno;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class CursoTurnoExistsQueryCommand {\n\n	private final DAO dao;\n\n	public Boolean execute(Long cursoId, Integer turnoId) {\n		return this.dao.queryFactory()\n				.selectFrom(cursoTurno)\n				.where(cursoTurno.cursoId.eq(cursoId).and(cursoTurno.turnoId.eq(turnoId)))\n				.fetchOne() != null;\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.parseYearFirstMonthAndDay;\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.parseYearLastMonthAndDay;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum.CURSANDO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum.MATRICULA_TRANCADA;\nimport static java.util.Objects.nonNull;\n\nimport java.time.Instant;\nimport java.util.List;\nimport java.util.Optional;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\nimport br.ufsc.bridge.jornadaestudante.model.SolicitacaoDadosEstudante;\n\n@Component\n@RequiredArgsConstructor\npublic class SolicitacaoDadosEstudanteSaveCommand {\n\n	private final DAO dao;\n\n	public SolicitacaoDadosEstudante save(\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosEstudanteFormDto,\n			Long estudanteLogadoId,\n			Long estudanteId\n	) {\n		var dataAtual = Instant.now();\n		var solicitacaoDadosEstudante = new SolicitacaoDadosEstudante();\n		solicitacaoDadosEstudante.setEstudanteId(estudanteId);\n		solicitacaoDadosEstudante.setAutorSolicitacaoId(estudanteLogadoId);\n		solicitacaoDadosEstudante.setDataSolicitacao(dataAtual);\n		this.fillData(solicitacaoDadosEstudante, solicitacaoDadosEstudanteFormDto, estudanteLogadoId, dataAtual);\n		this.dao.persist(solicitacaoDadosEstudante);\n		return solicitacaoDadosEstudante;\n	}\n\n	public SolicitacaoDadosEstudante update(\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosEstudanteFormDto,\n			Long estudanteLogadoId,\n			Long solicitacaoDadosId\n	) {\n		var solicitacaoDadosEstudante = this.dao.safeFind(SolicitacaoDadosEstudante.class, solicitacaoDadosId);\n		this.fillData(solicitacaoDadosEstudante, solicitacaoDadosEstudanteFormDto, estudanteLogadoId, Instant.now());\n		this.dao.persist(solicitacaoDadosEstudante);\n		return solicitacaoDadosEstudante;\n	}\n\n	private void fillData(\n			SolicitacaoDadosEstudante solicitacaoDadosEstudante,\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosEstudanteFormDto,\n			Long estudanteLogadoId,\n			Instant dataAtual\n	) {\n		solicitacaoDadosEstudante.setInstituicaoId(this.dao.safeFind(Curso.class, solicitacaoDadosEstudanteFormDto.getCursoId()).getInstituicaoId());\n		solicitacaoDadosEstudante.setMunicipioId(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		solicitacaoDadosEstudante.setCursoId(solicitacaoDadosEstudanteFormDto.getCursoId());\n		Optional.ofNullable(solicitacaoDadosEstudanteFormDto.getTurnoId()).ifPresent(solicitacaoDadosEstudante::setTurnoId);\n		solicitacaoDadosEstudante.setSituacaoVinculoId(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		solicitacaoDadosEstudante.setDataAnoInicio(parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		if (!List.of(CURSANDO.getId(), MATRICULA_TRANCADA.getId()).contains(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId())\n				&& nonNull(solicitacaoDadosEstudanteFormDto.getDataAnoFim())) {\n			solicitacaoDadosEstudante.setDataAnoFim(parseYearLastMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoFim().toString()));\n		} else {\n			solicitacaoDadosEstudante.setDataAnoFim(null);\n		}\n		solicitacaoDadosEstudante.setAutorAtualizacaoId(estudanteLogadoId);\n		solicitacaoDadosEstudante.setDataAtualizacao(dataAtual);\n		solicitacaoDadosEstudante.setSolicitacaoAtendida(false);\n	}\n\n}\n"
command,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QSolicitacaoDadosEstudante.solicitacaoDadosEstudante;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteIdBySolicitacaoDadosIdQueryCommand {\n\n	private final DAO dao;\n\n	public Long execute(Long solicitacaoDadosId) {\n		return this.dao.queryFactory().from(solicitacaoDadosEstudante)\n				.where(solicitacaoDadosEstudante.id.eq(solicitacaoDadosId))\n				.where(solicitacaoDadosEstudante.solicitacaoAtendida.isFalse())\n				.select(solicitacaoDadosEstudante.estudanteId)\n				.fetchOne();\n	}\n\n}"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.service.SolicitacaoDadosService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.validator.SolicitacaoDadosPermissionAccess;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.validator.SolicitacaoDadosValidator;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\nimport br.ufsc.bridge.jornadaestudante.model.enums.EnumDto;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""solicitacao-dados"")\n@RequestMapping(""/api/v2/solicitacao-dados"")\npublic class SolicitacaoDadosController {\n\n	private final SolicitacaoDadosPermissionAccess permissionAccess;\n	private final SolicitacaoDadosService solicitacaoDadosService;\n	private final SolicitacaoDadosValidator validator;\n\n	@GetMapping\n	@Operation(summary = ""Retorna as solicitações de cadastro de dados do estudante"")\n	public List<SolicitacaoDadosEstudanteDto> indexSolicitacaoDados(\n			@AuthenticationPrincipal Jwt principal,\n			@RequestParam Long estudanteId\n	) {\n		var estudanteLogadoId = AuthContext.from(principal).getPrincipal().getId();\n		this.permissionAccess.checkEstudantePermission(estudanteLogadoId, estudanteId);\n		return this.solicitacaoDadosService.loadSolicitacaoDadosEstudanteList(estudanteId);\n	}\n\n	@PostMapping\n	@Operation(summary = ""Adiciona uma nova solicitação de cadastro de dados do estudante"")\n	public SolicitacaoDadosEstudanteFormDto storeSolicitacaoDados(\n			@AuthenticationPrincipal Jwt principal,\n			@RequestBody SolicitacaoDadosEstudanteFormDto solicitacaoDadosDto,\n			@RequestParam Long estudanteId\n	) {\n		var estudanteLogadoId = AuthContext.from(principal).getPrincipal().getId();\n		this.permissionAccess.checkEstudantePermission(estudanteLogadoId, estudanteId);\n		this.validator.validate(solicitacaoDadosDto, null).throwIfInvalid();\n		return this.solicitacaoDadosService.saveSolicitacaoDadosEstudante(solicitacaoDadosDto, estudanteLogadoId, estudanteId);\n	}\n\n	@GetMapping(""/situacoes-vinculo"")\n	@Operation(summary = ""Retorna todas as situações de vínculo cadastradas no sistema"")\n	public List<EnumDto> indexSituacaoVinculo() {\n		return SituacaoVinculoDbEnum.list();\n	}\n\n	@PutMapping(""/{solicitacaoDadosId}"")\n	@Operation(summary = ""Atualiza uma solicitação de cadastro de dados existente do estudante"")\n	public SolicitacaoDadosEstudanteFormDto updateSolicitacaoDados(\n			@AuthenticationPrincipal Jwt principal,\n			@PathVariable Long solicitacaoDadosId,\n			@RequestBody SolicitacaoDadosEstudanteFormDto solicitacaoDadosDto\n	) {\n		var estudanteLogadoId = AuthContext.from(principal).getPrincipal().getId();\n		this.permissionAccess.checkSolicitacaoDadosPermission(estudanteLogadoId, solicitacaoDadosId);\n		this.validator.validate(solicitacaoDadosDto, solicitacaoDadosId).throwIfInvalid();\n		return this.solicitacaoDadosService.updateSolicitacaoDadosEstudante(solicitacaoDadosDto, estudanteLogadoId, solicitacaoDadosId);\n	}\n\n	@DeleteMapping(""/{solicitacaoDadosId}"")\n	@Operation(summary = ""Deleta uma solicitação de cadastro de dados existente do estudante"")\n	public void deleteSolicitacaoDados(\n			@AuthenticationPrincipal Jwt principal,\n			@PathVariable Long solicitacaoDadosId\n	) {\n		this.permissionAccess.checkSolicitacaoDadosPermission(AuthContext.from(principal).getPrincipal().getId(), solicitacaoDadosId);\n		this.solicitacaoDadosService.deleteSolicitacaoDadosEstudante(solicitacaoDadosId);\n	}\n\n}\n\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.auth;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.app.config.Profiles.DEV;\n\nimport java.util.Map;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.security.jwt.JwtHelper;\nimport br.ufsc.bridge.jornadaestudante.backend.module.auth.service.RefreshTokenService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\nimport br.ufsc.bridge.jornadaestudante.model.RefreshToken;\n\n@RequiredArgsConstructor\n@Profile(DEV)\n@RestController\npublic class AuthDevController {\n\n	private final JwtHelper jwtHelper;\n	private final EstudanteService estudanteService;\n	private final RefreshTokenService refreshTokenService;\n\n	@GetMapping(""/api/public/jwt/{cpf}"")\n	public AuthTokenPaylod jwt(@PathVariable String cpf) {\n		EstudanteAuthenticatedDto userDetail = this.estudanteService.getEstudanteAuthenticatedDto(cpf);\n		this.refreshTokenService.removeByPrincipal(cpf);\n		RefreshToken refreshToken = this.refreshTokenService.create(cpf);\n		String jwt = this.jwtHelper.createJwtForClaims(String.valueOf(userDetail.getId()), Map.of());\n		return new AuthTokenPaylod(jwt, refreshToken.getToken());\n	}\n\n	private record AuthTokenPaylod(String jwt, String refreshToken) {\n	}\n\n}\n"
controller,"package br.ufsc.bridge.jornadaestudante.backend.module.auth;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.security.jwt.JwtAuthenticationSuccessHandler;\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.security.refreshtoken.RefreshAuthenticationToken;\nimport br.ufsc.bridge.jornadaestudante.backend.module.auth.model.RefreshTokenInput;\n\n@Slf4j\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(""/api/auth"")\npublic class AuthController {\n\n	private final AuthenticationManager authenticationManager;\n	private final JwtAuthenticationSuccessHandler jwtAuthenticationSuccessHandler;\n\n	@PostMapping(""refresh-token"")\n	public void refreshToken(@RequestBody RefreshTokenInput input, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n		Authentication authentication = this.authenticationManager.authenticate(new RefreshAuthenticationToken(input.refreshToken()));\n		SecurityContextHolder.getContext().setAuthentication(authentication);\n		this.jwtAuthenticationSuccessHandler.onAuthenticationSuccess(request, response, authentication);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.auth.service;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QRefreshToken.refreshToken;\n\nimport java.time.Instant;\nimport java.util.UUID;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.RefreshToken;\n\n@Service\n@RequiredArgsConstructor\npublic class RefreshTokenService {\n\n	@Getter\n	@Value(""${bridge.auth.frontend.refresh-token.expiration:604800}"") // default 1 semana\n	private Long expirationInSeconds;\n\n	private final DAO dao;\n\n	@Transactional\n	public RefreshToken create(String principal) {\n		RefreshToken refreshToken = new RefreshToken();\n		refreshToken.setToken(UUID.randomUUID().toString());\n		refreshToken.setPrincipal(principal);\n		refreshToken.setDataCriacao(Instant.now());\n		refreshToken.setDataExpiracao(refreshToken.getDataCriacao().plusSeconds(this.expirationInSeconds));\n		this.dao.persist(refreshToken);\n		return refreshToken;\n	}\n\n	@Transactional\n	public void removeByPrincipal(String principal) {\n		this.dao.queryFactory().delete(refreshToken).where(refreshToken.principal.eq(principal)).execute();\n	}\n\n	public RefreshToken load(String token) {\n		return this.dao.find(RefreshToken.class, token);\n	}\n\n}\n"
exception,"package br.ufsc.bridge.jornadaestudante.backend.security.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)\npublic class HttpInternalServerErrorException extends RuntimeException{\n	public HttpInternalServerErrorException(String message) {\n		super(message);\n	}\n\n	public HttpInternalServerErrorException(String message, Throwable cause) {\n		super(message, cause);\n	}\n\n}\n"
exception,"package br.ufsc.bridge.jornadaestudante.backend.security.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n/**\n * Exception que retorna uma resposta HTTP UNAUTHORIZED (401) quando lançada\n */\n@ResponseStatus(value = HttpStatus.UNAUTHORIZED)\npublic class HttpUnauthorized extends RuntimeException {\n\n	private static final long serialVersionUID = 7523585643570217014L;\n\n	public HttpUnauthorized() {\n		super();\n	}\n\n	public HttpUnauthorized(String message) {\n		super(message);\n	}\n\n	public HttpUnauthorized(String message, Throwable cause) {\n		super(message, cause);\n	}\n\n}"
exception,"package br.ufsc.bridge.jornadaestudante.backend.security.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n/**\n * Exception que retorna uma resposta HTTP FORBIDDEN (403) quando lançada\n */\n@ResponseStatus(value = HttpStatus.FORBIDDEN)\npublic class HttpForbidden extends RuntimeException {\n\n	private static final long serialVersionUID = 7523585643570217014L;\n\n	public HttpForbidden(String message) {\n		super(message);\n	}\n\n	public HttpForbidden(String message, Throwable cause) {\n		super(message, cause);\n	}\n\n}"
factory,"package br.ufsc.bridge.jornadaestudante.backend.app.config.webclient;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.ExchangeFilterFunctions;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@Component\npublic class WebClientFactory {\n\n	public WebClient webClient(WebClientProperties properties) {\n		return WebClient.builder()\n				.baseUrl(properties.getUrl())\n				.defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n				.filter(ExchangeFilterFunctions.basicAuthentication(properties.getUsername(), properties.getPassword()))\n				.build();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.app.config.security;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\nimport org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser;\nimport org.springframework.security.oauth2.core.oidc.user.OidcUser;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.security.model.GovBrUserPrincipal;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteCreateUpdateInput;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\n\n@Component\n@RequiredArgsConstructor\npublic class OAuthDetailService extends OidcUserService {\n\n	private static final String SOCIAL_NAME = ""social_name"";\n\n	private final EstudanteService estudanteService;\n\n	@Override\n	public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {\n		OidcUser oidcUser = super.loadUser(userRequest);\n		String cpf = oidcUser.getSubject();\n\n		EstudanteCreateUpdateInput input = new EstudanteCreateUpdateInput();\n		input.setCpf(cpf);\n		input.setEmail(oidcUser.getEmail());\n		input.setTelefone(oidcUser.getPhoneNumber());\n		input.setNome(oidcUser.getFullName());\n		input.setNomeSocial(oidcUser.getClaimAsString(SOCIAL_NAME));\n\n		EstudanteAuthenticatedDto estudanteAuthenticatedDto = this.estudanteService.createUpdate(input);\n\n		return new DefaultOidcUser(oidcUser.getAuthorities(), oidcUser.getIdToken(), new GovBrUserPrincipal(estudanteAuthenticatedDto, oidcUser.getClaims()));\n	}\n}\n"
exception,"package br.ufsc.bridge.jornadaestudante.backend.app.config.security.refreshtoken.exception;\n\nimport org.springframework.security.core.AuthenticationException;\n\npublic class RefreshTokenBadRequestException extends AuthenticationException {\n\n	private static final long serialVersionUID = -4337546941843522460L;\n	private static final String BAD_CREDENTIALS = ""Falha de credencial"";\n\n	public RefreshTokenBadRequestException() {\n		super(BAD_CREDENTIALS);\n	}\n\n	public RefreshTokenBadRequestException(String message, Throwable t) {\n		super(message, t);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.app.config.security.jwt;\n\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\n\nimport lombok.Data;\n\n@Data\npublic class JwtConfigurationDto {\n\n	private RSAPrivateKey jwtPrivateKey;\n	private RSAPublicKey jwtPublicKey;\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.info.service;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\nclass InfoServiceTest {\n\n	private InfoService infoService;\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@BeforeEach\n	void setup() {\n		this.infoService = spy(new InfoService());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a mesma URL ao carregar a URL do validador de diploma digital"")\n	void loadUrlValidadorDiplomaExpectSameUrl() {\n		var url = this.faker.randomHTTPUrl();\n\n		when(this.infoService.getUrlValidadorDiploma()).thenReturn(url);\n\n		var result = this.infoService.loadUrlValidadorDiploma();\n\n		assertThat(result).isEqualTo(url);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.info.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants.BASE_PATH;\nimport static io.restassured.http.ContentType.JSON;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Value;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.model.InfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.model.ModuleVersionEnum;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\n\n@SpringJUnit5Test\nclass InfoControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	@Value(""${bridge.validadorDiploma.url:}"")\n	private String urlValidadorDiploma;\n	private static final String BASE_URL = ""/api/info"";\n\n	@Test\n	@DisplayName(""Deve verificar se o endpoint de GET na rota /api/info retorna corretamente as informações da API"")\n	void showInfoExpectSuccessAndSameInfoDto() {\n		InfoDto dto = new InfoDto(ModuleVersionEnum.getModuleVersionMap());\n\n		var result = given()\n				.contentType(JSON)\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getObject(BASE_PATH, InfoDto.class);\n\n		assertThat(result).isEqualTo(dto);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o endpoint de GET na rota /api/info/validador-documento retorna corretamente a URL do validador de diploma"")\n	void showValidadorDiplomaInfoExpectSuccessAndSameUrl() {\n		var result = given()\n				.contentType(JSON)\n				.get(BASE_URL + ""/validador-documento"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.asString();\n\n		assertThat(result).isEqualTo(this.urlValidadorDiploma);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.info.controller;\n\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.model.InfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.service.InfoService;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\npublic class InfoControllerTest {\n\n	private static final String BASE_URL = ""/api/info"";\n\n	@MockBean\n	@Autowired\n	private InfoService infoService;\n\n	@Autowired\n	private MockMvc mockMvc;\n\n	@Autowired\n	private ObjectMapper objectMapper;\n\n	@Test\n	@DisplayName(""Obter informações da API"")\n	void loadApiInformationsExpectSuccess() throws Exception {\n		InfoDto dto = new InfoDto();\n\n		var getRequest = get(BASE_URL)\n				.contentType(MediaType.APPLICATION_JSON)\n				.content(this.objectMapper.writeValueAsString(dto));\n\n		this.mockMvc.perform(getRequest).andExpect(status().is2xxSuccessful());\n	}\n\n	@Test\n	@DisplayName(""Obter link de validação de diploma digital"")\n	void loadLinkValidadorDiplomaExpectSuccess() throws Exception {\n		var url = ""url"";\n\n		when(this.infoService.loadUrlValidadorDiploma()).thenReturn(url);\n\n		var getRequest = get(BASE_URL + ""/validador-documento"")\n				.contentType(MediaType.APPLICATION_JSON)\n				.content(this.objectMapper.writeValueAsString(url));\n\n		this.mockMvc.perform(getRequest).andExpect(status().is2xxSuccessful());\n\n		verify(this.infoService, times(1)).loadUrlValidadorDiploma();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.service;\n\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Set;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.AllDevicesTopicSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.EstudanteAndDependentesInstituicaoIdListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenIdByTokenAndEstudanteIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenUpdateCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTopicListByTokenDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.InstituicaoFirebaseTopicListSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.TokenHasAnotherEstudanteQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\n\nclass FirebaseTokenServiceTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	private final EstudanteFactory estudanteFactory = new EstudanteFactory();\n	private final InstituicaoFactory instituicaoFactory = new InstituicaoFactory();\n	private AllDevicesTopicSaveCommand allDevicesTopicSaveCommand;\n	private EstudanteAndDependentesInstituicaoIdListQueryCommand estudanteAndDependentesInstituicaoIdListQueryCommand;\n	private FirebaseTokenDeleteCommand firebaseTokenDeleteCommand;\n	private FirebaseTokenIdByTokenAndEstudanteIdQueryCommand firebaseTokenIdByTokenAndEstudanteIdQueryCommand;\n	private FirebaseTokenIdQueryCommand firebaseTokenIdQueryCommand;\n	private FirebaseTokenSaveCommand firebaseTokenSaveCommand;\n	private FirebaseTokenUpdateCommand firebaseTokenUpdateCommand;\n	private FirebaseTopicListByTokenDeleteCommand firebaseTopicListByTokenDeleteCommand;\n	private InstituicaoFirebaseTopicListSaveCommand instituicaoFirebaseTopicListSaveCommand;\n	private TokenHasAnotherEstudanteQueryCommand tokenHasAnotherEstudanteQueryCommand;\n	private FirebaseTokenService firebaseTokenService;\n\n	@BeforeEach\n	public void setup() {\n		this.allDevicesTopicSaveCommand = mock(AllDevicesTopicSaveCommand.class);\n		this.estudanteAndDependentesInstituicaoIdListQueryCommand = mock(EstudanteAndDependentesInstituicaoIdListQueryCommand.class);\n		this.firebaseTokenDeleteCommand = mock(FirebaseTokenDeleteCommand.class);\n		this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand = mock(FirebaseTokenIdByTokenAndEstudanteIdQueryCommand.class);\n		this.firebaseTokenIdQueryCommand = mock(FirebaseTokenIdQueryCommand.class);\n		this.firebaseTokenSaveCommand = mock(FirebaseTokenSaveCommand.class);\n		this.firebaseTokenUpdateCommand = mock(FirebaseTokenUpdateCommand.class);\n		this.firebaseTopicListByTokenDeleteCommand = mock(FirebaseTopicListByTokenDeleteCommand.class);\n		this.instituicaoFirebaseTopicListSaveCommand = mock(InstituicaoFirebaseTopicListSaveCommand.class);\n		this.tokenHasAnotherEstudanteQueryCommand = mock(TokenHasAnotherEstudanteQueryCommand.class);\n		this.firebaseTokenService = new FirebaseTokenService(\n				this.allDevicesTopicSaveCommand,\n				this.estudanteAndDependentesInstituicaoIdListQueryCommand,\n				this.firebaseTokenDeleteCommand,\n				this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand,\n				this.firebaseTokenIdQueryCommand,\n				this.firebaseTokenSaveCommand,\n				this.firebaseTokenUpdateCommand,\n				this.firebaseTopicListByTokenDeleteCommand,\n				this.instituicaoFirebaseTopicListSaveCommand,\n				this.tokenHasAnotherEstudanteQueryCommand\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos de saveTokenEstudante é bem sucedido caso o token exista no banco de dados"")\n	void saveTokenEstudanteWithTokenIdExpectUpdateToken() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var instituicaoList = Set.of(instituicao.getId());\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var token = this.faker.lorem().characters(1, 255);\n		var firebaseTokenId = this.faker.random().nextLong();\n		var firebaseTopicId = this.faker.random().nextLong();\n\n		when(this.firebaseTokenIdQueryCommand.execute(token))\n				.thenReturn(firebaseTokenId);\n\n		doNothing()\n				.when(this.firebaseTokenUpdateCommand)\n				.execute(firebaseTokenId);\n\n		when(this.allDevicesTopicSaveCommand.execute(token, firebaseTokenId))\n				.thenReturn(firebaseTopicId);\n\n		when(this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(estudanteId))\n				.thenReturn(instituicaoList);\n\n		doNothing()\n				.when(this.instituicaoFirebaseTopicListSaveCommand)\n				.execute(token, firebaseTokenId, instituicaoList);\n\n		this.firebaseTokenService.saveTokenEstudante(token, estudanteId);\n\n		verify(this.firebaseTokenIdQueryCommand).execute(token);\n		verify(this.firebaseTokenUpdateCommand).execute(firebaseTokenId);\n		verify(this.allDevicesTopicSaveCommand).execute(token, firebaseTokenId);\n		verify(this.estudanteAndDependentesInstituicaoIdListQueryCommand).execute(estudanteId);\n		verify(this.instituicaoFirebaseTopicListSaveCommand).execute(token, firebaseTokenId, instituicaoList);\n		verifyNoInteractions(this.firebaseTokenSaveCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos de saveTokenEstudante é bem sucedido caso o token não exista no banco de dados"")\n	void saveTokenEstudanteWithoutTokenIdExpectSaveToken() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var instituicaoList = Set.of(instituicao.getId());\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var token = this.faker.lorem().characters(1, 255);\n		var firebaseTokenId = this.faker.random().nextLong();\n		var firebaseTopicId = this.faker.random().nextLong();\n\n		when(this.firebaseTokenIdQueryCommand.execute(token))\n				.thenReturn(null);\n\n		when(this.firebaseTokenSaveCommand.execute(token, estudanteId))\n				.thenReturn(firebaseTokenId);\n\n		when(this.allDevicesTopicSaveCommand.execute(token, firebaseTokenId))\n				.thenReturn(firebaseTopicId);\n\n		when(this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(estudanteId))\n				.thenReturn(instituicaoList);\n\n		doNothing()\n				.when(this.instituicaoFirebaseTopicListSaveCommand)\n				.execute(token, firebaseTokenId, instituicaoList);\n\n		this.firebaseTokenService.saveTokenEstudante(token, estudanteId);\n\n		verify(this.firebaseTokenIdQueryCommand).execute(token);\n		verify(this.firebaseTokenSaveCommand).execute(token, estudanteId);\n		verify(this.allDevicesTopicSaveCommand).execute(token, firebaseTokenId);\n		verify(this.estudanteAndDependentesInstituicaoIdListQueryCommand).execute(estudanteId);\n		verify(this.instituicaoFirebaseTopicListSaveCommand).execute(token, firebaseTokenId, instituicaoList);\n		verifyNoInteractions(this.firebaseTokenUpdateCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos de deleteTokenEstudante é bem sucedido caso o token exista no banco de dados"")\n	void deleteTokenEstudanteWithTokenIdExpectUnsubscribeInTopicAndDeleteToken() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var token = this.faker.lorem().characters(1, 255);\n		var firebaseTokenId = this.faker.random().nextLong();\n\n		when(this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand.execute(token, estudanteId))\n				.thenReturn(firebaseTokenId);\n\n		doNothing()\n				.when(this.firebaseTopicListByTokenDeleteCommand)\n				.execute(firebaseTokenId, token);\n\n		doNothing()\n				.when(this.firebaseTokenDeleteCommand)\n				.execute(firebaseTokenId);\n\n		this.firebaseTokenService.deleteTokenEstudante(token, estudanteId);\n\n		verify(this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand).execute(token, estudanteId);\n		verify(this.firebaseTopicListByTokenDeleteCommand).execute(firebaseTokenId, token);\n		verify(this.firebaseTokenDeleteCommand).execute(firebaseTokenId);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos de deleteTokenEstudante é bem sucedido caso o token não exista no banco de dados"")\n	void deleteTokenEstudanteWithoutTokenIdExpectNoActions() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var token = this.faker.lorem().characters(1, 255);\n\n		when(this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand.execute(token, estudanteId))\n				.thenReturn(null);\n\n		this.firebaseTokenService.deleteTokenEstudante(token, estudanteId);\n\n		verify(this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand).execute(token, estudanteId);\n		verifyNoInteractions(this.firebaseTopicListByTokenDeleteCommand);\n		verifyNoInteractions(this.firebaseTokenDeleteCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método interno de tokenHasAnotherEstudante é bem sucedido"")\n	void tokenHasAnotherEstudanteExpectExecuteQueryCommand() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var token = this.faker.lorem().characters(1, 255);\n\n		when(this.tokenHasAnotherEstudanteQueryCommand.execute(estudanteId, token))\n				.thenReturn(this.faker.bool().bool());\n\n		this.firebaseTokenService.tokenHasAnotherEstudante(estudanteId, token);\n\n		verify(this.tokenHasAnotherEstudanteQueryCommand).execute(estudanteId, token);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FirebaseTokenITDto {\n\n	private String token;\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.PREENCHIMENTO_OBRIGATORIO;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.maxLengthValidationMessage;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model.FirebaseTokenDto;\nimport br.ufsc.bridge.jornadaestudante.common.validation.Validator;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\nclass FirebaseTokenValidatorTest {\n\n	private BridgeFaker faker;\n	private FirebaseTokenValidator firebaseTokenValidator;\n\n	@BeforeEach\n	void setup() {\n		this.firebaseTokenValidator = new FirebaseTokenValidator();\n		this.faker = new BridgeFaker();\n	}\n\n	@Test\n	void checkSuccess() {\n		FirebaseTokenDto firebaseTokenDto = new FirebaseTokenDto();\n		firebaseTokenDto.setToken(this.faker.lorem().characters(1, 255));\n\n		Validator<FirebaseTokenDto> validator = this.firebaseTokenValidator.validate(firebaseTokenDto);\n\n		assertThat(validator.isValid()).isTrue();\n	}\n\n	@Test\n	void checkTokenNotNull() {\n		FirebaseTokenDto firebaseTokenDto = new FirebaseTokenDto();\n		firebaseTokenDto.setToken(null);\n\n		Validator<FirebaseTokenDto> validator = this.firebaseTokenValidator.validate(firebaseTokenDto);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).isEqualTo(""{token=%s}"".formatted(PREENCHIMENTO_OBRIGATORIO));\n	}\n\n	@Test\n	void checkTokenMaxLength() {\n		FirebaseTokenDto firebaseTokenDto = new FirebaseTokenDto();\n		firebaseTokenDto.setToken(this.faker.lorem().characters(256));\n\n		Validator<FirebaseTokenDto> validator = this.firebaseTokenValidator.validate(firebaseTokenDto);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).isEqualTo(""{token=%s}"".formatted(maxLengthValidationMessage(255)));\n	}\n\n}"
factory,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.database;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model.FirebaseTokenDto;\nimport br.ufsc.bridge.jornadaestudante.factory.core.DtoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.core.SpecValue;\n\npublic class FirebaseTokenDtoFactory extends DtoFactory<FirebaseTokenDto, FirebaseTokenDtoFactory.Spec> {\n\n	@Override\n	protected FirebaseTokenDto create(Spec spec) {\n		var firebaseTokenDto = new FirebaseTokenDto();\n		firebaseTokenDto.setToken(spec.token.get());\n		return firebaseTokenDto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		var spec = new Spec();\n		spec.token.setDefault(() -> this.faker.lorem().characters(1, 255));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> token = new SpecValue<>();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteResponsavelFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\nimport br.ufsc.bridge.jornadaestudante.model.Matricula;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass EstudanteAndDependentesInstituicaoIdListQueryCommandIntegrationTest {\n\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private EstudanteResponsavelFactory estudanteResponsavelFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n	@Autowired private EstudanteAndDependentesInstituicaoIdListQueryCommand estudanteAndDependentesInstituicaoIdListQueryCommand;\n\n	record MatriculaRecord(Estudante estudante, Matricula matricula, Curso curso) {\n	}\n\n	private MatriculaRecord createMatriculaRecord() {\n		var cursoEstudante = this.cursoFactory.createRandom();\n		var estudante = this.estudanteFactory.createRandom();\n		var matriculaEstudante = this.matriculaFactory.create(matricula -> {\n			matricula.estudanteId.set(estudante.getId());\n			matricula.cursoId.set(cursoEstudante.getId());\n		});\n		return new MatriculaRecord(estudante, matriculaEstudante, cursoEstudante);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar as instituições relacionadas ao responsável e seus dependentes"")\n	void responsavelWithInstituicaoInDbExpectBothInstituicoes() {\n		var matriculaEstudante = this.createMatriculaRecord();\n		var matriculaEstudanteResponsavel = this.createMatriculaRecord();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(matriculaEstudante.estudante.getCpf());\n			s.cpfResponsavel.set(matriculaEstudanteResponsavel.estudante.getCpf());\n		});\n\n		var instituicaoIdList = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(matriculaEstudanteResponsavel.estudante.getId());\n\n		assertThat(instituicaoIdList)\n				.isNotEmpty()\n				.containsOnly(matriculaEstudante.curso.getInstituicaoId(), matriculaEstudanteResponsavel.curso.getInstituicaoId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar apenas a instituição relacionada ao estudante logado, sendo que este possui um responsável"")\n	void responsavelWithInstituicaoInDbExpectJustInstituicaoDependente() {\n		var matriculaEstudante = this.createMatriculaRecord();\n		var matriculaEstudanteResponsavel = this.createMatriculaRecord();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(matriculaEstudante.estudante.getCpf());\n			s.cpfResponsavel.set(matriculaEstudanteResponsavel.estudante.getCpf());\n		});\n\n		var instituicaoIdList = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(matriculaEstudante.estudante.getId());\n\n		assertThat(instituicaoIdList)\n				.isNotEmpty()\n				.containsOnly(matriculaEstudante.curso.getInstituicaoId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar apenas a instituição relacionada ao estudante logado, sendo que este não possui responsável e/ou dependente"")\n	void estudanteWithInstituicaoDbExpectSameInstituicao() {\n		var matriculaEstudanteWithoutDependenteResponsavel = this.createMatriculaRecord();\n		var matriculaEstudanteResponsavel = this.createMatriculaRecord();\n		var matriculaEstudanteDependente = this.createMatriculaRecord();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(matriculaEstudanteDependente.estudante.getCpf());\n			s.cpfResponsavel.set(matriculaEstudanteResponsavel.estudante.getCpf());\n		});\n\n		var instituicaoIdList = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(matriculaEstudanteWithoutDependenteResponsavel.estudante.getId());\n\n		assertThat(instituicaoIdList)\n				.isNotEmpty()\n				.containsOnly(matriculaEstudanteWithoutDependenteResponsavel.curso.getInstituicaoId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio se não existir estudante no banco de dados"")\n	void dbEmptyExpectEmptyList() {\n		var instituicaoIdList = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(new Random().nextLong());\n\n		assertThat(instituicaoIdList).isEmpty();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.common.utils.FirebaseTopicUtils.formatInstituicaoTopic;\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseTopic.firebaseTopic;\nimport static java.util.Collections.emptySet;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.tuple;\nimport static org.junit.jupiter.api.Assertions.assertThrowsExactly;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Set;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DataIntegrityViolationException;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.firebase.FirebaseTopicWrapper;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.firebase.FirebaseTokenFactory;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseTopic;\n\n@SpringJUnit5Test\nclass InstituicaoFirebaseTopicListSaveCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	private InstituicaoFirebaseTopicListSaveCommand instituicaoFirebaseTopicListSaveCommand;\n	@Autowired private DAO dao;\n	@Autowired private FirebaseTokenFactory firebaseTokenFactory;\n	@Mock private FirebaseTopicNamesQueryCommand firebaseTopicNamesQueryCommand;\n	@Mock private FirebaseTopicWrapper firebaseTopicWrapper;\n\n	@BeforeEach\n	void setup() {\n		this.instituicaoFirebaseTopicListSaveCommand = new InstituicaoFirebaseTopicListSaveCommand(\n				this.dao,\n				this.firebaseTopicNamesQueryCommand,\n				this.firebaseTopicWrapper\n		);\n	}\n\n	@Test\n	@DisplayName(""Verifica se o FirebaseTopic foi salvo corretamente de acordo com os atributos passados ao método"")\n	void executeSaveExpectSuccess() {\n		var instituicaoId = this.faker.random().nextLong();\n		var instituicaoIdSet = Set.of(instituicaoId);\n		var firebaseToken = this.firebaseTokenFactory.createRandom();\n		var topicName = formatInstituicaoTopic(instituicaoId);\n		var topicNameSet = Set.of(topicName);\n\n		when(this.firebaseTopicNamesQueryCommand.execute(firebaseToken.getId(), topicNameSet))\n				.thenReturn(emptySet());\n\n		doNothing()\n				.when(this.firebaseTopicWrapper)\n				.subscribeInTopic(firebaseToken.getToken(), topicName);\n\n		this.instituicaoFirebaseTopicListSaveCommand.execute(firebaseToken.getToken(), firebaseToken.getId(), instituicaoIdSet);\n\n		var result = this.dao.queryFactory()\n				.selectFrom(firebaseTopic)\n				.fetchOne();\n\n		assertThat(result).isNotNull();\n		assertThat(result.getFirebaseTokenId()).isEqualTo(firebaseToken.getId());\n		assertThat(result.getTopic()).isEqualTo(topicName);\n\n		verify(this.firebaseTopicNamesQueryCommand).execute(firebaseToken.getId(), topicNameSet);\n		verify(this.firebaseTopicWrapper).subscribeInTopic(firebaseToken.getToken(), topicName);\n	}\n\n	@Test\n	@DisplayName(""Verifica se mais de um FirebaseTopic é salvo corretamente de acordo com os atributos passados ao método"")\n	void moreThanOneInstituicaoIdExpectSucess() {\n		var instituicaoId1 = this.faker.random().nextLong();\n		var instituicaoId2 = this.faker.randomDifferentObject(instituicaoId1, this.faker.random()::nextLong);\n		var instituicaoIdSet = Set.of(instituicaoId1, instituicaoId2);\n		var firebaseToken = this.firebaseTokenFactory.createRandom();\n		var topicName1 = formatInstituicaoTopic(instituicaoId1);\n		var topicName2 = formatInstituicaoTopic(instituicaoId2);\n		var topicNameSet = Set.of(topicName1, topicName2);\n\n		when(this.firebaseTopicNamesQueryCommand.execute(firebaseToken.getId(), topicNameSet))\n				.thenReturn(emptySet());\n\n		doNothing()\n				.when(this.firebaseTopicWrapper)\n				.subscribeInTopic(firebaseToken.getToken(), topicName1);\n\n		doNothing()\n				.when(this.firebaseTopicWrapper)\n				.subscribeInTopic(firebaseToken.getToken(), topicName2);\n\n		this.instituicaoFirebaseTopicListSaveCommand.execute(firebaseToken.getToken(), firebaseToken.getId(), instituicaoIdSet);\n\n		var result = this.dao.queryFactory()\n				.selectFrom(firebaseTopic)\n				.fetch();\n\n		assertThat(result)\n				.isNotNull()\n				.hasSize(2)\n				.extracting(FirebaseTopic::getFirebaseTokenId, FirebaseTopic::getTopic)\n				.containsExactlyInAnyOrder(\n						tuple(firebaseToken.getId(), topicName1),\n						tuple(firebaseToken.getId(), topicName2)\n				);\n\n		verify(this.firebaseTopicNamesQueryCommand).execute(firebaseToken.getId(), topicNameSet);\n		verify(this.firebaseTopicWrapper).subscribeInTopic(firebaseToken.getToken(), topicName1);\n		verify(this.firebaseTopicWrapper).subscribeInTopic(firebaseToken.getToken(), topicName2);\n	}\n\n	@Test\n	@DisplayName(""Verifica se o FirebaseTopic não é salvo se o tópico já está inscrito"")\n	void topicAlreadySubscribedExpectSuccess() {\n		var instituicaoId = this.faker.random().nextLong();\n		var instituicaoIdSet = Set.of(instituicaoId);\n		var firebaseToken = this.firebaseTokenFactory.createRandom();\n		var topicName = formatInstituicaoTopic(instituicaoId);\n		var topicNameSet = Set.of(topicName);\n\n		when(this.firebaseTopicNamesQueryCommand.execute(firebaseToken.getId(), topicNameSet))\n				.thenReturn(topicNameSet);\n\n		this.instituicaoFirebaseTopicListSaveCommand.execute(firebaseToken.getToken(), firebaseToken.getId(), instituicaoIdSet);\n\n		var result = this.dao.queryFactory()\n				.selectFrom(firebaseTopic)\n				.fetchOne();\n\n		assertThat(result).isNull();\n\n		verify(this.firebaseTopicNamesQueryCommand).execute(firebaseToken.getId(), topicNameSet);\n		verifyNoInteractions(this.firebaseTopicWrapper);\n	}\n\n	@Test\n	@DisplayName(""Verifica se apenas o FirebaseTopic com tópico não inscrito é salvo"")\n	void moreThanOneInstituicaoIdWithOneTopicAlreadySubscribedExpectSuccess() {\n		var instituicaoId1 = this.faker.random().nextLong();\n		var instituicaoId2 = this.faker.randomDifferentObject(instituicaoId1, this.faker.random()::nextLong);\n		var instituicaoIdSet = Set.of(instituicaoId1, instituicaoId2);\n		var firebaseToken = this.firebaseTokenFactory.createRandom();\n		var topicName1 = formatInstituicaoTopic(instituicaoId1);\n		var topicName2 = formatInstituicaoTopic(instituicaoId2);\n		var topicNameSet = Set.of(topicName1, topicName2);\n\n		when(this.firebaseTopicNamesQueryCommand.execute(firebaseToken.getId(), topicNameSet))\n				.thenReturn(Set.of(topicName2));\n\n		doNothing()\n				.when(this.firebaseTopicWrapper)\n				.subscribeInTopic(firebaseToken.getToken(), topicName1);\n\n		this.instituicaoFirebaseTopicListSaveCommand.execute(firebaseToken.getToken(), firebaseToken.getId(), instituicaoIdSet);\n\n		var result = this.dao.queryFactory()\n				.selectFrom(firebaseTopic)\n				.fetchOne();\n\n		assertThat(result).isNotNull();\n		assertThat(result.getFirebaseTokenId()).isEqualTo(firebaseToken.getId());\n		assertThat(result.getTopic()).isEqualTo(topicName1);\n\n		verify(this.firebaseTopicNamesQueryCommand).execute(firebaseToken.getId(), topicNameSet);\n		verify(this.firebaseTopicWrapper).subscribeInTopic(firebaseToken.getToken(), topicName1);\n		verify(this.firebaseTopicWrapper, times(0)).subscribeInTopic(firebaseToken.getToken(), topicName2);\n	}\n\n	@Test\n	@DisplayName(""Verifica se o FirebaseTopic não é salvo caso instituicaoIdSet esteja vazio"")\n	void emptyInstituicaoIdSetExpectSuccess() {\n		var firebaseToken = this.firebaseTokenFactory.createRandom();\n		Set<Long> instituicaoIdSet = emptySet();\n		Set<String> topicNameSet = emptySet();\n\n		when(this.firebaseTopicNamesQueryCommand.execute(firebaseToken.getId(), topicNameSet))\n				.thenReturn(emptySet());\n\n		this.instituicaoFirebaseTopicListSaveCommand.execute(firebaseToken.getToken(), firebaseToken.getId(), instituicaoIdSet);\n\n		var result = this.dao.queryFactory()\n				.selectFrom(firebaseTopic)\n				.fetchOne();\n\n		assertThat(result).isNull();\n\n		verify(this.firebaseTopicNamesQueryCommand).execute(firebaseToken.getId(), topicNameSet);\n		verifyNoInteractions(this.firebaseTopicWrapper);\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso instituicaoIdSet seja nulo"")\n	void nullInstituicaoIdSetExpectNullPointerException() {\n		var firebaseToken = this.firebaseTokenFactory.createRandom();\n		var firebaseTokenId = firebaseToken.getId();\n		var token = firebaseToken.getToken();\n\n		assertThrowsExactly(NullPointerException.class, () ->\n				this.instituicaoFirebaseTopicListSaveCommand.execute(token, firebaseTokenId, null));\n\n		verifyNoInteractions(this.firebaseTopicNamesQueryCommand);\n		verifyNoInteractions(this.firebaseTopicWrapper);\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso o id do FirebaseToken não exista no banco de dados"")\n	void nonexistentFirebaseTokenIdExpectDataIntegrityViolationException() {\n		var instituicaoId = this.faker.random().nextLong();\n		var instituicaoIdSet = Set.of(instituicaoId);\n		var firebaseTokenId = this.faker.random().nextLong();\n		var token = this.faker.lorem().characters(1, 255);\n		var topicName = formatInstituicaoTopic(instituicaoId);\n		var topicNameSet = Set.of(topicName);\n\n		when(this.firebaseTopicNamesQueryCommand.execute(firebaseTokenId, topicNameSet))\n				.thenReturn(emptySet());\n\n		doNothing()\n				.when(this.firebaseTopicWrapper)\n				.subscribeInTopic(token, topicName);\n\n		assertThrowsExactly(DataIntegrityViolationException.class, () ->\n				this.instituicaoFirebaseTopicListSaveCommand.execute(token, firebaseTokenId, instituicaoIdSet));\n\n		verify(this.firebaseTopicNamesQueryCommand).execute(firebaseTokenId, topicNameSet);\n		verify(this.firebaseTopicWrapper).subscribeInTopic(token, topicName);\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso o id do FirebaseToken seja nulo"")\n	void nullFirebaseTokenIdExpectDataIntegrityViolationException() {\n		var instituicaoId = this.faker.random().nextLong();\n		var instituicaoIdSet = Set.of(instituicaoId);\n		var token = this.faker.lorem().characters(1, 255);\n		var topicName = formatInstituicaoTopic(instituicaoId);\n		var topicNameSet = Set.of(topicName);\n\n		when(this.firebaseTopicNamesQueryCommand.execute(null, topicNameSet))\n				.thenReturn(emptySet());\n\n		doNothing()\n				.when(this.firebaseTopicWrapper)\n				.subscribeInTopic(token, topicName);\n\n		assertThrowsExactly(DataIntegrityViolationException.class,\n				() -> this.instituicaoFirebaseTopicListSaveCommand.execute(token, null, instituicaoIdSet));\n\n		verify(this.firebaseTopicNamesQueryCommand).execute(null, topicNameSet);\n		verify(this.firebaseTopicWrapper).subscribeInTopic(token, topicName);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.test.util.TestUtils.ignoringMicros;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.time.Instant;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DataIntegrityViolationException;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseToken;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass FirebaseTokenSaveCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private DAO dao;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private FirebaseTokenSaveCommand firebaseTokenSaveCommand;\n\n	@Test\n	@DisplayName(""Verifica se o token foi salvo corretamente com os atributos passados ao método"")\n	void executeSaveExpectSuccess() {\n		var token = this.faker.lorem().characters(1, 255);\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var dataAtualizacao = Instant.now();\n\n		var firebaseTokenId = this.firebaseTokenSaveCommand.execute(token, estudanteId);\n\n		var firebaseTokenPersisted = this.dao.find(FirebaseToken.class, firebaseTokenId);\n\n		assertThat(firebaseTokenPersisted).isNotNull();\n		assertThat(firebaseTokenPersisted.getId()).isEqualTo(firebaseTokenId);\n		assertThat(firebaseTokenPersisted.getToken()).isEqualTo(token);\n		assertThat(firebaseTokenPersisted.getEstudanteId()).isEqualTo(estudanteId);\n		assertThat(firebaseTokenPersisted.getDataAtualizacao()).isCloseTo(dataAtualizacao, ignoringMicros());\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso o token seja nulo"")\n	void nullTokenExpectDataIntegrityViolationException() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n\n		assertThrows(DataIntegrityViolationException.class, () -> this.firebaseTokenSaveCommand.execute(null, estudanteId));\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso o id do estudante seja nulo"")\n	void nullEstudanteIdExpectDataIntegrityViolationException() {\n		var token = this.faker.lorem().characters(1, 255);\n\n		assertThrows(DataIntegrityViolationException.class, () -> this.firebaseTokenSaveCommand.execute(token, null));\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso o id do estudante não exista no banco de dados"")\n	void nonexistentEstudanteIdExpectDataIntegrityViolationException() {\n		var token = this.faker.lorem().characters(1, 255);\n		var estudanteId = this.faker.random().nextLong();\n\n		assertThrows(DataIntegrityViolationException.class, () -> this.firebaseTokenSaveCommand.execute(token, estudanteId));\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.test.util.TestUtils.ignoringMicros;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.time.Instant;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.InvalidDataAccessApiUsageException;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.common.data.exception.EntityNotFoundException;\nimport br.ufsc.bridge.jornadaestudante.factory.module.firebase.FirebaseTokenFactory;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseToken;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass FirebaseTokenUpdateCommandIntegrationTest {\n\n	@Autowired private DAO dao;\n	@Autowired private FirebaseTokenFactory firebaseTokenFactory;\n	@Autowired private FirebaseTokenUpdateCommand firebaseTokenUpdateCommand;\n\n	@Test\n	@DisplayName(""Verifica se o FirebaseToken teve sua dataAtualizacao atualizada"")\n	void executeUpdateExpectSuccess() {\n		var firebaseToken = this.firebaseTokenFactory.createRandom();\n		var dataAtualizacao = Instant.now();\n\n		this.firebaseTokenUpdateCommand.execute(firebaseToken.getId());\n\n		var firebaseTokenPersisted = this.dao.find(FirebaseToken.class, firebaseToken.getId());\n\n		assertThat(firebaseTokenPersisted).isNotNull();\n		assertThat(firebaseTokenPersisted.getToken()).isEqualTo(firebaseToken.getToken());\n		assertThat(firebaseTokenPersisted.getEstudanteId()).isEqualTo(firebaseToken.getEstudanteId());\n		assertThat(firebaseTokenPersisted.getDataAtualizacao()).isCloseTo(dataAtualizacao, ignoringMicros());\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso o id do FirebaseToken seja nulo"")\n	void nullFirebaseTokenIdExpectInvalidDataAccessApiUsageException() {\n		assertThrows(InvalidDataAccessApiUsageException.class, () -> this.firebaseTokenUpdateCommand.execute(null));\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso o id do FirebaseToken não exista no banco de dados"")\n	void nonexistentFirebaseTokenIdExpectEntityNotFoundException() {\n		var firebaseTokenId = new Random().nextLong();\n\n		assertThrows(EntityNotFoundException.class, () -> this.firebaseTokenUpdateCommand.execute(firebaseTokenId));\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.common.utils.FirebaseTopicUtils.TOPICO_TODOS_DISPOSITIVOS;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.verify;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.mock.mockito.MockBean;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.firebase.FirebaseTopicWrapper;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.firebase.FirebaseTokenFactory;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseTopic;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass AllDevicesTopicSaveCommandIntegrationTest {\n\n	@Autowired private DAO dao;\n	@Autowired private FirebaseTokenFactory firebaseTokenFactory;\n	@Autowired private AllDevicesTopicSaveCommand allDevicesTopicSaveCommand;\n\n	@MockBean\n	@Autowired\n	private FirebaseTopicWrapper firebaseTopicWrapper;\n\n	@Test\n	@DisplayName(""Verifica se FirebaseTopic é salvo corretamente com os atributos passados ao método"")\n	void executeSaveExpectSuccess() {\n		var firebaseToken = this.firebaseTokenFactory.createRandom();\n\n		doNothing()\n				.when(this.firebaseTopicWrapper)\n				.subscribeInTopic(firebaseToken.getToken(), TOPICO_TODOS_DISPOSITIVOS);\n\n		var firebaseTopicId = this.allDevicesTopicSaveCommand.execute(firebaseToken.getToken(), firebaseToken.getId());\n\n		var firebaseTopicPersisted = this.dao.find(FirebaseTopic.class, firebaseTopicId);\n\n		assertThat(firebaseTopicPersisted).isNotNull();\n		assertThat(firebaseTopicPersisted.getFirebaseTokenId()).isEqualTo(firebaseToken.getId());\n		assertThat(firebaseTopicPersisted.getTopic()).isEqualTo(TOPICO_TODOS_DISPOSITIVOS);\n\n		verify(this.firebaseTopicWrapper).subscribeInTopic(firebaseToken.getToken(), TOPICO_TODOS_DISPOSITIVOS);\n	}\n\n	@Test\n	@DisplayName(""Verifica se é disparada a exceção caso sejam nulos os parâmetros do método"")\n	void nullParametersExpectIllegalArgumentException() {\n		doNothing()\n				.when(this.firebaseTopicWrapper)\n				.subscribeInTopic(null, TOPICO_TODOS_DISPOSITIVOS);\n\n		assertThrows(IllegalArgumentException.class, () -> this.allDevicesTopicSaveCommand.execute(null, null));\n\n		verify(this.firebaseTopicWrapper).subscribeInTopic(null, TOPICO_TODOS_DISPOSITIVOS);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static br.ufsc.bridge.jornadaestudante.backend.test.util.TestUtils.ignoringMicros;\nimport static br.ufsc.bridge.jornadaestudante.common.utils.FirebaseTopicUtils.TOPICO_TODOS_DISPOSITIVOS;\nimport static br.ufsc.bridge.jornadaestudante.common.utils.FirebaseTopicUtils.formatInstituicaoTopic;\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseToken.firebaseToken;\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseTopic.firebaseTopic;\nimport static io.restassured.http.ContentType.JSON;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.Instant;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model.FirebaseTokenITDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteResponsavelFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.firebase.FirebaseTokenFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.firebase.FirebaseTopicFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\nimport br.ufsc.bridge.jornadaestudante.model.FirebaseToken;\nimport br.ufsc.bridge.jornadaestudante.model.Instituicao;\nimport br.ufsc.bridge.jornadaestudante.model.Matricula;\n\n@DatabaseTest\npublic class FirebaseTokenControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v1/firebase/token/"";\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private DAO dao;\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private EstudanteResponsavelFactory estudanteResponsavelFactory;\n	@Autowired private FirebaseTokenFactory firebaseTokenFactory;\n	@Autowired private FirebaseTopicFactory firebaseTopicFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n\n	record CursoAndMatriculaRecord(Instituicao instituicao, Curso curso, Estudante estudante, Matricula matricula) {\n	}\n\n	private CursoAndMatriculaRecord createCursoAndMatricula() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var curso = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso.getId());\n		});\n		return new CursoAndMatriculaRecord(instituicao, curso, estudante, matricula);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void saveFirebaseTokenWithoutAuthenticationTokenExpectUnauthorized() {\n		given()\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void saveFirebaseTokenWithInvalidAuthenticationTokenExpectUnauthorized() {\n		given()\n				.header(withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve adicionar com sucesso um novo token do Firebase para um estudante"")\n	void saveFirebaseTokenExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var firebaseTokenDto = new FirebaseTokenITDto();\n		firebaseTokenDto.setToken(this.faker.lorem().characters(1, 255));\n		var dataAtual = Instant.now();\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(firebaseTokenDto)\n				.post(BASE_URL)\n				.then()\n				.statusCode(200);\n\n		var result = this.dao.queryFactory()\n				.selectFrom(firebaseToken)\n				.fetchOne();\n\n		assertThat(result).isNotNull();\n		assertThat(result.getToken()).isEqualTo(firebaseTokenDto.getToken());\n		assertThat(result.getEstudanteId()).isEqualTo(estudante.getId());\n		assertThat(result.getDataAtualizacao()).isCloseTo(dataAtual, ignoringMicros());\n	}\n\n	@Test\n	@DisplayName(""Deve adicionar com sucesso os tópicos de um novo token do Firebase para um estudante"")\n	void saveFirebaseTopicsExpectSuccess() {\n		var cursoAndMatriculaRecord = this.createCursoAndMatricula();\n		var firebaseTokenDto = new FirebaseTokenITDto();\n		firebaseTokenDto.setToken(this.faker.lorem().characters(1, 255));\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(cursoAndMatriculaRecord.estudante)))\n				.contentType(JSON)\n				.body(firebaseTokenDto)\n				.post(BASE_URL)\n				.then()\n				.statusCode(200);\n\n		var result = this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseToken)\n				.join(firebaseTopic).on(firebaseTopic.firebaseTokenId.eq(firebaseToken.id))\n				.where(firebaseToken.token.eq(firebaseTokenDto.getToken()))\n				.fetch();\n\n		assertThat(result).containsExactlyInAnyOrder(\n				TOPICO_TODOS_DISPOSITIVOS,\n				formatInstituicaoTopic(cursoAndMatriculaRecord.instituicao.getId())\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve adicionar com sucesso os tópicos do Firebase para um estudante quando ele possuir um dependente"")\n	void saveFirebaseTopicsWhenEstudanteHasDependenteExpectSuccess() {\n		var cursoAndMatriculaRecordResponsavel = this.createCursoAndMatricula();\n		var cursoAndMatriculaRecordDependente = this.createCursoAndMatricula();\n		this.estudanteResponsavelFactory.create(e -> {\n			e.cpfEstudante.set(cursoAndMatriculaRecordDependente.estudante.getCpf());\n			e.cpfResponsavel.set(cursoAndMatriculaRecordResponsavel.estudante.getCpf());\n		});\n		var firebaseTokenDto = new FirebaseTokenITDto();\n		firebaseTokenDto.setToken(this.faker.lorem().characters(1, 255));\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(cursoAndMatriculaRecordResponsavel.estudante)))\n				.contentType(JSON)\n				.body(firebaseTokenDto)\n				.post(BASE_URL)\n				.then()\n				.statusCode(200);\n\n		var result = this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseToken)\n				.join(firebaseTopic).on(firebaseTopic.firebaseTokenId.eq(firebaseToken.id))\n				.where(firebaseToken.token.eq(firebaseTokenDto.getToken()))\n				.fetch();\n\n		assertThat(result).containsExactlyInAnyOrder(\n				TOPICO_TODOS_DISPOSITIVOS,\n				formatInstituicaoTopic(cursoAndMatriculaRecordDependente.instituicao.getId()),\n				formatInstituicaoTopic(cursoAndMatriculaRecordResponsavel.instituicao.getId())\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve atualizar com sucesso a data de atualização de um token do Firebase de um estudante"")\n	void updateDataAtualizacaoFirebaseTokenExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var tokenFirebase = this.firebaseTokenFactory.create(f -> f.estudanteId.set(estudante.getId()));\n		var tokenFirebaseDto = new FirebaseTokenITDto();\n		tokenFirebaseDto.setToken(tokenFirebase.getToken());\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(tokenFirebaseDto)\n				.post(BASE_URL)\n				.then()\n				.statusCode(200);\n\n		var result = this.dao.queryFactory()\n				.select(firebaseToken)\n				.from(firebaseToken)\n				.where(firebaseToken.token.eq(tokenFirebase.getToken()))\n				.fetchOne();\n\n		assertThat(result.getId()).isEqualTo(tokenFirebase.getId());\n		assertThat(result.getToken()).isEqualTo(tokenFirebase.getToken());\n		assertThat(result.getEstudanteId()).isEqualTo(estudante.getId());\n		assertThat(result.getDataAtualizacao()).isAfter(tokenFirebase.getDataAtualizacao());\n	}\n\n	@Test\n	@DisplayName(""Deve atualizar com sucesso os tópicos do token do Firebase de um estudante"")\n	void updateTopicsFirebaseTokenExpectSuccess() {\n		var cursoAndMatriculaRecord = this.createCursoAndMatricula();\n		var tokenFirebase = this.firebaseTokenFactory.create(f -> f.estudanteId.set(cursoAndMatriculaRecord.estudante.getId()));\n		this.firebaseTopicFactory.create(t -> {\n			t.firebaseTokenId.set(tokenFirebase.getId());\n			t.topic.set(TOPICO_TODOS_DISPOSITIVOS);\n		});\n		var tokenFirebaseITDto = new FirebaseTokenITDto();\n		tokenFirebaseITDto.setToken(tokenFirebase.getToken());\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(cursoAndMatriculaRecord.estudante)))\n				.contentType(JSON)\n				.body(tokenFirebaseITDto)\n				.post(BASE_URL)\n				.then()\n				.statusCode(200);\n\n		var result = this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseToken)\n				.join(firebaseTopic).on(firebaseTopic.firebaseTokenId.eq(firebaseToken.id))\n				.where(firebaseToken.token.eq(tokenFirebaseITDto.getToken()))\n				.fetch();\n\n		assertThat(result).containsExactlyInAnyOrder(\n				TOPICO_TODOS_DISPOSITIVOS,\n				formatInstituicaoTopic(cursoAndMatriculaRecord.instituicao.getId())\n		);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void deleteFirebaseTokenWithoutAuthenticationTokenExpectUnauthorized() {\n		given()\n				.delete(BASE_URL + this.faker.lorem().characters(1, 255))\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void deleteFirebaseTokenWithInvalidAuthenticationTokenExpectUnauthorized() {\n		given()\n				.header(withBearerAuthorization(""tokenInvalido""))\n				.delete(BASE_URL + this.faker.lorem().characters(1, 255))\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve deletar com sucesso o token do Firebase de um estudante"")\n	void deleteFirebaseTokenExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var tokenFirebase = this.firebaseTokenFactory.create(f -> f.estudanteId.set(estudante.getId()));\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.delete(BASE_URL + tokenFirebase.getToken())\n				.then()\n				.statusCode(200);\n\n		var result = this.dao.find(FirebaseToken.class, tokenFirebase.getId());\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve deletar com sucesso os tópicos de um token do Firebase de um estudante"")\n	void deleteFirebaseTopicsExpectSuccess() {\n		var cursoAndMatriculaRecord = this.createCursoAndMatricula();\n		var tokenFirebase = this.firebaseTokenFactory.create(f -> f.estudanteId.set(cursoAndMatriculaRecord.estudante.getId()));\n		this.firebaseTopicFactory.create(t -> {\n			t.firebaseTokenId.set(tokenFirebase.getId());\n			t.topic.set(TOPICO_TODOS_DISPOSITIVOS);\n		});\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(cursoAndMatriculaRecord.estudante)))\n				.delete(BASE_URL + tokenFirebase.getToken())\n				.then()\n				.statusCode(200);\n\n		var result = this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseToken)\n				.join(firebaseTopic).on(firebaseTopic.firebaseTokenId.eq(firebaseToken.id))\n				.where(firebaseToken.token.eq(tokenFirebase.getToken()))\n				.fetch();\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve deletar com sucesso o token do Firebase de um estudante quando houver mais de um token cadastrado"")\n	void deleteFirebaseTokenWhenThereIsMoreThanOneTokenRegisteredExpectSuccess() {\n		var estudante1 = this.estudanteFactory.createRandom();\n		var tokenFirebaseEstudante1 = this.firebaseTokenFactory.create(f -> f.estudanteId.set(estudante1.getId()));\n		var estudante2 = this.estudanteFactory.createRandom();\n		var tokenFirebaseEstudante2 = this.firebaseTokenFactory.create(f -> f.estudanteId.set(estudante2.getId()));\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante1)))\n				.delete(BASE_URL + tokenFirebaseEstudante1.getToken())\n				.then()\n				.statusCode(200);\n\n		var result1 = this.dao.find(FirebaseToken.class, tokenFirebaseEstudante1.getId());\n		var result2 = this.dao.find(FirebaseToken.class, tokenFirebaseEstudante2.getId());\n\n		assertThat(result1).isNull();\n		assertThat(result2).isNotNull();\n	}\n\n	@Test\n	@DisplayName(""Deve deletar com sucesso os tópicos de um token do Firebase de um estudante quando houver mais de um token cadastrado"")\n	void deleteFirebaseTopicsWhenThereIsMoreThanOneTokenRegisteredExpectSuccess() {\n		var cursoAndMatriculaRecordEstudante1 = this.createCursoAndMatricula();\n		var firebaseTokenEstudante1 = this.firebaseTokenFactory.create(f ->\n				f.estudanteId.set(cursoAndMatriculaRecordEstudante1.estudante.getId())\n		);\n		this.firebaseTopicFactory.create(t -> {\n			t.firebaseTokenId.set(firebaseTokenEstudante1.getId());\n			t.topic.set(TOPICO_TODOS_DISPOSITIVOS);\n		});\n		var cursoAndMatriculaRecordEstudante2 = this.createCursoAndMatricula();\n		var firebaseTokenEstudante2 = this.firebaseTokenFactory.create(f ->\n				f.estudanteId.set(cursoAndMatriculaRecordEstudante2.estudante.getId())\n		);\n		this.firebaseTopicFactory.create(t -> {\n			t.firebaseTokenId.set(firebaseTokenEstudante2.getId());\n			t.topic.set(TOPICO_TODOS_DISPOSITIVOS);\n		});\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(cursoAndMatriculaRecordEstudante1.estudante)))\n				.delete(BASE_URL + firebaseTokenEstudante1.getToken())\n				.then()\n				.statusCode(200);\n\n		var result1 = this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseToken)\n				.join(firebaseTopic).on(firebaseTopic.firebaseTokenId.eq(firebaseToken.id))\n				.where(firebaseToken.token.eq(firebaseTokenEstudante1.getToken()))\n				.fetch();\n\n		var result2 = this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseToken)\n				.join(firebaseTopic).on(firebaseTopic.firebaseTokenId.eq(firebaseToken.id))\n				.where(firebaseToken.token.eq(firebaseTokenEstudante2.getToken()))\n				.fetch();\n\n		assertThat(result1).isEmpty();\n		assertThat(result2).isNotEmpty();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.verifyNoMoreInteractions;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.database.FirebaseTokenDtoFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.service.FirebaseTokenService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.validator.FirebasePermissionAccess;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.validator.FirebaseTokenValidator;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.PrincipalFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.security.exception.HttpForbidden;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.validation.Validator;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\nclass FirebaseTokenControllerTest {\n\n	private static final String BASE_URL = ""/api/v1/firebase/token"";\n	private final EstudanteFactory estudanteFactory = new EstudanteFactory();\n	private final PrincipalFactory principalFactory = new PrincipalFactory();\n	private final FirebaseTokenDtoFactory firebaseTokenDtoFactory = new FirebaseTokenDtoFactory();\n	@Autowired private MockMvc mockMvc;\n	@Autowired private ObjectMapper objectMapper;\n\n	@MockBean\n	@Autowired\n	private FirebasePermissionAccess firebasePermissionAccess;\n\n	@MockBean\n	@Autowired\n	private FirebaseTokenService firebaseTokenService;\n\n	@MockBean\n	@Autowired\n	private FirebaseTokenValidator firebaseTokenValidator;\n\n	record EstudanteAndJwtRecord(Estudante estudante, Jwt jwt) {\n	}\n\n	private EstudanteAndJwtRecord createEstudanteAndJwtRecord() {\n		var estudante = this.estudanteFactory.createRandom();\n		var jwt = this.principalFactory.withEstudante(e -> e.id.set(estudante.getId()));\n		return new EstudanteAndJwtRecord(estudante, jwt);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se houve o correto acionamento dos métodos internos do endpoint de POST do token do firebase"")\n	void storeFirebaseTokenExpectSuccess() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n		var firebaseTokenDto = this.firebaseTokenDtoFactory.createRandom();\n\n		doNothing()\n				.when(this.firebasePermissionAccess)\n				.checkTokenAccess(firebaseTokenDto, estudanteAndJwtRecord.estudante.getId());\n\n		when(this.firebaseTokenValidator.validate(firebaseTokenDto))\n				.thenReturn(Validator.of(firebaseTokenDto));\n\n		doNothing()\n				.when(this.firebaseTokenService)\n				.saveTokenEstudante(firebaseTokenDto.getToken(), estudanteAndJwtRecord.estudante.getId());\n\n		this.mockMvc.perform(MockMvcRequestBuilders.post(BASE_URL)\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt))\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(firebaseTokenDto)))\n				.andExpect(status().is2xxSuccessful());\n\n		verify(this.firebasePermissionAccess).checkTokenAccess(firebaseTokenDto, estudanteAndJwtRecord.estudante.getId());\n		verify(this.firebaseTokenValidator).validate(firebaseTokenDto);\n		verify(this.firebaseTokenService).saveTokenEstudante(firebaseTokenDto.getToken(), estudanteAndJwtRecord.estudante.getId());\n		verifyNoMoreInteractions(this.firebaseTokenService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se houve o correto acionamento dos métodos internos do endpoint de POST do token do firebase""\n			+ "" quando houver erro ao salvar o token"")\n	void storeFirebaseTokenWithSaveTokenErrorExpectForbidden() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n		var firebaseTokenDto = this.firebaseTokenDtoFactory.createRandom();\n\n		doNothing()\n				.when(this.firebasePermissionAccess)\n				.checkTokenAccess(firebaseTokenDto, estudanteAndJwtRecord.estudante.getId());\n\n		when(this.firebaseTokenValidator.validate(firebaseTokenDto))\n				.thenReturn(Validator.of(firebaseTokenDto));\n\n		doThrow(HttpForbidden.class)\n				.when(this.firebaseTokenService)\n				.saveTokenEstudante(firebaseTokenDto.getToken(), estudanteAndJwtRecord.estudante.getId());\n\n		doNothing()\n				.when(this.firebaseTokenService)\n				.deleteTokenEstudante(firebaseTokenDto.getToken(), estudanteAndJwtRecord.estudante.getId());\n\n		this.mockMvc.perform(MockMvcRequestBuilders.post(BASE_URL)\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt))\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(firebaseTokenDto)))\n				.andExpect(status().isForbidden());\n\n		verify(this.firebasePermissionAccess).checkTokenAccess(firebaseTokenDto, estudanteAndJwtRecord.estudante.getId());\n		verify(this.firebaseTokenValidator).validate(firebaseTokenDto);\n		verify(this.firebaseTokenService).saveTokenEstudante(firebaseTokenDto.getToken(), estudanteAndJwtRecord.estudante.getId());\n		verify(this.firebaseTokenService).deleteTokenEstudante(firebaseTokenDto.getToken(), estudanteAndJwtRecord.estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de POST do token do firebase quando não há token de acesso"")\n	void storeFirebaseTokenWithoutTokenExpectUnauthorized() throws Exception {\n		this.mockMvc.perform(post(BASE_URL))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.firebasePermissionAccess);\n		verifyNoInteractions(this.firebaseTokenValidator);\n		verifyNoInteractions(this.firebaseTokenService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de POST do token do firebase""\n			+ "" quando o token de acesso for inválido"")\n	void storeFirebaseTokenWhenInvalidTokenExpectUnauthorized() throws Exception {\n		var bearerAuth = withBearerAuthorization(""INVALID"");\n\n		this.mockMvc.perform(post(BASE_URL)\n						.header(bearerAuth.getName(), bearerAuth.getValue()))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.firebasePermissionAccess);\n		verifyNoInteractions(this.firebaseTokenValidator);\n		verifyNoInteractions(this.firebaseTokenService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento do service do endpoint POST do token do firebase quando o estudante não tem permissão"")\n	void storeFirebaseTokenWhenEstudanteHasNoPermissionExpectForbidden() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n		var firebaseTokenDto = this.firebaseTokenDtoFactory.createRandom();\n\n		doThrow(HttpForbidden.class)\n				.when(this.firebasePermissionAccess)\n				.checkTokenAccess(firebaseTokenDto, estudanteAndJwtRecord.estudante.getId());\n\n		this.mockMvc.perform(MockMvcRequestBuilders.post(BASE_URL)\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt))\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(firebaseTokenDto)))\n				.andExpect(status().isForbidden());\n\n		verify(this.firebasePermissionAccess).checkTokenAccess(firebaseTokenDto, estudanteAndJwtRecord.estudante.getId());\n		verifyNoInteractions(this.firebaseTokenValidator);\n		verifyNoInteractions(this.firebaseTokenService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos do endpoint de POST do token do firebase não continua após erros de validação"")\n	void storeFirebaseTokenWhenValidatorHasErrorsExpectBadRequest() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n		var firebaseTokenDto = this.firebaseTokenDtoFactory.createRandom();\n		var validatorWithError = Validator.of(firebaseTokenDto);\n		validatorWithError.error(""ERROR"");\n\n		doNothing()\n				.when(this.firebasePermissionAccess)\n				.checkTokenAccess(firebaseTokenDto, estudanteAndJwtRecord.estudante.getId());\n\n		when(this.firebaseTokenValidator.validate(firebaseTokenDto))\n				.thenReturn(validatorWithError);\n\n		this.mockMvc.perform(MockMvcRequestBuilders.post(BASE_URL)\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt))\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(firebaseTokenDto)))\n				.andExpect(status().isBadRequest());\n\n		verify(this.firebasePermissionAccess).checkTokenAccess(firebaseTokenDto, estudanteAndJwtRecord.estudante.getId());\n		verify(this.firebaseTokenValidator).validate(firebaseTokenDto);\n		verifyNoInteractions(this.firebaseTokenService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se houve o correto acionamento dos métodos internos do endpoint de DELETE do token do firebase"")\n	void deleteFirebaseTokenExpectSuccess() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n		var firebaseToken = this.firebaseTokenDtoFactory.createRandom().getToken();\n\n		doNothing()\n				.when(this.firebaseTokenService)\n				.deleteTokenEstudante(firebaseToken, estudanteAndJwtRecord.estudante.getId());\n\n		this.mockMvc.perform(MockMvcRequestBuilders.delete(BASE_URL + ""/"" + firebaseToken)\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt)))\n				.andExpect(status().is2xxSuccessful());\n\n		verify(this.firebaseTokenService).deleteTokenEstudante(firebaseToken, estudanteAndJwtRecord.estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de DELETE do token do firebase quando não há token de acesso"")\n	void deleteFirebaseTokenWithoutTokenExpectUnauthorized() throws Exception {\n		var firebaseToken = this.firebaseTokenDtoFactory.createRandom().getToken();\n\n		this.mockMvc.perform(delete(BASE_URL + ""/"" + firebaseToken))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.firebaseTokenService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de DELETE do token do firebase""\n			+ "" quando o token de acesso for inválido"")\n	void deleteFirebaseTokenWhenInvalidTokenExpectUnauthorized() throws Exception {\n		var firebaseToken = this.firebaseTokenDtoFactory.createRandom().getToken();\n		var bearerAuth = withBearerAuthorization(""INVALID"");\n		\n		this.mockMvc.perform(delete(BASE_URL + ""/"" + firebaseToken)\n						.header(bearerAuth.getName(), bearerAuth.getValue()))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.firebaseTokenService);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service;\n\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.MockitoAnnotations.openMocks;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.command.ParcelasEstudanteQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\n\npublic class PeMeiaServiceTest {\n\n	private PeMeiaService peMeiaService;\n	@Mock private ParcelasEstudanteQueryCommand parcelasEstudanteQueryCommand;\n\n	@BeforeEach\n	void setup() {\n		openMocks(this);\n		this.peMeiaService = new PeMeiaService(this.parcelasEstudanteQueryCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve testar o método loadDadosEstudante e retornar a lista de parcelas"")\n	void loadDadosEstudanteExpectSuccess() {\n		var estudanteId = new Random().nextLong();\n		List<PeMeiaParcelaDto> peMeiaParcelaDtoList = Collections.emptyList();\n\n		when(this.parcelasEstudanteQueryCommand.execute(estudanteId)).thenReturn(peMeiaParcelaDtoList);\n\n		var result = this.peMeiaService.loadDadosEstudante(estudanteId);\n\n		Assertions.assertThat(result).isEqualTo(peMeiaParcelaDtoList);\n\n		verify(this.parcelasEstudanteQueryCommand).execute(estudanteId);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.command;\n\nimport java.util.Random;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.peDeMeia.DadosBancariosFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.peDeMeia.PeMeiaParcelaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SituacaoParcelaDbEnum;\n\n@SpringJUnit5Test\n@DatabaseTest\npublic class ParcelasEstudanteQueryCommandIntegrationTest {\n\n	@Autowired\n	private ParcelasEstudanteQueryCommand parcelasEstudanteQueryCommand;\n	@Autowired\n	private PeMeiaParcelaFactory peMeiaParcelaFactory;\n	@Autowired\n	private DadosBancariosFactory dadosBancariosFactory;\n	@Autowired\n	private EstudanteFactory estudanteFactory;\n\n	@Test\n	@DisplayName(""Deve retornar lista vazia quando o estudante não existe"")\n	void loadParcelasWithNonExistingStudentExpectEmptyList() {\n		var estudanteId = new Random().nextLong();\n\n		var parcelasDto = this.parcelasEstudanteQueryCommand.execute(estudanteId);\n\n		Assertions.assertThat(parcelasDto).isNotNull();\n		Assertions.assertThat(parcelasDto).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar lista vazia quando não houverem parcelas cadastradas para o estudante"")\n	void loadParcelasWithEmptyDbExpectEmptyList() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var parcelasDto = this.parcelasEstudanteQueryCommand.execute(estudante.getId());\n\n		Assertions.assertThat(parcelasDto).isNotNull();\n		Assertions.assertThat(parcelasDto).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve verificar a correspondência dos IDs de parcelas para um estudante"")\n	void loadParcelasIdsWithExistingStudentExpectCorrectIds() {\n		var estudante = this.estudanteFactory.createRandom();\n		var estudante2 = this.estudanteFactory.createRandom();\n		var dadosBancarios = this.dadosBancariosFactory.createRandom();\n\n		var parcela1 = this.peMeiaParcelaFactory.create(spec -> {\n			spec.cpfEstudante.set(estudante.getCpf());\n			spec.dadosBancariosId.set(dadosBancarios.getId());\n		});\n		var parcela2 = this.peMeiaParcelaFactory.create(spec -> {\n			spec.cpfEstudante.set(estudante.getCpf());\n			spec.dadosBancariosId.set(dadosBancarios.getId());\n		});\n\n		this.peMeiaParcelaFactory.create(spec -> spec.cpfEstudante.set(estudante2.getCpf()));\n\n		var parcelasDto = this.parcelasEstudanteQueryCommand.execute(estudante.getId());\n\n		Assertions.assertThat(parcelasDto).isNotNull();\n		Assertions.assertThat(parcelasDto).hasSize(2);\n		Assertions.assertThat(parcelasDto.stream().map(PeMeiaParcelaDto::getCodigoParcela))\n				.containsExactlyInAnyOrder(parcela1.getCodigoParcela(), parcela2.getCodigoParcela());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar lista de parcela com sucesso para um estudante"")\n	void loadParcelasForExistingStudentExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var dadosBancarios = this.dadosBancariosFactory.createRandom();\n\n		var parcela = this.peMeiaParcelaFactory.create(spec -> {\n			spec.cpfEstudante.set(estudante.getCpf());\n			spec.dadosBancariosId.set(dadosBancarios.getId());\n		});\n\n		var parcelasDto = this.parcelasEstudanteQueryCommand.execute(estudante.getId());\n\n		Assertions.assertThat(parcelasDto).isNotNull();\n		Assertions.assertThat(parcelasDto.get(0).getCodigoParcela()).isEqualTo(parcela.getCodigoParcela());\n		Assertions.assertThat(parcelasDto.get(0).getValorParcela()).isEqualTo(parcela.getValorParcela());\n		Assertions.assertThat(parcelasDto.get(0).getNumeroParcela()).isEqualTo(parcela.getNumeroParcela());\n		Assertions.assertThat(parcelasDto.get(0).getSituacaoParcelaId()).isEqualTo(parcela.getSituacaoParcelaId());\n		Assertions.assertThat(parcelasDto.get(0).getCompetencia()).isEqualTo(parcela.getCompetencia());\n		Assertions.assertThat(parcelasDto.get(0).getDataOperacao()).isEqualTo(parcela.getDataOperacao());\n		Assertions.assertThat(parcelasDto.get(0).getMotivoRejeicaoId()).isEqualTo(parcela.getMotivoRejeicaoId());\n		Assertions.assertThat(parcelasDto.get(0).getCodigoBanco()).isEqualTo(dadosBancarios.getCodigoBanco());\n		Assertions.assertThat(parcelasDto.get(0).getCodigoAgencia()).isEqualTo(dadosBancarios.getCodigoAgencia());\n		Assertions.assertThat(parcelasDto.get(0).getNumeroConta()).isEqualTo(dadosBancarios.getNumeroConta());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar parcelas sem dados bancários para o estudante"")\n	void loadParcelasRejeitadasExpectParcelaWithMissingBankData() {\n		var estudante = this.estudanteFactory.createRandom();\n		this.peMeiaParcelaFactory.create(spec -> {\n			spec.cpfEstudante.set(estudante.getCpf());\n			spec.situacaoParcelaId.set(SituacaoParcelaDbEnum.REJEITADA.getId());\n		});\n\n		var parcelasDto = this.parcelasEstudanteQueryCommand.execute(estudante.getId());\n\n		Assertions.assertThat(parcelasDto).isNotNull();\n		Assertions.assertThat(parcelasDto).hasSize(1);\n		Assertions.assertThat(parcelasDto.get(0).getCodigoBanco()).isNull();\n		Assertions.assertThat(parcelasDto.get(0).getCodigoAgencia()).isNull();\n		Assertions.assertThat(parcelasDto.get(0).getNumeroConta()).isNull();\n	}\n\n	// TODO: avaliar como este teste será realizado.\n	//	@ParameterizedTest\n	//	@EnumSource(value = MotivoRejeicaoDbEnum.class, mode = EnumSource.Mode.EXCLUDE, names = { ""PARCELA_DUPLICADA"" })\n	//	@DisplayName(""Deve retornar parcelas com um motivo de rejeição para o estudante"")\n	//	void loadParcelasWithRejectedMotivesExpectList(MotivoRejeicaoDbEnum motivoRejeicao) {\n	//		var estudante = this.estudanteFactory.createRandom();\n	//		this.peMeiaParcelaFactory.create(spec -> {\n	//			spec.cpfEstudante.set(estudante.getCpf());\n	//			spec.motivoRejeicaoId.set(motivoRejeicao.getId());\n	//		});\n	//\n	//		var parcelasDto = this.parcelasEstudanteQueryCommand.execute(estudante.getId());\n	//\n	//		Assertions.assertThat(parcelasDto).isNotNull();\n	//		Assertions.assertThat(parcelasDto).hasSize(1);\n	//		Assertions.assertThat(parcelasDto.get(0).getMotivoRejeicaoId()).isEqualTo(motivoRejeicao.getId());\n	//	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoParcelaDbEnum.PAGAMENTO_CREDITO_CONTA;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoParcelaDbEnum.REJEITADA;\nimport static io.restassured.http.ContentType.JSON;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Comparator;\nimport java.util.Random;\nimport java.util.stream.Collectors;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.peDeMeia.DadosBancariosFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.peDeMeia.PeMeiaParcelaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.enums.SituacaoParcelaDbEnum;\n\n@DatabaseTest\nclass PeMeiaControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v1/pedemeia/"";\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private PeMeiaParcelaFactory peMeiaParcelaFactory;\n	@Autowired private DadosBancariosFactory dadosBancariosFactory;\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadWhenTokenIsNullExpectUnauthorized() {\n		given()\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadSolicitacaoDadosWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	// TODO: avaliar como este teste será realizado.\n	@Disabled\n	@ParameterizedTest\n	@EnumSource(value = SituacaoParcelaDbEnum.class,\n			names = { ""VENCIDA"", ""REJEITADA"" })\n	@DisplayName(""Deve retornar com sucesso as parcelas de um estudante quando a situação da parcela é rejeitada ou vencida"")\n	void loadPeMeiaParcelaWhenSituacaoParcelaIsRejeitadaOrVencidaExpectSuccess(SituacaoParcelaDbEnum situacaoParcela) {\n		var estudante = this.estudanteFactory.createRandom();\n		var peMeiaParcela = this.peMeiaParcelaFactory.create(spec -> {\n			spec.cpfEstudante.set(estudante.getCpf());\n			spec.situacaoParcelaId.set(situacaoParcela.getId());\n			spec.motivoRejeicaoId.set(new Random().nextInt());\n		});\n\n		var peMeiaParcelaList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, PeMeiaParcelaDto.class);\n\n		var peMeiaParcelaDto = peMeiaParcelaList.iterator().next();\n\n		assertThat(peMeiaParcelaList).isNotEmpty();\n		Assertions.assertThat(peMeiaParcelaDto.getCodigoBanco()).isNull();\n		Assertions.assertThat(peMeiaParcelaDto.getCodigoAgencia()).isNull();\n		Assertions.assertThat(peMeiaParcelaDto.getNumeroConta()).isNull();\n		Assertions.assertThat(peMeiaParcelaDto.getCodigoParcela()).isEqualTo(peMeiaParcela.getCodigoParcela());\n		Assertions.assertThat(peMeiaParcelaDto.getValorParcela()).isEqualTo(peMeiaParcela.getValorParcela());\n		Assertions.assertThat(peMeiaParcelaDto.getNumeroParcela()).isEqualTo(peMeiaParcela.getNumeroParcela());\n		Assertions.assertThat(peMeiaParcelaDto.getSituacaoParcelaId()).isEqualTo(peMeiaParcela.getSituacaoParcelaId());\n		Assertions.assertThat(peMeiaParcelaDto.getCompetencia()).isEqualTo(peMeiaParcela.getCompetencia());\n		Assertions.assertThat(peMeiaParcelaDto.getDataOperacao()).isEqualTo(peMeiaParcela.getDataOperacao());\n		Assertions.assertThat(peMeiaParcelaDto.getMotivoRejeicaoId()).isEqualTo(peMeiaParcela.getMotivoRejeicaoId());\n		//		Assertions.assertThat(peMeiaParcelaDto.getDescricaoMotivoRejeicao()).isEqualTo(MotivoRejeicaoDbEnum.getById(peMeiaParcela.getMotivoRejeicaoId()).getMotivo());\n		//		Assertions.assertThat(peMeiaParcelaDto.getOrientacaoMotivoRejeicao()).isEqualTo(MotivoRejeicaoDbEnum.getById(peMeiaParcela.getMotivoRejeicaoId()).getOrientacao());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso as parcelas de um estudante quando a situação da parcela é crédito em conta"")\n	void loadPeMeiaParcelaWhenSituacaoParcelaIsPagamentoCreditoContaExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var dadosBancarios = this.dadosBancariosFactory.createRandom();\n		var peMeiaParcela = this.peMeiaParcelaFactory.create(spec -> {\n			spec.cpfEstudante.set(estudante.getCpf());\n			spec.situacaoParcelaId.set(PAGAMENTO_CREDITO_CONTA.getId());\n			spec.dadosBancariosId.set(dadosBancarios.getId());\n		});\n\n		var peMeiaParcelaList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, PeMeiaParcelaDto.class);\n\n		var peMeiaParcelaDto = peMeiaParcelaList.iterator().next();\n\n		assertThat(peMeiaParcelaList).isNotEmpty();\n		Assertions.assertThat(peMeiaParcelaDto.getMotivoRejeicaoId()).isNull();\n		Assertions.assertThat(peMeiaParcelaDto.getDescricaoMotivoRejeicao()).isNull();\n		Assertions.assertThat(peMeiaParcelaDto.getOrientacaoMotivoRejeicao()).isNull();\n		Assertions.assertThat(peMeiaParcelaDto.getCodigoParcela()).isEqualTo(peMeiaParcela.getCodigoParcela());\n		Assertions.assertThat(peMeiaParcelaDto.getValorParcela()).isEqualTo(peMeiaParcela.getValorParcela());\n		Assertions.assertThat(peMeiaParcelaDto.getNumeroParcela()).isEqualTo(peMeiaParcela.getNumeroParcela());\n		Assertions.assertThat(peMeiaParcelaDto.getSituacaoParcelaId()).isEqualTo(peMeiaParcela.getSituacaoParcelaId());\n		Assertions.assertThat(peMeiaParcelaDto.getCompetencia()).isEqualTo(peMeiaParcela.getCompetencia());\n		Assertions.assertThat(peMeiaParcelaDto.getDataOperacao()).isEqualTo(peMeiaParcela.getDataOperacao());\n		Assertions.assertThat(peMeiaParcelaDto.getCodigoBanco()).isEqualTo(dadosBancarios.getCodigoBanco());\n		Assertions.assertThat(peMeiaParcelaDto.getCodigoAgencia()).isEqualTo(dadosBancarios.getCodigoAgencia());\n		Assertions.assertThat(peMeiaParcelaDto.getNumeroConta()).isEqualTo(dadosBancarios.getNumeroConta());\n	}\n\n	// TODO: avaliar como este teste será realizado.\n	@Disabled\n	@Test\n	@DisplayName(""Deve retornar com sucesso as parcelas de um estudante quando ele possui múltiplas parcelas"")\n	void loadPeMeiaParcelaWithMultipleParcelasExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var dadosBancarios = this.dadosBancariosFactory.createRandom();\n		var peMeiaParcela = this.peMeiaParcelaFactory.create(spec -> {\n			spec.cpfEstudante.set(estudante.getCpf());\n			spec.situacaoParcelaId.set(PAGAMENTO_CREDITO_CONTA.getId());\n			spec.dadosBancariosId.set(dadosBancarios.getId());\n		});\n		var peMeiaParcela2 = this.peMeiaParcelaFactory.create(spec -> {\n			spec.cpfEstudante.set(estudante.getCpf());\n			spec.codigoParcela.set(peMeiaParcela.getCodigoParcela() + 1);\n			spec.situacaoParcelaId.set(REJEITADA.getId());\n			spec.motivoRejeicaoId.set(new Random().nextInt());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, PeMeiaParcelaDto.class)\n				.stream()\n				.sorted(Comparator.comparingLong(PeMeiaParcelaDto::getCodigoParcela))\n				.collect(Collectors.toList());\n\n		assertThat(resultList).hasSize(2);\n		Assertions.assertThat(resultList.get(0).getCodigoParcela()).isEqualTo(peMeiaParcela.getCodigoParcela());\n		Assertions.assertThat(resultList.get(0).getSituacaoParcelaId()).isEqualTo(peMeiaParcela.getSituacaoParcelaId());\n		Assertions.assertThat(resultList.get(0).getMotivoRejeicaoId()).isNull();\n		Assertions.assertThat(resultList.get(0).getCodigoBanco()).isEqualTo(dadosBancarios.getCodigoBanco());\n\n		Assertions.assertThat(resultList.get(1).getCodigoParcela()).isEqualTo(peMeiaParcela2.getCodigoParcela());\n		Assertions.assertThat(resultList.get(1).getSituacaoParcelaId()).isEqualTo(peMeiaParcela2.getSituacaoParcelaId());\n		Assertions.assertThat(resultList.get(1).getMotivoRejeicaoId()).isEqualTo(peMeiaParcela2.getMotivoRejeicaoId());\n		Assertions.assertThat(resultList.get(1).getCodigoBanco()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando não houver nenhuma parcela para o estudante"")\n	void loadPeMeiaParcelaWithoutParcelaDoEstudanteExpectSuccessAndEmptyResponse() {\n		var estudante = this.estudanteFactory.createRandom();\n		var estudante2 = this.estudanteFactory.createRandom();\n		this.peMeiaParcelaFactory.create(spec -> spec.cpfEstudante.set(estudante2.getCpf()));\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, PeMeiaParcelaDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.controller;\n\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service.PeMeiaService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.PrincipalFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\npublic class PeMeiaControllerTest {\n\n	private static final String BASE_URL = ""/api/v1/pedemeia"";\n	private PrincipalFactory principalFactory = new PrincipalFactory();\n\n	@MockBean\n	@Autowired\n	private PeMeiaService peMeiaService;\n\n	@Autowired\n	private MockMvc mockMvc;\n\n	@Test\n	@DisplayName(""Unauthorized ao tentar obter dados do Pe de Meia sem token de autenticação"")\n	void loadDadosPeMeiaWithoutValidJwtExpectUnauthorized() throws Exception {\n		this.mockMvc.perform(get(BASE_URL))\n				.andExpect(status().isUnauthorized());\n	}\n\n	@Test\n	@DisplayName(""Sucesso ao obter dados do Pe de Meia"")\n	void loadDadosPeMeiaExpectSuccess() throws Exception {\n		var estudanteId = 1L;\n		var jwt = this.principalFactory.withEstudante(e -> e.id.set(estudanteId));\n\n		List<PeMeiaParcelaDto> peMeiaParcelaDtoList = Collections.emptyList();\n\n		when(this.peMeiaService.loadDadosEstudante(estudanteId)).thenReturn(peMeiaParcelaDtoList);\n\n		this.mockMvc.perform(get(BASE_URL)\n						.with(jwt().jwt(jwt)))\n				.andExpect(status().is2xxSuccessful());\n\n		verify(this.peMeiaService).loadDadosEstudante(estudanteId);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.service;\n\nimport static java.util.Collections.singletonList;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.List;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command.EstudanteInstituicaoIdsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command.MensagemDtoListAllEstudantesQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MensagemDto;\n\nclass MensagemServiceTest {\n\n	private EstudanteInstituicaoIdsQueryCommand estudanteInstituicaoIdsQueryCommand;\n	private MensagemDtoListAllEstudantesQueryCommand mensagemDtoListAllEstudantesQueryCommand;\n	private MensagemService mensagemService;\n\n	@BeforeEach\n	void setup() {\n		this.estudanteInstituicaoIdsQueryCommand = mock(EstudanteInstituicaoIdsQueryCommand.class);\n		this.mensagemDtoListAllEstudantesQueryCommand = mock(MensagemDtoListAllEstudantesQueryCommand.class);\n		this.mensagemService = new MensagemService(this.estudanteInstituicaoIdsQueryCommand, this.mensagemDtoListAllEstudantesQueryCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadMensagens é bem sucedido"")\n	void loadMensagensExpectSuccess() {\n		var estudanteId = new Random().nextLong();\n		var instituicaoList = singletonList(new Random().nextLong());\n		var mensagemDto = new MensagemDto();\n\n		when(this.estudanteInstituicaoIdsQueryCommand.execute(estudanteId))\n				.thenReturn(instituicaoList);\n\n		when(this.mensagemDtoListAllEstudantesQueryCommand.execute(instituicaoList))\n				.thenReturn(List.of(mensagemDto));\n\n		var result = this.mensagemService.loadMensagens(estudanteId);\n\n		assertThat(result.iterator().next()).isEqualTo(mensagemDto);\n\n		verify(this.estudanteInstituicaoIdsQueryCommand).execute(estudanteId);\n		verify(this.mensagemDtoListAllEstudantesQueryCommand).execute(instituicaoList);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\n@Data\npublic class MensagemITDto {\n\n	private Long id;\n	private String titulo;\n	private String descricao;\n	private LocalDate dataValidade;\n	private Instant dataCriacao;\n	private Instant dataAtualizacao;\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.mensagem.SituacaoMensagemRefEnum.ATIVA;\nimport static java.util.Collections.emptyList;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MensagemDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.mensagem.MensagemFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.mensagem.MensagemInstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.mensagem.SituacaoMensagemRefEnum;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass MensagemDtoListAllEstudantesQueryCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private MensagemFactory mensagemFactory;\n	@Autowired private MensagemInstituicaoFactory mensagemInstituicaoFactory;\n	@Autowired private MensagemDtoListAllEstudantesQueryCommand mensagemDtoListAllEstudantesQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar a mensagem relacionada à instituição fornecida"")\n	void executeExpectSuccess() {\n		var mensagem = this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n		var mensagemInstituicao = this.mensagemInstituicaoFactory.create(m -> m.mensagemId.set(mensagem.getId()));\n\n		var resultList = this.mensagemDtoListAllEstudantesQueryCommand.execute(List.of(mensagemInstituicao.getInstituicaoId()));\n		var result = resultList.iterator().next();\n\n		assertThat(result.getId()).isEqualTo(mensagem.getId());\n		assertThat(result.getTitulo()).isEqualTo(mensagem.getTitulo());\n		assertThat(result.getDescricao()).isEqualTo(mensagem.getDescricao());\n		assertThat(result.getDataValidade()).isEqualTo(mensagem.getDataValidade());\n		assertThat(result.getDataCriacao()).isEqualTo(mensagem.getDataCriacao());\n		assertThat(result.getDataAtualizacao()).isEqualTo(mensagem.getDataAtualizacao());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a mensagem que não possui relação com instituições quando não forem passadas instituições como argumento"")\n	void executeWhenEmptyInstituicaoIdsExpectAllDevicesMensagem() {\n		var mensagem = this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n		this.mensagemInstituicaoFactory.createRandom();\n\n		var resultList = this.mensagemDtoListAllEstudantesQueryCommand.execute(emptyList());\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(mensagem.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar mensagens relacionadas à instituição fornecida e não relacionadas com nenhuma instituição"")\n	void executeWithInstituicaoIdsExpectAllDevicesAndInstituicaoMensagem() {\n		var mensagemInstituicao = this.mensagemInstituicaoFactory.createRandom();\n		var mensagem = this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n\n		var result = this.mensagemDtoListAllEstudantesQueryCommand.execute(List.of(mensagemInstituicao.getInstituicaoId()));\n		var mensagensIds = result\n				.stream()\n				.map(MensagemDto::getId);\n\n		assertThat(result).hasSize(2);\n		assertThat(mensagensIds).containsExactlyInAnyOrder(mensagem.getId(), mensagemInstituicao.getMensagemId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar somente mensagens não relacionadas com nenhuma instituição se a instituição fornecida não existir"")\n	void executeWhenNonexistentInstituicaoIdExpectAllDevicesMensagem() {\n		var mensagem = this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n		var mensagemInstituicao = this.mensagemInstituicaoFactory.createRandom();\n		var nonexistentInstituicaoId = this.faker.randomDifferentObject(mensagemInstituicao.getInstituicaoId(), this.faker.random()::nextLong);\n\n		var resultList = this.mensagemDtoListAllEstudantesQueryCommand.execute(List.of(nonexistentInstituicaoId));\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(mensagem.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio se há somente uma mensagem relacionada com outra instituição não fornecida"")\n	void executeWithAnotherInstituicaoExpectEmpty() {\n		this.mensagemInstituicaoFactory.createRandom();\n		var otherInstituicaoId = this.instituicaoFactory.createRandom().getId();\n\n		var result = this.mensagemDtoListAllEstudantesQueryCommand.execute(List.of(otherInstituicaoId));\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio se a mensagem está relacionada apenas com uma instituição e não forem passadas instituições como argumento"")\n	void executeWithEmptyInstituicaoIdsExpectEmpty() {\n		this.mensagemInstituicaoFactory.createRandom();\n\n		var result = this.mensagemDtoListAllEstudantesQueryCommand.execute(emptyList());\n\n		assertThat(result).isEmpty();\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoMensagemRefEnum.class,\n			names = { ""ATIVA"" },\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar vazio quando a situacaoMensagem não for ativa"")\n	void executeWhenSituacaoMensagemNotAtivaExpectEmpty(SituacaoMensagemRefEnum situacaoMensagemRefEnum) {\n		this.mensagemFactory.create(m -> m.situacaoMensagem.set(situacaoMensagemRefEnum.getId()));\n\n		var result = this.mensagemDtoListAllEstudantesQueryCommand.execute(emptyList());\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio quando a dataValidade estiver expirada"")\n	void executeWhenExpiredDataValidadeExpectEmpty() {\n		this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(LocalDate.now().minusDays(1));\n		});\n\n		var result = this.mensagemDtoListAllEstudantesQueryCommand.execute(emptyList());\n\n		assertThat(result).isEmpty();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Random;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\npublic class EstudanteInstituicaoIdsQueryCommandTest {\n\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private EstudanteInstituicaoIdsQueryCommand estudanteInstituicaoIdsQueryCommand;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n\n	@Test\n	void loadSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var instituicao = this.instituicaoFactory.createRandom();\n		var curso = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso.getId());\n		});\n\n		var estudanteInstituicaoIds = this.estudanteInstituicaoIdsQueryCommand.execute(estudante.getId());\n\n		assertThat(estudanteInstituicaoIds).containsOnly(instituicao.getId());\n	}\n\n	@Test\n	void loadWhenDbIsEmpty() {\n		var estudanteInstituicaoIds = this.estudanteInstituicaoIdsQueryCommand.execute(new Random().nextLong());\n\n		assertThat(estudanteInstituicaoIds).isEmpty();\n	}\n\n	@Test\n	void loadWhenEstudanteHasNoMatricula() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var estudanteInstituicaoIds = this.estudanteInstituicaoIdsQueryCommand.execute(estudante.getId());\n\n		assertThat(estudanteInstituicaoIds).isEmpty();\n	}\n\n	@Test\n	void loadWhenEstudanteHasTwoMatriculasInSameInstituicao() {\n		var estudante = this.estudanteFactory.createRandom();\n		var instituicao = this.instituicaoFactory.createRandom();\n		var primeiroCurso = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var segundoCurso = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(primeiroCurso.getId());\n		});\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(segundoCurso.getId());\n		});\n\n		var estudanteInstituicaoIds = this.estudanteInstituicaoIdsQueryCommand.execute(estudante.getId());\n\n		assertThat(estudanteInstituicaoIds).containsExactly(instituicao.getId());\n	}\n\n	@Test\n	void loadWhenEstudanteHasTwoMatriculasInDifferentInstituicoes() {\n		var estudante = this.estudanteFactory.createRandom();\n		var primeiraInstituicao = this.instituicaoFactory.createRandom();\n		var segundaInstituicao = this.instituicaoFactory.createRandom();\n		var primeiroCurso = this.cursoFactory.create(c -> c.instituicaoId.set(primeiraInstituicao.getId()));\n		var segundoCurso = this.cursoFactory.create(c -> c.instituicaoId.set(segundaInstituicao.getId()));\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(primeiroCurso.getId());\n		});\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(segundoCurso.getId());\n		});\n\n		var estudanteInstituicaoIds = this.estudanteInstituicaoIdsQueryCommand.execute(estudante.getId());\n\n		assertThat(estudanteInstituicaoIds).containsOnly(primeiraInstituicao.getId(), segundaInstituicao.getId());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator.EstudantePermissionAccess;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.service.MensagemService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\nclass MensagemControllerTest {\n\n	private static final String BASE_URL = ""/api/v1/mensagens"";\n	private final EstudanteFactory estudanteFactory = new EstudanteFactory();\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private MockMvc mockMvc;\n\n	@MockBean\n	@Autowired\n	private EstudantePermissionAccess estudantePermissionAccess;\n\n	@MockBean\n	@Autowired\n	private MensagemService mensagemService;\n\n	@Test\n	@DisplayName(""Deve verificar se houve o correto acionamento dos métodos internos do endpoint de mensagem"")\n	void loadMensagensExpectSuccess() throws Exception {\n		var estudante = this.estudanteFactory.createRandom();\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudante(estudante));\n\n		doNothing()\n				.when(this.estudantePermissionAccess)\n				.checkEstudantePermission(estudante.getId(), null);\n\n		when(this.mensagemService.loadMensagens(estudante.getId()))\n				.thenReturn(null);\n\n		this.mockMvc\n				.perform(get(BASE_URL).header(bearerAuth.getName(), bearerAuth.getValue()))\n				.andExpect(status().is2xxSuccessful());\n\n		verify(this.estudantePermissionAccess).checkEstudantePermission(estudante.getId(), null);\n		verify(this.mensagemService).loadMensagens(estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não houve acionamento dos métodos internos do endpoint de mensagem quando não há token"")\n	void loadMensagensWithoutTokenExpectUnauthorized() throws Exception {\n		this.mockMvc.perform(get(BASE_URL))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.mensagemService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não houve acionamento dos métodos internos do endpoint de mensagem quando o token for inválido"")\n	void loadMensagensWithInvalidTokenExpectUnauthorized() throws Exception {\n		var bearerAuth = withBearerAuthorization(""token-invalido"");\n\n		this.mockMvc\n				.perform(get(BASE_URL).header(bearerAuth.getName(), bearerAuth.getValue()))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.mensagemService);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants.BASE_PATH;\nimport static br.ufsc.bridge.jornadaestudante.backend.test.util.TestUtils.ignoringNanos;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.mensagem.SituacaoMensagemRefEnum.ATIVA;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MensagemITDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.mensagem.MensagemFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.mensagem.MensagemInstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.mensagem.SituacaoMensagemRefEnum;\n\n@DatabaseTest\nclass MensagemControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v1/mensagens"";\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n	@Autowired private MensagemFactory mensagemFactory;\n	@Autowired private MensagemInstituicaoFactory mensagemInstituicaoFactory;\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadMensagemWithoutTokenExpectUnauthorized() {\n		given()\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadMensagemWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando não houver nenhuma mensagem enviada"")\n	void loadMensagemWhenEmptyDbExpectEmptyList() {\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MensagemITDto.class);\n\n		assertThat(resultList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso a mensagem enviada"")\n	void loadMensagemExpectSuccess() {\n		var mensagem = this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MensagemITDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getTitulo()).isEqualTo(mensagem.getTitulo());\n		assertThat(result.getDescricao()).isEqualTo(mensagem.getDescricao());\n		assertThat(result.getDataValidade()).isEqualTo(mensagem.getDataValidade());\n		assertThat(result.getDataCriacao()).isEqualTo(mensagem.getDataCriacao());\n		assertThat(result.getDataAtualizacao()).isEqualTo(mensagem.getDataAtualizacao());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista com todas as mensagens enviadas"")\n	void loadMensagemWithMoreThanOneMensagemInDbExpectSuccess() {\n		var mensagem1 = this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n		var mensagem2 = this.mensagemFactory.create(n -> {\n			n.situacaoMensagem.set(ATIVA.getId());\n			n.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MensagemITDto.class);\n\n		var iterator = resultList.iterator();\n		var result1 = iterator.next();\n		var result2 = iterator.next();\n\n		assertThat(resultList).hasSize(2);\n\n		assertThat(result1.getTitulo()).isEqualTo(mensagem1.getTitulo());\n		assertThat(result1.getDescricao()).isEqualTo(mensagem1.getDescricao());\n		assertThat(result1.getDataValidade()).isEqualTo(mensagem1.getDataValidade());\n		assertThat(result1.getDataCriacao()).isCloseTo(mensagem1.getDataCriacao(), ignoringNanos());\n		assertThat(result1.getDataAtualizacao()).isCloseTo(mensagem1.getDataAtualizacao(), ignoringNanos());\n\n		assertThat(result2.getTitulo()).isEqualTo(mensagem2.getTitulo());\n		assertThat(result2.getDescricao()).isEqualTo(mensagem2.getDescricao());\n		assertThat(result2.getDataValidade()).isEqualTo(mensagem2.getDataValidade());\n		assertThat(result2.getDataCriacao()).isCloseTo(mensagem2.getDataCriacao(), ignoringNanos());\n		assertThat(result2.getDataAtualizacao()).isCloseTo(mensagem2.getDataAtualizacao(), ignoringNanos());\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoMensagemRefEnum.class,\n			names = { ""EXCLUIDA"", ""INATIVA"", ""EXPIRADA"" },\n			mode = EnumSource.Mode.INCLUDE)\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando houver apenas mensagens excluídas, inativas ou expiradas"")\n	void loadMensagemWhenSituacaoIsNotAtivaExpectEmptyList(SituacaoMensagemRefEnum situacaoMensagemRefEnum) {\n		this.mensagemFactory.create(m -> m.situacaoMensagem.set(situacaoMensagemRefEnum.getId()));\n\n		var resultList = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(BASE_PATH, MensagemITDto.class);\n\n		assertThat(resultList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando o estudante não pertencer à instituição para qual a mensagem foi enviada"")\n	void loadMensagemWhenEstudanteNotBelongInstituicaoExpectEmptyList() {\n		var mensagem = this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n		this.mensagemInstituicaoFactory.create(m -> m.mensagemId.set(mensagem.getId()));\n\n		var resultList = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(BASE_PATH, MensagemITDto.class);\n\n		assertThat(resultList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso as mensagens enviadas para uma instituição quando o estudante pertencer a ela"")\n	void loadMensagemWhenEstudanteBelongInstituicaoExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var curso = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var estudante = this.estudanteFactory.createRandom();\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso.getId());\n		});\n		var mensagem = this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(this.faker.localDate().future(1, TimeUnit.DAYS));\n		});\n		this.mensagemInstituicaoFactory.create(m -> {\n			m.mensagemId.set(mensagem.getId());\n			m.instituicaoId.set(instituicao.getId());\n		});\n\n		var resultList = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(BASE_PATH, MensagemITDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getTitulo()).isEqualTo(mensagem.getTitulo());\n		assertThat(result.getDescricao()).isEqualTo(mensagem.getDescricao());\n		assertThat(result.getDataValidade()).isEqualTo(mensagem.getDataValidade());\n		assertThat(result.getDataCriacao()).isEqualTo(mensagem.getDataCriacao());\n		assertThat(result.getDataAtualizacao()).isEqualTo(mensagem.getDataAtualizacao());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.MockitoAnnotations.openMocks;\n\nimport java.util.Random;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command.InstituicaoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command.CursoDtoByFilterListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.InstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\n\npublic class InstituicaoServiceTest {\n\n	private InstituicaoService instituicaoService;\n	@Mock private InstituicaoDtoListQueryCommand instituicaoDtoListQueryCommand;\n	@Mock private CursoDtoByFilterListQueryCommand cursoDtoByFilterListQueryCommand;\n\n	@BeforeEach\n	void setup() {\n		openMocks(this);\n		this.instituicaoService = new InstituicaoService(this.instituicaoDtoListQueryCommand, this.cursoDtoByFilterListQueryCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve testar o método para carregar uma lista de InstituicaoDto"")\n	void loadInstituicaoListWithValidInputExpectSuccess() {\n		var municipioId = new Random().nextLong();\n		var sistemaOrigemId = new Random().nextInt();\n\n		List<InstituicaoDto> instituicaoDtoList = Collections.emptyList();\n\n		when(this.instituicaoDtoListQueryCommand.execute(municipioId, sistemaOrigemId)).thenReturn(instituicaoDtoList);\n\n		var result = this.instituicaoService.loadInstituicaoList(municipioId, sistemaOrigemId);\n\n		assertThat(result).isEqualTo(instituicaoDtoList);\n\n		verify(this.instituicaoDtoListQueryCommand).execute(municipioId, sistemaOrigemId);\n	}\n\n	@Test\n	@DisplayName(""Deve testar o método para carregar uma lista de CursoSolicitacaoDadosDto"")\n	void loadCursoListByInstituicaoWithValidInputExpectSuccess() {\n		var instituicaoId = 1L;\n		var municipioId = 1L;\n		var turnoId = 1;\n\n		List<CursoSolicitacaoDadosDto> cursoSolicitacaoDadosDtoList = Collections.emptyList();\n\n		when(this.cursoDtoByFilterListQueryCommand.execute(instituicaoId, municipioId, turnoId)).thenReturn(cursoSolicitacaoDadosDtoList);\n\n		var result = this.instituicaoService.loadCursoListByInstituicao(instituicaoId, municipioId, turnoId);\n\n		assertThat(result).isEqualTo(cursoSolicitacaoDadosDtoList);\n\n		verify(this.cursoDtoByFilterListQueryCommand).execute(instituicaoId, municipioId, turnoId);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum.FLORIANOPOLIS;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum.CURITIBA;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.instituicao.DependenciaAdministrativaRefEnum.FEDERAL;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum.EMEC_GRADUACAO;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum.SISTEC;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.Random;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.LocalOfertaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\nimport br.ufsc.bridge.jornadaestudante.model.Instituicao;\n\n@DatabaseTest\n@SpringJUnit5Test\npublic class InstituicaoDtoListQueryCommandTest {\n\n	@Autowired private InstituicaoDtoListQueryCommand instituicaoDtoListQueryCommand;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private LocalOfertaFactory localOfertaFactory;\n	@Autowired private CursoFactory cursoFactory;\n\n	@Test\n	@DisplayName(""Seleciona instituição com curso no mesmo município do municipioAdm da instituição"")\n	void executeWithEqualCursoInstituicaoLocalExpectSuccess() {\n		Instituicao instituicao = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(FLORIANOPOLIS.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n			spec.dependenciaAdministrativaId.set(FEDERAL.getId());\n		});\n		Curso curso = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicao.getId()));\n\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(FLORIANOPOLIS.getId());\n			spec.cursoId.set(curso.getId());\n		});\n\n		var result = this.instituicaoDtoListQueryCommand.execute(FLORIANOPOLIS.getId(), EMEC_GRADUACAO.getId());\n\n		assertThat(result).hasSize(1);\n		assertThat(result.get(0).getId()).isEqualTo(instituicao.getId());\n		assertThat(result.get(0).getNome()).isEqualTo(instituicao.getNome());\n		assertThat(result.get(0).getSigla()).isEqualTo(instituicao.getSigla());\n		assertThat(result.get(0).getSiglaUfReitoria()).isEqualTo(FLORIANOPOLIS.getSiglaUf());\n		assertThat(result.get(0).getMunicipioReitoria()).isEqualTo(FLORIANOPOLIS.getNome());\n		assertThat(result.get(0).getCnpj()).isEqualTo(instituicao.getCnpj());\n		assertThat(result.get(0).getEmail()).isEqualTo(instituicao.getEmail());\n		assertThat(result.get(0).getTelefone()).isEqualTo(instituicao.getTelefone());\n		assertThat(result.get(0).getInep()).isEqualTo(instituicao.getInep());\n		assertThat(result.get(0).getDependenciaAdministrativa()).isEqualTo(FEDERAL.getDescricao());\n		assertThat(result.get(0).getCep()).isEqualTo(instituicao.getCep());\n	}\n\n	@Test\n	@DisplayName(""Seleciona instituição sem filtro opcional de sistema origem"")\n	void executeWithoutSistemaOrigemFilterExpectSuccess() {\n		Instituicao instituicao1 = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(FLORIANOPOLIS.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n		Instituicao instituicao2 = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(FLORIANOPOLIS.getId());\n			spec.sistemaOrigem.set(SISTEC.getId());\n		});\n		Curso curso1 = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicao1.getId()));\n		Curso curso2 = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicao2.getId()));\n\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(FLORIANOPOLIS.getId());\n			spec.cursoId.set(curso1.getId());\n		});\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(FLORIANOPOLIS.getId());\n			spec.cursoId.set(curso2.getId());\n		});\n\n		var result = this.instituicaoDtoListQueryCommand.execute(FLORIANOPOLIS.getId(), null);\n\n		assertThat(result).hasSize(2);\n	}\n\n	@Test\n	@DisplayName(""Seleciona instituição com curso em município diferente do municipioAdm da instituição"")\n	void loadInstituicaoWithLocalOfertaDifferentOfInstituicaoExpectSuccess() {\n		Instituicao instituicao = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(CURITIBA.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n		Curso curso = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicao.getId()));\n\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(FLORIANOPOLIS.getId());\n			spec.cursoId.set(curso.getId());\n		});\n\n		var result = this.instituicaoDtoListQueryCommand.execute(FLORIANOPOLIS.getId(), EMEC_GRADUACAO.getId());\n\n		assertThat(result).hasSize(1);\n	}\n\n	@Test\n	@DisplayName(""Teste com instituição sem cursos no município especificado"")\n	void executeWithoutCursoOnMunicipioExpectEmptyList() {\n		Instituicao instituicao = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(FLORIANOPOLIS.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n		Curso curso = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicao.getId()));\n\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(FLORIANOPOLIS.getId());\n			spec.cursoId.set(curso.getId());\n		});\n\n		var result = this.instituicaoDtoListQueryCommand.execute(CURITIBA.getId(), EMEC_GRADUACAO.getId());\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Teste do execute com random input"")\n	void randomInputExpectEmptyResult() {\n		var result = this.instituicaoDtoListQueryCommand.execute(new Random().nextLong(), new Random().nextInt());\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Teste do execute com null input"")\n	void nullInputExpectIllegalArgumentException() {\n		assertThrows(IllegalArgumentException.class, () -> this.instituicaoDtoListQueryCommand.execute(null, null));\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.List;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoTurnoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.TurnoDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.LocalOfertaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass CursoDtoByFilterListQueryCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private CursoTurnoFactory cursoTurnoFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private LocalOfertaFactory localOfertaFactory;\n	@Autowired private MunicipioDomainFactory municipioDomainFactory;\n	@Autowired private TurnoDomainFactory turnoDomainFactory;\n	@Autowired private CursoDtoByFilterListQueryCommand cursoDtoByFilterListQueryCommand;\n\n	private CursoSolicitacaoDadosDto createCursoSolicitacaoDadosDto(Curso curso) {\n		var cursoSolicitacaoDadosDto = new CursoSolicitacaoDadosDto();\n		cursoSolicitacaoDadosDto.setId(curso.getId());\n		cursoSolicitacaoDadosDto.setNome(curso.getNome());\n		cursoSolicitacaoDadosDto.setCargaHoraria(curso.getCargaHoraria());\n		return cursoSolicitacaoDadosDto;\n	}\n\n	@Test\n	@DisplayName(""Deve retornar os cursos filtrados pelo id da instituição, do município e do turno"")\n	void executeFilteredByInstituicaoMunicipioAndTurnoIdExpectFilteredCursos() {\n		var curso1 = this.cursoFactory.createRandom();\n		var curso2 = this.cursoFactory.create(c -> c.instituicaoId.set(curso1.getInstituicaoId()));\n		var localOferta1 = this.localOfertaFactory.create(l -> l.cursoId.set(curso1.getId()));\n		this.localOfertaFactory.create(l -> {\n			l.municipioId.set(localOferta1.getMunicipioId());\n			l.cursoId.set(curso2.getId());\n		});\n		var cursoTurno1 = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso1.getId()));\n		this.cursoTurnoFactory.create(c -> {\n			c.turnoId.set(cursoTurno1.getTurnoId());\n			c.cursoId.set(curso2.getId());\n		});\n		var expectedResult = List.of(this.createCursoSolicitacaoDadosDto(curso1), this.createCursoSolicitacaoDadosDto(curso2));\n\n		var result = this.cursoDtoByFilterListQueryCommand.execute(\n				curso1.getInstituicaoId(),\n				localOferta1.getMunicipioId(),\n				cursoTurno1.getTurnoId()\n		);\n\n		assertThat(result)\n				.hasSize(2)\n				.containsExactlyInAnyOrderElementsOf(expectedResult);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar os cursos filtrados apenas pelo id da instituição e do município, quando o turno for nulo"")\n	void executeWhenNullTurnoIdExpectOnlyFilteredByInstituicaoIdAndMunicipioId() {\n		var curso1 = this.cursoFactory.createRandom();\n		var localOferta1 = this.localOfertaFactory.create(l -> l.cursoId.set(curso1.getId()));\n		var curso2 = this.cursoFactory.create(c -> c.instituicaoId.set(curso1.getInstituicaoId()));\n		this.localOfertaFactory.create(l -> {\n			l.cursoId.set(curso2.getId());\n			l.municipioId.set(localOferta1.getMunicipioId());\n		});\n		this.cursoTurnoFactory.create(c -> c.cursoId.set(curso2.getId()));\n		var expectedResult = List.of(this.createCursoSolicitacaoDadosDto(curso1), this.createCursoSolicitacaoDadosDto(curso2));\n\n		var result = this.cursoDtoByFilterListQueryCommand.execute(\n				curso1.getInstituicaoId(),\n				localOferta1.getMunicipioId(),\n				null\n		);\n\n		assertThat(result)\n				.hasSize(2)\n				.containsExactlyInAnyOrderElementsOf(expectedResult);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio se não houver curso relacionado à instituição passada como argumento"")\n	void executeWhenCursoNotRelatedWithInstituicaoExpectEmptyList() {\n		var curso = this.cursoFactory.createRandom();\n		var localOferta = this.localOfertaFactory.create(l -> l.cursoId.set(curso.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var otherInstituicao = this.instituicaoFactory.createRandom();\n\n		var result = this.cursoDtoByFilterListQueryCommand.execute(\n				otherInstituicao.getId(),\n				localOferta.getMunicipioId(),\n				cursoTurno.getTurnoId()\n		);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio se não houver curso relacionado ao município passado como argumento"")\n	void executeWhenMunicipioNotRelatedWithCursoExpectEmptyList() {\n		var curso = this.cursoFactory.createRandom();\n		var localOferta = this.localOfertaFactory.create(l -> l.cursoId.set(curso.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var otherMunicipioId = this.faker.randomDifferentObject(localOferta.getMunicipioId(), () -> this.municipioDomainFactory.createRandom().getId());\n\n		var result = this.cursoDtoByFilterListQueryCommand.execute(\n				curso.getInstituicaoId(),\n				otherMunicipioId,\n				cursoTurno.getTurnoId()\n		);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio se não houver curso relacionado ao turno passado como argumento"")\n	void executeWhenTurnoNotRelatedWithCursoExpectEmptyList() {\n		var curso = this.cursoFactory.createRandom();\n		var localOferta = this.localOfertaFactory.create(l -> l.cursoId.set(curso.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var otherTurnoId = this.faker.randomDifferentObject(cursoTurno.getTurnoId(), () -> this.turnoDomainFactory.createRandom().getId());\n\n		var result = this.cursoDtoByFilterListQueryCommand.execute(\n				curso.getInstituicaoId(),\n				localOferta.getMunicipioId(),\n				otherTurnoId\n		);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio se o banco estiver vazio"")\n	void executeWithEmptyDbExpectEmptyList() {\n		var instituicaoId = this.faker.random().nextLong();\n		var municipioId = this.faker.random().nextLong();\n		var turnoId = new Random().nextInt();\n\n		var result = this.cursoDtoByFilterListQueryCommand.execute(\n				instituicaoId,\n				municipioId,\n				turnoId\n		);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve ser disparada a exceção se os argumentos forem nulos"")\n	void executeWhenAllArgumentsNullExpectIllegalArgumentException() {\n		assertThrows(IllegalArgumentException.class, () -> this.cursoDtoByFilterListQueryCommand.execute(null, null, null));\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.junit.jupiter.api.DisplayName;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.InstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.service.InstituicaoService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\npublic class InstituicaoControllerTest {\n\n	private static final String BASE_URL = ""/api/v2/instituicoes"";\n\n	@MockBean\n	@Autowired private InstituicaoService instituicaoService;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private ObjectMapper objectMapper;\n	@Autowired private MockMvc mockMvc;\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes"")\n	void callIndexInstituicoesExpectSuccess() throws Exception {\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudanteRandom());\n		List<InstituicaoDto> instituicaoDtoList = new ArrayList<>();\n\n		when(this.instituicaoService.loadInstituicaoList(1L, 1)).thenReturn(instituicaoDtoList);\n\n		var getRequest = get(BASE_URL)\n				.header(bearerAuth.getName(), bearerAuth.getValue())\n				.queryParam(""municipioId"", String.valueOf(1L))\n				.queryParam(""sistemaOrigemId"", String.valueOf(1));\n\n		this.mockMvc.perform(getRequest).andExpect(status().is2xxSuccessful());\n\n		verify(this.instituicaoService).loadInstituicaoList(1L, 1);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes sem filtro opcional sistemaOrigemId"")\n	void callIndexInstituicoesWithoutSistemaOrigemFilterExpectSuccess() throws Exception {\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudanteRandom());\n		List<InstituicaoDto> instituicaoDtoList = new ArrayList<>();\n\n		when(this.instituicaoService.loadInstituicaoList(1L,null)).thenReturn(instituicaoDtoList);\n\n		var getRequest = get(BASE_URL)\n				.header(bearerAuth.getName(), bearerAuth.getValue())\n				.queryParam(""municipioId"", String.valueOf(1L));\n\n		this.mockMvc.perform(getRequest).andExpect(status().is2xxSuccessful());\n\n		verify(this.instituicaoService).loadInstituicaoList(1L, null);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexCursos"")\n	void callIndexCursosExpectSuccess() throws Exception {\n		var instituicaoIdPathVariable = ""1"";\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudanteRandom());\n		List<CursoSolicitacaoDadosDto> cursoSolicitacaoDadosDto = new ArrayList<>();\n\n		when(this.instituicaoService.loadCursoListByInstituicao(1L, 1L, 1)).thenReturn(cursoSolicitacaoDadosDto);\n\n		var getRequest = get(BASE_URL + ""/"" + instituicaoIdPathVariable + ""/cursos"")\n				.header(bearerAuth.getName(), bearerAuth.getValue())\n				.queryParam(""municipioId"", String.valueOf(1L))\n				.queryParam(""turnoId"", String.valueOf(1));\n\n		this.mockMvc.perform(getRequest).andExpect(status().is2xxSuccessful());\n\n		verify(this.instituicaoService).loadCursoListByInstituicao(1L, 1L, 1);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.curso.TurnoRefEnum.MATUTINO;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum.CURITIBA;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum.FLORIANOPOLIS;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum.SALVADOR;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.endereco.UFRefEnum.PARANA;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.instituicao.DependenciaAdministrativaRefEnum.ESTADUAL;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.instituicao.DependenciaAdministrativaRefEnum.FEDERAL;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum.EMEC_GRADUACAO;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum.SISTEC;\nimport static br.ufsc.bridge.jornadaestudante.model.QInstituicao.instituicao;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.InstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoTurnoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.LocalOfertaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\nimport br.ufsc.bridge.jornadaestudante.model.Instituicao;\n\n@DatabaseTest\nclass InstituicaoControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v2/instituicoes"";\n	@Autowired private DAO dao;\n	@Autowired private LocalOfertaFactory localOfertaFactory;\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private CursoTurnoFactory cursoTurnoFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private JWTFactory jwtFactory;\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes sem token de autorização"")\n	void indexInstituicoesWithoutAuthExpectUnauthorized() {\n		given()\n				.get(BASE_URL).then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes com token inválido"")\n	void indexInstituicoesWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL).then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes sem params"")\n	void indexInstituicoesWithInvalidMunicipioIdExpectBadRequest() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL).then()\n				.statusCode(400);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes quando tem múltiplas instituições"")\n	void indexInstituicoesValidRegisterExpectSuccess() {\n		Long municipioLocalOfertaId = FLORIANOPOLIS.getId();\n\n		Instituicao instituicaoPR = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(CURITIBA.getId());\n			spec.dependenciaAdministrativaId.set(FEDERAL.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n\n		Instituicao instituicaoBA = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(SALVADOR.getId());\n			spec.dependenciaAdministrativaId.set(ESTADUAL.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n\n		Curso cursoPR = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicaoPR.getId()));\n		Curso cursoBA = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicaoBA.getId()));\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(municipioLocalOfertaId);\n			spec.cursoId.set(cursoPR.getId());\n		});\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(municipioLocalOfertaId);\n			spec.cursoId.set(cursoBA.getId());\n		});\n\n		List<InstituicaoDto> resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.queryParams(""sistemaOrigemId"", EMEC_GRADUACAO.getId())\n				.queryParams(""municipioId"", municipioLocalOfertaId)\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, InstituicaoDto.class);\n\n		int countInstituicoes = this.dao.queryFactory()\n				.selectFrom(instituicao)\n				.fetch()\n				.size();\n\n		assertThat(resultList).hasSize(countInstituicoes);\n		assertThat(resultList.get(0).getId()).isEqualTo(instituicaoPR.getId());\n		assertThat(resultList.get(0).getNome()).isEqualTo(instituicaoPR.getNome());\n		assertThat(resultList.get(0).getSigla()).isEqualTo(instituicaoPR.getSigla());\n		assertThat(resultList.get(0).getSiglaUfReitoria()).isEqualTo(PARANA.getSiglaUf());\n		assertThat(resultList.get(0).getMunicipioReitoria()).isEqualTo(CURITIBA.getNome());\n		assertThat(resultList.get(0).getEmail()).isEqualTo(instituicaoPR.getEmail());\n		assertThat(resultList.get(0).getTelefone()).isEqualTo(instituicaoPR.getTelefone());\n		assertThat(resultList.get(0).getInep()).isEqualTo(instituicaoPR.getInep());\n		assertThat(resultList.get(0).getDependenciaAdministrativa()).isEqualTo(FEDERAL.getDescricao());\n		assertThat(resultList.get(0).getCep()).isEqualTo(instituicaoPR.getCep());\n\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes quando municipioAdm e localOferta são diferentes"")\n	void indexInstituicoesWhenMunicipioAdmDifferentLocalOfertaExpectSuccess() {\n		Long municipioLocalOfertaId = FLORIANOPOLIS.getId();\n\n		Instituicao novaInstituicao = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(CURITIBA.getId());\n			spec.dependenciaAdministrativaId.set(FEDERAL.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n\n		Curso curso = this.cursoFactory.create(spec -> spec.instituicaoId.set(novaInstituicao.getId()));\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(municipioLocalOfertaId);\n			spec.cursoId.set(curso.getId());\n		});\n\n		List<InstituicaoDto> resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.queryParams(""sistemaOrigemId"", EMEC_GRADUACAO.getId())\n				.queryParams(""municipioId"", municipioLocalOfertaId)\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, InstituicaoDto.class);\n\n		int countInstituicoes = this.dao.queryFactory()\n				.selectFrom(instituicao)\n				.fetch()\n				.size();\n\n		assertThat(resultList).hasSize(countInstituicoes);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes sem filtro opcional sistemaOrigemId"")\n	void indexInstituicoesWithoutSistemaOrigemFilterExpectSuccess() {\n		Long municipioLocalOfertaId = FLORIANOPOLIS.getId();\n\n		Instituicao instituicao1 = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(CURITIBA.getId());\n			spec.dependenciaAdministrativaId.set(FEDERAL.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n\n		Instituicao instituicao2 = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(SALVADOR.getId());\n			spec.dependenciaAdministrativaId.set(ESTADUAL.getId());\n			spec.sistemaOrigem.set(SISTEC.getId());\n		});\n\n		Curso curso1 = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicao1.getId()));\n		Curso curso2 = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicao2.getId()));\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(municipioLocalOfertaId);\n			spec.cursoId.set(curso1.getId());\n		});\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(municipioLocalOfertaId);\n			spec.cursoId.set(curso2.getId());\n		});\n\n		List<InstituicaoDto> resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.queryParams(""municipioId"", municipioLocalOfertaId)\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, InstituicaoDto.class);\n\n		int countInstituicoes = this.dao.queryFactory()\n				.selectFrom(instituicao)\n				.fetch()\n				.size();\n\n		assertThat(resultList).hasSize(countInstituicoes);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexInstituicoes quando não há instituições cadastradas"")\n	void indexInstituicoesWithoutInstituicoesExpectEmptyList() {\n		List<InstituicaoDto> result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.queryParams(""sistemaOrigemId"", EMEC_GRADUACAO.getId())\n				.queryParams(""municipioId"", FLORIANOPOLIS.getId())\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, InstituicaoDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexCursos sem token de autorização"")\n	void indexCursosWithoutAuthExpectUnauthorized() {\n		given()\n				.get(BASE_URL + ""/999/cursos"").then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexCursos com token inválido"")\n	void indexCursosWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL + ""/999/cursos"").then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexCursos sem params"")\n	void indexCursosWithInvalidMunicipioIdExpectBadRequest() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""/999/cursos"").then()\n				.statusCode(400);\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexCursos da instituição especificada"")\n	void indexCursosExpectSuccess(){\n		Instituicao instituicaoSC = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(FLORIANOPOLIS.getId());\n			spec.dependenciaAdministrativaId.set(FEDERAL.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n		Instituicao instituicaoBA = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(SALVADOR.getId());\n			spec.dependenciaAdministrativaId.set(ESTADUAL.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n\n		Curso cursoSC = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicaoSC.getId()));\n		Curso cursoBA = this.cursoFactory.create(spec -> spec.instituicaoId.set(instituicaoBA.getId()));\n\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(FLORIANOPOLIS.getId());\n			spec.cursoId.set(cursoSC.getId());\n		});\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(SALVADOR.getId());\n			spec.cursoId.set(cursoBA.getId());\n		});\n		this.cursoTurnoFactory.create(spec -> {\n			spec.turnoId.set(MATUTINO.getId());\n			spec.cursoId.set(cursoSC.getId());\n		});\n		this.cursoTurnoFactory.create(spec -> {\n			spec.turnoId.set(MATUTINO.getId());\n			spec.cursoId.set(cursoBA.getId());\n		});\n\n		List<CursoSolicitacaoDadosDto> resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.queryParams(""municipioId"", FLORIANOPOLIS.getId())\n				.queryParams(""turnoId"", MATUTINO.getId())\n				.get(BASE_URL + ""/"" + instituicaoSC.getId() + ""/cursos"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, CursoSolicitacaoDadosDto.class);\n\n		assertThat(resultList).hasSize(1);\n		assertThat(resultList.get(0).getId()).isEqualTo(cursoSC.getId());\n		assertThat(resultList.get(0).getNome()).isEqualTo(cursoSC.getNome());\n		assertThat(resultList.get(0).getCargaHoraria()).isEqualTo(cursoSC.getCargaHoraria());\n	}\n\n	@Test\n	@DisplayName(""Chamada de indexCursos de instituição sem cursos"")\n	void indexCursosWithoutCursoExpectEmptyList(){\n		Long municipioLocalOfertaId = FLORIANOPOLIS.getId();\n\n		Instituicao instituicaoSC = this.instituicaoFactory.create(spec -> {\n			spec.municipioAdmId.set(FLORIANOPOLIS.getId());\n			spec.dependenciaAdministrativaId.set(FEDERAL.getId());\n			spec.sistemaOrigem.set(EMEC_GRADUACAO.getId());\n		});\n\n		this.localOfertaFactory.create(spec -> {\n			spec.municipioId.set(municipioLocalOfertaId);\n		});\n\n		List<CursoSolicitacaoDadosDto> resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.queryParams(""sistemaOrigemId"", EMEC_GRADUACAO.getId())\n				.queryParams(""municipioId"", municipioLocalOfertaId)\n				.get(BASE_URL + ""/"" + instituicaoSC.getId() + ""/cursos"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, CursoSolicitacaoDadosDto.class);\n\n		assertThat(resultList).isEmpty();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1;\n\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1InstituicaoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.UFRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.DependenciaAdministrativaRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.LocalOfertaFactory;\n\n@DatabaseTest\nclass V1InstituicaoControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v1/instituicoes"";\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private DAO dao;\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private LocalOfertaFactory localOfertaFactory;\n	@Autowired private MunicipioDomainFactory municipioDomainFactory;\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadInstituicoesByMunicipioIdWithoutTokenExpectUnauthorized() {\n		var municipioId = this.faker.random().nextLong();\n\n		given()\n				.get(BASE_URL + ""?municipioId="" + municipioId)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadInstituicoesByMunicipioIdWithInvalidTokenExpectUnauthorized() {\n		var municipioId = this.faker.random().nextLong();\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL + ""?municipioLocalOfertaId="" + municipioId)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar Bad Request quando nenhum id de município for passado"")\n	void loadInstituicoesByMunicipioIdWithoutIdExpectBadRequest() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""?municipioId="")\n				.then()\n				.statusCode(400);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando o banco de dados estiver vazio"")\n	void loadInstituicoesByMunicipioIdWhenEmptyDbExpectSuccess() {\n		var municipioId = this.faker.random().nextLong();\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""?municipioId="" + municipioId)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, V1InstituicaoDto.class);\n\n		assertThat(resultList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma instituição filtrada pelo id do município"")\n	void loadInstituicoesByMunicipioIdExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var curso = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var localOferta = this.localOfertaFactory.create(l -> l.cursoId.set(curso.getId()));\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""?municipioId="" + localOferta.getMunicipioId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, V1InstituicaoDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n\n		assertThat(result.getId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNome()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSigla()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSiglaUfReitoria()).isEqualTo(MunicipioRefEnum.getById(instituicao.getMunicipioAdmId()).getSiglaUf());\n		assertThat(result.getMunicipioReitoria()).isEqualTo(MunicipioRefEnum.getById(instituicao.getMunicipioAdmId()).getNome());\n		assertThat(result.getCnpj()).isEqualTo(instituicao.getCnpj());\n		assertThat(result.getEmail()).isEqualTo(instituicao.getEmail());\n		assertThat(result.getTelefone()).isEqualTo(instituicao.getTelefone());\n		assertThat(result.getInep()).isEqualTo(instituicao.getInep());\n		assertThat(result.getDependenciaAdministrativa()).isEqualTo(DependenciaAdministrativaRefEnum.getById(instituicao.getDependenciaAdministrativaId()).getDescricao());\n		assertThat(result.getCep()).isEqualTo(instituicao.getCep());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma instituição quando o município da reitoria for diferente do município de local oferta"")\n	void loadInstituicoesByMunicipioIdWhenReitoriaIsDifferentFromLocalOfertaExpectSuccess() {\n		var municipioLocalOferta = this.municipioDomainFactory.createRandom();\n		var municipioReitoria = this.faker.randomDifferentObject(municipioLocalOferta, this.municipioDomainFactory::createRandom);\n		var instituicao = this.instituicaoFactory.create(i -> i.municipioAdmId.set(municipioReitoria.getId()));\n		var curso = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var localOferta = this.localOfertaFactory.create(l -> {\n			l.municipioId.set(municipioLocalOferta.getId());\n			l.cursoId.set(curso.getId());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""?municipioId="" + localOferta.getMunicipioId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, V1InstituicaoDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n\n		assertThat(result.getId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNome()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSigla()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSiglaUfReitoria()).isEqualTo(UFRefEnum.getById(municipioReitoria.getUfId()).getSiglaUf());\n		assertThat(result.getMunicipioReitoria()).isEqualTo(municipioReitoria.getNome());\n		assertThat(result.getCnpj()).isEqualTo(instituicao.getCnpj());\n		assertThat(result.getEmail()).isEqualTo(instituicao.getEmail());\n		assertThat(result.getTelefone()).isEqualTo(instituicao.getTelefone());\n		assertThat(result.getInep()).isEqualTo(instituicao.getInep());\n		assertThat(result.getDependenciaAdministrativa()).isEqualTo(DependenciaAdministrativaRefEnum.getById(instituicao.getDependenciaAdministrativaId()).getDescricao());\n		assertThat(result.getCep()).isEqualTo(instituicao.getCep());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista de instituições quando houver mais de uma instituição cadastrada no mesmo localOferta"")\n	void loadInstituicoesByMunicipioIdWithSameLocalOfertaExpectSuccess() {\n		var instituicao1 = this.instituicaoFactory.createRandom();\n		var instituicao2 = this.instituicaoFactory.createRandom();\n		var curso1 = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao1.getId()));\n		var curso2 = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao2.getId()));\n		var localOferta = this.localOfertaFactory.create(l -> l.cursoId.set(curso1.getId()));\n		this.localOfertaFactory.create(l -> {\n			l.municipioId.set(localOferta.getMunicipioId());\n			l.cursoId.set(curso2.getId());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""?municipioId="" + localOferta.getMunicipioId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, V1InstituicaoDto.class);\n\n		var iterator = resultList.iterator();\n		var result1 = iterator.next();\n		var result2 = iterator.next();\n\n		assertThat(resultList).hasSize(2);\n\n		assertThat(result1.getId()).isEqualTo(instituicao1.getId());\n		assertThat(result1.getNome()).isEqualTo(instituicao1.getNome());\n		assertThat(result1.getSigla()).isEqualTo(instituicao1.getSigla());\n		assertThat(result1.getSiglaUfReitoria()).isEqualTo(MunicipioRefEnum.getById(instituicao1.getMunicipioAdmId()).getSiglaUf());\n		assertThat(result1.getMunicipioReitoria()).isEqualTo(MunicipioRefEnum.getById(instituicao1.getMunicipioAdmId()).getNome());\n		assertThat(result1.getCnpj()).isEqualTo(instituicao1.getCnpj());\n		assertThat(result1.getEmail()).isEqualTo(instituicao1.getEmail());\n		assertThat(result1.getTelefone()).isEqualTo(instituicao1.getTelefone());\n		assertThat(result1.getInep()).isEqualTo(instituicao1.getInep());\n		assertThat(result1.getDependenciaAdministrativa()).isEqualTo(DependenciaAdministrativaRefEnum.getById(instituicao1.getDependenciaAdministrativaId()).getDescricao());\n		assertThat(result1.getCep()).isEqualTo(instituicao1.getCep());\n\n		assertThat(result2.getId()).isEqualTo(instituicao2.getId());\n		assertThat(result2.getNome()).isEqualTo(instituicao2.getNome());\n		assertThat(result2.getSigla()).isEqualTo(instituicao2.getSigla());\n		assertThat(result2.getSiglaUfReitoria()).isEqualTo(MunicipioRefEnum.getById(instituicao2.getMunicipioAdmId()).getSiglaUf());\n		assertThat(result2.getMunicipioReitoria()).isEqualTo(MunicipioRefEnum.getById(instituicao2.getMunicipioAdmId()).getNome());\n		assertThat(result2.getCnpj()).isEqualTo(instituicao2.getCnpj());\n		assertThat(result2.getEmail()).isEqualTo(instituicao2.getEmail());\n		assertThat(result2.getTelefone()).isEqualTo(instituicao2.getTelefone());\n		assertThat(result2.getInep()).isEqualTo(instituicao2.getInep());\n		assertThat(result2.getDependenciaAdministrativa()).isEqualTo(DependenciaAdministrativaRefEnum.getById(instituicao2.getDependenciaAdministrativaId()).getDescricao());\n		assertThat(result2.getCep()).isEqualTo(instituicao2.getCep());\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadCursosByInstituicaoAndMunicipioIdWithoutTokenExpectUnauthorized() {\n		var instituicaoId = this.faker.random().nextLong();\n		var municipioId = this.faker.random().nextLong();\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL + ""/cursos?instituicaoId="" + instituicaoId+ ""&municipioId="" + municipioId)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadCursosByInstituicaoAndMunicipioIdWithInvalidTokenExpectUnauthorized() {\n		var instituicaoId = this.faker.random().nextLong();\n		var municipioId = this.faker.random().nextLong();\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL + ""/cursos?instituicaoId="" + instituicaoId + ""&municipioId="" + municipioId)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar Bad Request quando nenhum id de instituição for passado"")\n	void loadCursosByInstituicaoAndMunicipioIdWithoutInstituicaoIdExpectBadRequest() {\n		var municipioId = this.faker.random().nextLong();\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""/cursos?instituicaoId="" + ""&municipioId="" + municipioId)\n				.then()\n				.statusCode(400);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar Bad Request quando nenhum id de município for passado"")\n	void loadCursosByInstituicaoAndMunicipioIdWithoutMunicipioIdExpectBadRequest() {\n		var instituicaoId = this.faker.random().nextLong();\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""/cursos?instituicaoId="" + instituicaoId + ""&municipioId="")\n				.then()\n				.statusCode(400);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso um curso filtrado pelo id da instituição e do município"")\n	void loadCursosByInstituicaoAndMunicipioIdExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var curso = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var localOferta = this.localOfertaFactory.create(l -> l.cursoId.set(curso.getId()));\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""/cursos?instituicaoId="" + instituicao.getId() + ""&municipioId="" + localOferta.getMunicipioId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, V1InstituicaoDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n\n		assertThat(result.getId()).isEqualTo(curso.getId());\n		assertThat(result.getNome()).isEqualTo(curso.getNome());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista de cursos filtrados pelo id da instituição e do município quando houver mais de um curso cadastrado no banco de dados"")\n	void loadCursosByInstituicaoAndMunicipioIdWithMoreThanOneCursoInDbExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var curso1 = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var curso2 = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var localOferta = this.localOfertaFactory.create(l -> l.cursoId.set(curso1.getId()));\n		this.localOfertaFactory.create(l -> {\n			l.municipioId.set(localOferta.getMunicipioId());\n			l.cursoId.set(curso2.getId());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""/cursos?instituicaoId="" + instituicao.getId() + ""&municipioId="" + localOferta.getMunicipioId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, V1InstituicaoDto.class);\n\n		var iterator = resultList.iterator();\n		var result1 = iterator.next();\n		var result2 = iterator.next();\n\n		assertThat(resultList).hasSize(2);\n\n		assertThat(result1.getId()).isEqualTo(curso1.getId());\n		assertThat(result1.getNome()).isEqualTo(curso1.getNome());\n\n		assertThat(result2.getId()).isEqualTo(curso2.getId());\n		assertThat(result2.getNome()).isEqualTo(curso2.getNome());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.service.BcpfService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.DependenteDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteCpfByIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteCreateUpdateCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteIdByMatriculaIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteLoginDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.TermoUsoEstudanteSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteCreateUpdateInput;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MotivoSituacaoPeMeiaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteResponsavelFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@ExtendWith(MockitoExtension.class)\nclass EstudanteServiceTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	private final EstudanteFactory estudanteFactory = new EstudanteFactory();\n	private final EstudanteResponsavelFactory estudanteResponsavelFactory = new EstudanteResponsavelFactory();\n	private final MatriculaFactory matriculaFactory = new MatriculaFactory();\n	@Mock private BcpfService bcpfService;\n	@Mock private DependenteDtoListQueryCommand dependenteDtoListQueryCommand;\n	@Mock private EstudanteCpfByIdQueryCommand estudanteCpfByIdQueryCommand;\n	@Mock private EstudanteCreateUpdateCommand estudanteCreateUpdateCommand;\n	@Mock private EstudanteDtoQueryCommand estudanteDtoQueryCommand;\n	@Mock private EstudanteIdByMatriculaIdQueryCommand estudanteIdByMatriculaIdQueryCommand;\n	@Mock private EstudanteLoginDtoQueryCommand estudanteLoginDtoQueryCommand;\n	@Mock private MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand;\n	@Mock private EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand;\n	@Mock private TermoUsoEstudanteSaveCommand termoUsoEstudanteSaveCommand;\n	private EstudanteService estudanteService;\n\n	@BeforeEach\n	void setup() {\n		this.estudanteService = spy(new EstudanteService(\n				this.bcpfService,\n				this.dependenteDtoListQueryCommand,\n				this.estudanteCreateUpdateCommand,\n				this.estudanteCpfByIdQueryCommand,\n				this.estudanteDtoQueryCommand,\n				this.estudanteIdByMatriculaIdQueryCommand,\n				this.estudanteLoginDtoQueryCommand,\n				this.motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand,\n				this.estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand,\n				this.termoUsoEstudanteSaveCommand\n		));\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método createUpdate é bem sucedido"")\n	void createUpdateExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var bCpfEstudanteDto = new BcpfEstudanteDto();\n		var estudanteAuthenticatedDto = new EstudanteAuthenticatedDto(estudante.getId());\n		var estudanteCreateUpdateInput = new EstudanteCreateUpdateInput();\n		estudanteCreateUpdateInput.setCpf(estudante.getCpf());\n\n		when(this.bcpfService.getDadosEstudanteByCpf(estudante.getCpf()))\n				.thenReturn(bCpfEstudanteDto);\n		when(this.estudanteCreateUpdateCommand.execute(estudanteCreateUpdateInput, bCpfEstudanteDto))\n				.thenReturn(estudanteAuthenticatedDto);\n\n		var result = this.estudanteService.createUpdate(estudanteCreateUpdateInput);\n\n		assertThat(result).isEqualTo(estudanteAuthenticatedDto);\n\n		verify(this.bcpfService).getDadosEstudanteByCpf(estudante.getCpf());\n		verify(this.estudanteCreateUpdateCommand).execute(estudanteCreateUpdateInput, bCpfEstudanteDto);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método getEstudanteAuthenticatedDto é bem sucedido"")\n	void getEstudanteAuthenticatedDtoExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var estudanteAuthenticatedDto = new EstudanteAuthenticatedDto(estudante.getId());\n\n		when(this.estudanteLoginDtoQueryCommand.execute(estudante.getCpf()))\n				.thenReturn(estudanteAuthenticatedDto);\n\n		var result = this.estudanteService.getEstudanteAuthenticatedDto(estudante.getCpf());\n\n		assertThat(result).isEqualTo(estudanteAuthenticatedDto);\n\n		verify(this.estudanteLoginDtoQueryCommand).execute(estudante.getCpf());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadCpfById é bem sucedido"")\n	void loadCpfByIdExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		when(this.estudanteCpfByIdQueryCommand.execute(estudante.getId()))\n				.thenReturn(estudante.getCpf());\n\n		var result = this.estudanteService.loadCpfById(estudante.getId());\n\n		assertThat(result).isEqualTo(estudante.getCpf());\n\n		verify(this.estudanteCpfByIdQueryCommand).execute(estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadDadosPessoais é bem sucedido"")\n	void loadDadosPessoaisExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var motivoSituacaoDto = new MotivoSituacaoPeMeiaDto();\n		motivoSituacaoDto.setId(new Random().nextInt());\n		var motivoSituacaoDtoList = List.of(motivoSituacaoDto);\n		var estudanteDto = new EstudanteDto();\n		estudanteDto.setId(estudanteId);\n		estudanteDto.setMotivosSituacaoPeMeia(motivoSituacaoDtoList);\n\n		when(this.estudanteDtoQueryCommand.execute(estudanteId))\n				.thenReturn(estudanteDto);\n		when(this.motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand.execute(estudanteId))\n				.thenReturn(motivoSituacaoDtoList);\n\n		var result = this.estudanteService.loadDadosPessoais(estudanteId);\n\n		assertThat(result).isEqualTo(estudanteDto);\n\n		verify(this.estudanteDtoQueryCommand).execute(estudanteId);\n		verify(this.motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand).execute(estudanteId);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadDependentes é bem sucedido"")\n	void loadDependentesExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var motivoSituacaoDto = new MotivoSituacaoPeMeiaDto();\n		motivoSituacaoDto.setId(new Random().nextInt());\n		var motivoSituacaoDtoList = List.of(motivoSituacaoDto);\n		var estudanteDto = new EstudanteDto();\n		estudanteDto.setId(this.faker.random().nextLong());\n		estudanteDto.setMotivosSituacaoPeMeia(motivoSituacaoDtoList);\n		var estudanteDtoList = List.of(estudanteDto);\n		var motivoSituacaoPeMeiaDtoListByEstudanteId = Map.of(estudanteDto.getId(), motivoSituacaoDtoList);\n\n		when(this.dependenteDtoListQueryCommand.execute(estudanteId))\n				.thenReturn(estudanteDtoList);\n		when(this.estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand.execute(any()))\n				.thenReturn(motivoSituacaoPeMeiaDtoListByEstudanteId);\n\n		var result = this.estudanteService.loadDependentes(estudanteId);\n\n		assertThat(result).isEqualTo(estudanteDtoList);\n\n		verify(this.dependenteDtoListQueryCommand).execute(estudanteId);\n		verify(this.estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand).execute(any());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadDependentesBcpf é bem sucedido quando existe dependente ""\n			+ ""com data de nascimento para o estudante logado"")\n	void loadDependentesBcpfWhenHasDependentesWithDataNascimentoExpectSuccess() {\n		var estudanteLogado = this.estudanteFactory.createRandom();\n		var estudanteDependente = this.estudanteFactory.createRandom();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(estudanteLogado.getCpf());\n			s.cpfResponsavel.set(estudanteDependente.getCpf());\n		});\n		var estudanteDependenteDto = new EstudanteDto();\n		estudanteDependenteDto.setCpf(estudanteDependente.getCpf());\n		estudanteDependenteDto.setDataNascimento(estudanteDependente.getDataNascimento());\n		var bCpfEstudanteDto = new BcpfEstudanteDto();\n\n		doReturn(List.of(estudanteDependenteDto))\n				.when(this.estudanteService)\n				.loadDependentes(estudanteLogado.getId());\n		when(this.bcpfService.getDadosEstudanteByCpf(estudanteDependente.getCpf()))\n				.thenReturn(bCpfEstudanteDto);\n		when(this.estudanteCreateUpdateCommand.executeBcpf(estudanteDependente.getCpf(), bCpfEstudanteDto))\n				.thenReturn(new Estudante());\n\n		var result = this.estudanteService.loadDependentesBcpf(estudanteLogado.getId());\n\n		assertThat(result).isEqualTo(List.of(estudanteDependenteDto));\n\n		verify(this.estudanteService, Mockito.times(2)).loadDependentes(estudanteLogado.getId());\n		verify(this.bcpfService).getDadosEstudanteByCpf(estudanteDependente.getCpf());\n		verify(this.estudanteCreateUpdateCommand).executeBcpf(estudanteDependenteDto.getCpf(), bCpfEstudanteDto);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadDependentesBcpf é bem sucedido quando existe dependente ""\n			+ ""sem data de nascimento para o estudante logado"")\n	void loadDependentesBcpfWhenHasDependentesWithoutDataNascimentoExpectSuccess() {\n		var estudanteLogado = this.estudanteFactory.createRandom();\n		var estudanteDependente = this.estudanteFactory.createRandom();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(estudanteLogado.getCpf());\n			s.cpfResponsavel.set(estudanteDependente.getCpf());\n		});\n		var estudanteDependenteDto = new EstudanteDto();\n		estudanteDependenteDto.setCpf(estudanteDependente.getCpf());\n		var bCpfEstudanteDto = new BcpfEstudanteDto();\n\n		doReturn(List.of(estudanteDependenteDto))\n				.when(this.estudanteService)\n				.loadDependentes(estudanteLogado.getId());\n		when(this.bcpfService.getDadosEstudanteByCpf(estudanteDependente.getCpf()))\n				.thenReturn(bCpfEstudanteDto);\n		when(this.estudanteCreateUpdateCommand.executeBcpf(estudanteDependente.getCpf(), bCpfEstudanteDto))\n				.thenReturn(new Estudante());\n\n		var result = this.estudanteService.loadDependentesBcpf(estudanteLogado.getId());\n\n		assertThat(result).isEmpty();\n\n		verify(this.estudanteService, Mockito.times(2)).loadDependentes(estudanteLogado.getId());\n		verify(this.bcpfService).getDadosEstudanteByCpf(estudanteDependente.getCpf());\n		verify(this.estudanteCreateUpdateCommand).executeBcpf(estudanteDependenteDto.getCpf(), bCpfEstudanteDto);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadDependentesBcpf é bem sucedido quando não existe dependente para o estudante logado"")\n	void loadDependentesBcpfWhenHasntDependentesExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var dependenteDtoList = new ArrayList<EstudanteDto>();\n\n		when(this.dependenteDtoListQueryCommand.execute(estudanteId))\n				.thenReturn(dependenteDtoList);\n\n		var result = this.estudanteService.loadDependentesBcpf(estudanteId);\n\n		assertThat(result).isEqualTo(dependenteDtoList);\n\n		verify(this.dependenteDtoListQueryCommand, Mockito.times(2)).execute(estudanteId);\n		verifyNoInteractions(this.bcpfService);\n		verifyNoInteractions(this.estudanteCreateUpdateCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadEstudanteIdByMatriculaId é bem sucedido"")\n	void loadEstudanteIdByMatriculaIdExpectSuccess() {\n		var matricula = this.matriculaFactory.createRandom();\n\n		when(this.estudanteIdByMatriculaIdQueryCommand.execute(matricula.getId()))\n				.thenReturn(matricula.getEstudanteId());\n\n		var result = this.estudanteService.loadEstudanteIdByMatriculaId(matricula.getId());\n\n		assertThat(result).isEqualTo(matricula.getEstudanteId());\n\n		verify(this.estudanteIdByMatriculaIdQueryCommand).execute(matricula.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método saveTermoUso é bem sucedido"")\n	void saveTermoUsoExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var termoUsoDto = new TermoUsoDto();\n		termoUsoDto.setAceitouTermoUso(this.faker.random().nextBoolean());\n\n		when(this.termoUsoEstudanteSaveCommand.execute(termoUsoDto, estudanteId))\n				.thenReturn(termoUsoDto);\n\n		var result = this.estudanteService.saveTermoUso(termoUsoDto, estudanteId);\n\n		assertThat(result).isEqualTo(termoUsoDto);\n\n		verify(this.termoUsoEstudanteSaveCommand).execute(termoUsoDto, estudanteId);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.Data;\n\n@Data\npublic class TermoUsoITDto {\n\n    private Boolean aceitouTermoUso;\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.ESTUDANTE_SEM_VINCULO;\nimport static java.util.Collections.emptyList;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport static org.junit.jupiter.api.Assertions.assertThrowsExactly;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.List;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\nimport br.ufsc.bridge.jornadaestudante.backend.security.exception.HttpForbidden;\nimport br.ufsc.bridge.jornadaestudante.backend.security.exception.HttpUnauthorized;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\n\n@ExtendWith(MockitoExtension.class)\nclass EstudantePermissionAccessTest {\n\n	private final EstudanteFactory estudanteFactory = new EstudanteFactory();\n	private final MatriculaFactory matriculaFactory = new MatriculaFactory();\n	private EstudantePermissionAccess estudantePermissionAccess;\n	@Mock private EstudanteService estudanteService;\n\n	@BeforeEach\n	void setup() {\n		this.estudantePermissionAccess = new EstudantePermissionAccess(this.estudanteService);\n	}\n\n	@Test()\n	@DisplayName(""Deve ser permitido o acesso do estudante logado quando possuir vínculo com o dependente"")\n	void estudantePermissionWithDependenteExpectSuccess() {\n		var responsavelId = this.estudanteFactory.createRandom().getId();\n		var dependenteId = this.estudanteFactory.createRandom().getId();\n		var estudanteDto = new EstudanteDto();\n		estudanteDto.setId(dependenteId);\n\n		when(this.estudanteService.loadDependentes(responsavelId))\n				.thenReturn(List.of(estudanteDto));\n\n		assertDoesNotThrow(() -> this.estudantePermissionAccess.checkEstudantePermission(\n				responsavelId, dependenteId));\n\n		verify(this.estudanteService).loadDependentes(responsavelId);\n	}\n\n	@Test()\n	@DisplayName(""Deve ser permitido o acesso do estudante logado quando não possuir vínculo com nenhum dependente"")\n	void estudantePermissionWithoutDependenteExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n\n		when(this.estudanteService.loadDependentes(estudanteId))\n				.thenReturn(emptyList());\n\n		assertDoesNotThrow(() -> this.estudantePermissionAccess.checkEstudantePermission(estudanteId, null));\n\n		verify(this.estudanteService).loadDependentes(estudanteId);\n	}\n\n	@Test()\n	@DisplayName(""Não deve ser permitido o acesso do estudante logado quando não possuir vínculo com o dependente"")\n	void estudantePermissionWithoutDependenteExpectUnauthorized() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var wrongDependenteId = this.estudanteFactory.createRandom().getId();\n\n		when(this.estudanteService.loadDependentes(estudanteId))\n				.thenReturn(emptyList());\n\n		assertThrowsExactly(HttpUnauthorized.class, () -> this.estudantePermissionAccess.checkEstudantePermission(\n				estudanteId, wrongDependenteId));\n\n		verify(this.estudanteService).loadDependentes(estudanteId);\n	}\n\n	@Test()\n	@DisplayName(""Não deve ser permitido o acesso do estudante logado quando possuir vínculo com um dependente, ""\n			+ ""porém não com o dependente requisitado"")\n	void estudantePermissionWithoutBondDependenteRequestedExpectUnauthorized() {\n		var responsavelId = this.estudanteFactory.createRandom().getId();\n		var correctDependenteId = this.estudanteFactory.createRandom().getId();\n		var estudanteDto = new EstudanteDto();\n		estudanteDto.setId(correctDependenteId);\n		var wrongDependenteId = this.estudanteFactory.createRandom().getId();\n\n		when(this.estudanteService.loadDependentes(responsavelId))\n				.thenReturn(List.of(estudanteDto));\n\n		assertThrowsExactly(HttpUnauthorized.class, () -> this.estudantePermissionAccess.checkEstudantePermission(\n				responsavelId, wrongDependenteId));\n\n		verify(this.estudanteService).loadDependentes(responsavelId);\n	}\n\n	@Test()\n	@DisplayName(""Deve ser permitido o acesso do estudante logado à sua própria matrícula"")\n	void matriculaPermissionForOwnMatriculaExpectSuccess() {\n		var matricula = this.matriculaFactory.createRandom();\n\n		when(this.estudanteService.loadDependentes(matricula.getEstudanteId()))\n				.thenReturn(emptyList());\n		when(this.estudanteService.loadEstudanteIdByMatriculaId(matricula.getId()))\n				.thenReturn(matricula.getEstudanteId());\n\n		assertDoesNotThrow(() -> this.estudantePermissionAccess.checkMatriculaPermission(\n				matricula.getEstudanteId(), matricula.getId()));\n\n		verify(this.estudanteService).loadDependentes(matricula.getEstudanteId());\n		verify(this.estudanteService).loadEstudanteIdByMatriculaId(matricula.getId());\n	}\n\n	@Test()\n	@DisplayName(""Deve ser permitido o acesso do estudante logado a uma matrícula vinculada ao seu dependente"")\n	void matriculaPermissionWithDependenteExpectSuccess() {\n		var responsavelId = this.estudanteFactory.createRandom().getId();\n		var dependenteMatricula = this.matriculaFactory.createRandom();\n		var estudanteDto = new EstudanteDto();\n		estudanteDto.setId(dependenteMatricula.getEstudanteId());\n\n		when(this.estudanteService.loadDependentes(responsavelId))\n				.thenReturn(List.of(estudanteDto));\n		when(this.estudanteService.loadEstudanteIdByMatriculaId(dependenteMatricula.getEstudanteId()))\n				.thenReturn(dependenteMatricula.getEstudanteId());\n\n		assertDoesNotThrow(() -> this.estudantePermissionAccess.checkMatriculaPermission(\n				responsavelId, dependenteMatricula.getEstudanteId()));\n\n		verify(this.estudanteService).loadDependentes(responsavelId);\n		verify(this.estudanteService).loadEstudanteIdByMatriculaId(dependenteMatricula.getEstudanteId());\n	}\n\n	@Test()\n	@DisplayName(""Não deve ser permitido o acesso do estudante logado a uma matrícula que não possui nenhum vínculo"")\n	void matriculaPermissionWithoutAnyBondEstudanteLoggedExpectUnauthorized() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var wrongMatricula = this.matriculaFactory.create(m -> m.estudanteId.set(new Random().nextLong()));\n\n		when(this.estudanteService.loadDependentes(estudanteId))\n				.thenReturn(emptyList());\n		when(this.estudanteService.loadEstudanteIdByMatriculaId(wrongMatricula.getId()))\n				.thenReturn(wrongMatricula.getEstudanteId());\n\n		var httpForbidden = assertThrowsExactly(HttpForbidden.class, () -> this.estudantePermissionAccess.checkMatriculaPermission(\n				estudanteId, wrongMatricula.getId()));\n\n		assertThat(httpForbidden.getMessage()).isEqualTo(ESTUDANTE_SEM_VINCULO);\n\n		verify(this.estudanteService).loadDependentes(estudanteId);\n		verify(this.estudanteService).loadEstudanteIdByMatriculaId(wrongMatricula.getId());\n	}\n\n	@Test()\n	@DisplayName(""Não deve ser permitido o acesso ao estudante logado, que possui dependente, a uma matrícula que não possui nenhum vínculo"")\n	void matriculaPermissionWithoutAnyBondEstudanteLoggedWithDependenteExpectUnauthorized() {\n		var responsavelId = this.estudanteFactory.createRandom().getId();\n		var correctDependenteMatricula = this.matriculaFactory.createRandom();\n		var estudanteDto = new EstudanteDto();\n		estudanteDto.setId(correctDependenteMatricula.getEstudanteId());\n		var wrongDependenteMatricula = this.matriculaFactory.createRandom();\n\n		when(this.estudanteService.loadDependentes(responsavelId))\n				.thenReturn(List.of(estudanteDto));\n		when(this.estudanteService.loadEstudanteIdByMatriculaId(wrongDependenteMatricula.getId()))\n				.thenReturn(wrongDependenteMatricula.getEstudanteId());\n\n		var httpForbidden = assertThrowsExactly(HttpForbidden.class, () -> this.estudantePermissionAccess.checkMatriculaPermission(\n				responsavelId, wrongDependenteMatricula.getId()));\n\n		assertThat(httpForbidden.getMessage()).isEqualTo(ESTUDANTE_SEM_VINCULO);\n\n		verify(this.estudanteService).loadDependentes(responsavelId);\n		verify(this.estudanteService).loadEstudanteIdByMatriculaId(wrongDependenteMatricula.getId());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.PREENCHIMENTO_OBRIGATORIO;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\nclass TermoUsoValidatorTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	private TermoUsoValidator termoUsoValidator = new TermoUsoValidator();\n\n	@Test\n	@DisplayName(""Deve ser válido caso o termo de uso esteja preenchido corretamente"")\n	void dtoWithAceitouTermoUsoExpectSuccess() {\n		var termoUsoDto = new TermoUsoDto();\n		termoUsoDto.setAceitouTermoUso(this.faker.random().nextBoolean());\n\n		var result = this.termoUsoValidator.validate(termoUsoDto);\n\n		assertThat(result.isValid()).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso o termo de uso seja nulo"")\n	void dtoWithoutAceitouTermoUsoExpectNotNull() {\n		var termoUsoDto = new TermoUsoDto();\n		termoUsoDto.setAceitouTermoUso(null);\n\n		var result = this.termoUsoValidator.validate(termoUsoDto);\n\n		assertThat(result.isValid()).isFalse();\n		assertThat(result.getErrors().toString()).hasToString(""{aceitouTermoUso=%s}"".formatted(PREENCHIMENTO_OBRIGATORIO));\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass EstudanteDtoQueryCommandIntegrationTest {\n\n	@Autowired private EstudanteDtoQueryCommand estudanteDtoQueryCommand;\n	@Autowired private EstudanteFactory estudanteFactory;\n\n	@Test\n	@DisplayName(""Deve retornar os dados do estudante filtrado pelo id"")\n	void executeWhenHasEstudanteInDbExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var result = this.estudanteDtoQueryCommand.execute(estudante.getId());\n\n		assertThat(result).isNotNull();\n		assertThat(result.getNome()).isEqualTo(estudante.getNomeCivil());\n		assertThat(result.getCpf()).isEqualTo(estudante.getCpf());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando não existir nenhum estudante"")\n	void executeWhenEmptyDbExpectNull() {\n		var result = this.estudanteDtoQueryCommand.execute(new Random().nextLong());\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando o id do estudante não existir"")\n	void executeWhenEstudanteIdDoesntExistsInDbExpectNull() {\n		this.estudanteFactory.createRandom();\n\n		var result = this.estudanteDtoQueryCommand.execute(new Random().nextLong());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass EstudanteLoginDtoQueryCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private EstudanteLoginDtoQueryCommand estudanteLoginDtoQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar o id do estudante filtrado pelo cpf"")\n	void executeWhenHasEstudanteInDbExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var result = this.estudanteLoginDtoQueryCommand.execute(estudante.getCpf());\n		\n		assertThat(result.getId()).isEqualTo(estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando não existir nenhum estudante"")\n	void executeWhenEmptyDbExpectNull() {\n		var result = this.estudanteLoginDtoQueryCommand.execute(this.faker.cpf());\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando o cpf do estudante não existe"")\n	void executeWhenCpfDoesntExistsInDbExpectNull() {\n		this.estudanteFactory.createRandom();\n\n		var result = this.estudanteLoginDtoQueryCommand.execute(this.faker.cpf());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass TermoUsoEstudanteSaveCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private DAO dao;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private TermoUsoEstudanteSaveCommand termoUsoEstudanteSaveCommand;\n\n	@Test\n	@DisplayName(""Verifica se o termo de uso foi salvo corretamente com a opção passada ao método"")\n	void executeSaveExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var termoUsoDto = new TermoUsoDto();\n		termoUsoDto.setAceitouTermoUso(this.faker.random().nextBoolean());\n\n		this.termoUsoEstudanteSaveCommand.execute(termoUsoDto, estudanteId);\n\n		var result = this.dao.safeFind(Estudante.class, estudanteId);\n\n		assertThat(result.getAceitouTermoUso()).isEqualTo(termoUsoDto.getAceitouTermoUso());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.test.util.TestUtils.ignoringMicros;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoMatriculaRefEnum.CONSISTENTE;\nimport static java.util.Objects.nonNull;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.YearMonth;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.TurnoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.ModalidadeEnsinoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoMatriculaRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass MatriculaDtoListQueryCommandIntegrationTest {\n\n	@Autowired CursoFactory cursoFactory;\n	@Autowired EstudanteFactory estudanteFactory;\n	@Autowired InstituicaoFactory instituicaoFactory;\n	@Autowired MatriculaFactory matriculaFactory;\n	@Autowired MatriculaDtoListQueryCommand matriculaDtoListQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar uma lista contendo apenas a matrícula do estudante buscado"")\n	void executeWhenHasMatriculaInDbExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var matricula = this.matriculaFactory.create(sistemaOrigem, m -> {\n			m.cursoId.set(curso.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		var anoMesConclusao = nonNull(matricula.getDataConclusao()) ? YearMonth.from((matricula.getDataConclusao())) : null;\n		var descricaoSituacaoVinculo = SituacaoVinculoRefEnum.getById(matricula.getSituacaoVinculoId()).getNome();\n		var descricaoModalidadeEnsino = ModalidadeEnsinoRefEnum.getById(matricula.getModalidadeEnsinoId()).getDescricao();\n\n		var resultList = this.matriculaDtoListQueryCommand.execute(matricula.getEstudanteId());\n		var result = resultList.get(matricula.getId());\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(matricula.getId());\n		assertThat(result.getNumeroMatricula()).isEqualTo(matricula.getNumeroMatricula());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(matricula.getSituacaoVinculoId());\n		assertThat(result.getSituacaoVinculo()).isEqualTo(descricaoSituacaoVinculo);\n		assertThat(result.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula.getDataIngresso()));\n		assertThat(result.getAnoMesConclusao()).isEqualTo(anoMesConclusao);\n		assertThat(result.getPosicionamentoCurso()).isEqualTo(matricula.getPosicionamento());\n		assertThat(result.getTurno()).hasToString(TurnoRefEnum.getById(matricula.getTurnoId()).getDescricao());\n		assertThat(result.getCargaHorariaIntegralizada()).isEqualTo(matricula.getCargaHorariaIntegralizada());\n		assertThat(result.getCargaHorariaTotalCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getIndiceAproveitamentoEstudante()).isEqualTo(matricula.getIndiceAproveitamento());\n		assertThat(result.getIndiceAproveitamentoMedio()).isEqualTo(matricula.getIndiceAproveitamentoMedio());\n		assertThat(result.getDataAtualizacao()).isCloseTo(matricula.getDataAtualizacao(), ignoringMicros());\n		assertThat(result.getModalidadeEnsino()).isEqualTo(descricaoModalidadeEnsino);\n		assertThat(result.getDataQualificacao()).isEqualTo(matricula.getDataQualificacao());\n		assertThat(result.getDataDefesa()).isEqualTo(matricula.getDataDefesa());\n		assertThat(result.getUrlDiplomaXml()).isEqualTo(matricula.getUrlDiplomaXml());\n		assertThat(result.getUrlDiplomaPdf()).isEqualTo(matricula.getUrlDiplomaPdf());\n		assertThat(result.getInstituicaoId()).isEqualTo(instituicao.getId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista contendo todas as matrículas do estudante buscado"")\n	void executeWhenMoreThanOneMatriculaInDbExpectAllMatriculasFromEstudante() {\n		var matricula1 = this.matriculaFactory.create(m -> m.situacaoMatriculaId.set(CONSISTENTE.getId()));\n		var matricula2 = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(matricula1.getEstudanteId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n\n		var result = this.matriculaDtoListQueryCommand.execute(matricula1.getEstudanteId());\n\n		assertThat(result).hasSize(2);\n		assertThat(result.get(matricula1.getId()).getId()).isNotEqualTo(result.get(matricula2.getId()).getId());\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoMatriculaRefEnum.class,\n			names = ""CONSISTENTE"",\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar uma lista vazia quando a situação da matrícula for consistente"")\n	void executeWhenMatriculaNotConsistenteExpectEmptyList(SituacaoMatriculaRefEnum situacaoMatriculaRefEnum) {\n		var matricula = this.matriculaFactory.create(m -> m.situacaoMatriculaId.set(situacaoMatriculaRefEnum.getId()));\n\n		var result = this.matriculaDtoListQueryCommand.execute(matricula.getEstudanteId());\n\n		assertThat(result).isEmpty();\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoMatriculaRefEnum.class,\n			names = ""CONSISTENTE"",\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar uma lista contendo apenas a matrícula consistente"")\n	void executeWhenOnlyOneMatriculaConsistenteExpectOnlyMatriculaConsistente(SituacaoMatriculaRefEnum situacaoMatriculaRefEnum) {\n		var matricula = this.matriculaFactory.create(m -> m.situacaoMatriculaId.set(CONSISTENTE.getId()));\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(matricula.getEstudanteId());\n			m.situacaoMatriculaId.set(situacaoMatriculaRefEnum.getId());\n		});\n\n		var resultList = this.matriculaDtoListQueryCommand.execute(matricula.getEstudanteId());\n\n		assertThat(resultList).hasSize(1);\n		assertThat(resultList.get(matricula.getId()).getId()).isEqualTo(matricula.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando o id do estudante não existir"")\n	void executeWhenEstudanteIdDoesntExistsExpectEmptyList() {\n		var estudanteId = new Random().nextLong();\n\n		var result = this.matriculaDtoListQueryCommand.execute(estudanteId);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando não existir nenhuma matrícula do estudante buscado"")\n	void executeWhenEstudanteDoesntHaveMatriculaExpectEmptyList() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n\n		var result = this.matriculaDtoListQueryCommand.execute(estudanteId);\n\n		assertThat(result).isEmpty();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static java.util.Objects.nonNull;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Set;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.AreaCursoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.EixoTecnologicoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.EtapaEnsinoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.GrauAcademicoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.ModalidadePosGraduacaoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.NivelEnsinoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum;\nimport br.ufsc.bridge.jornadaestudante.model.AreaConhecimento;\nimport br.ufsc.bridge.jornadaestudante.model.ProgramaCurso;\n\n@DatabaseTest\n@SpringJUnit5Test\npublic class CursoDtoListQueryCommandIntegrationTest {\n\n	@Autowired DAO dao;\n	@Autowired CursoDtoListQueryCommand cursoDtoListQueryCommand;\n	@Autowired CursoFactory cursoFactory;\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando não existir o curso com id buscado"")\n	void executeByIdsWhenIdNotExistExpectEmptyList() {\n		var result = this.cursoDtoListQueryCommand.executeByIds(Set.of(0L));\n\n		assertThat(result).isEmpty();\n	}\n\n	@ParameterizedTest\n	@EnumSource(value =  SistemaOrigemRefEnum.class)\n	@DisplayName(""Deve retornar uma lista contendo apenas o curso filtrado por id"")\n	void executeByIdsExpectSuccess(SistemaOrigemRefEnum sistemaOrigemRefEnum) {\n		var curso = this.cursoFactory.createRandom(sistemaOrigemRefEnum);\n		var grauAcademico = nonNull(curso.getGrauAcademicoId()) ? GrauAcademicoRefEnum.getById(curso.getGrauAcademicoId()).getDescricao() : null;\n		var nivelEnsino = NivelEnsinoRefEnum.getById(curso.getNivelEnsinoId()).getDescricao();\n		var etapaEnsino = EtapaEnsinoRefEnum.getById(curso.getEtapaEnsinoId()).getDescricao();\n		var eixoTecnologico = nonNull(curso.getEixoTecnologicoId()) ? EixoTecnologicoRefEnum.getById(curso.getEixoTecnologicoId()).getDescricao() : null;\n		var programaCurso = nonNull(curso.getProgramaCursoId()) ? this.dao.safeFind(ProgramaCurso.class, curso.getProgramaCursoId()).getNomeProgramaCurso() : null;\n		var nomeAreaConhecimento = nonNull(curso.getProgramaCursoId()) ? this.dao.safeFind(AreaConhecimento.class, curso.getProgramaCursoId()).getNomeAreaConhecimento() : null;\n		var areaCurso = nonNull(curso.getAreaCursoId()) ? AreaCursoRefEnum.getById(curso.getAreaCursoId()).getDescricao() : null;\n		var modalidadePosGraduacao = nonNull(EtapaEnsinoRefEnum.getById(curso.getEtapaEnsinoId()).getModalidadePosGraduacao())\n				? ModalidadePosGraduacaoRefEnum.getById(EtapaEnsinoRefEnum.getById(curso.getEtapaEnsinoId()).getModalidadePosGraduacao()).getDescricao() : null;\n\n		var result = this.cursoDtoListQueryCommand.executeByIds(Set.of(curso.getId()))\n				.values()\n				.stream()\n				.toList();\n\n		var cursoComparator = new CursoComparator(\n				curso.getId(),\n				curso.getNome(),\n				grauAcademico,\n				nivelEnsino,\n				etapaEnsino,\n				curso.getEmail(),\n				curso.getTelefone(),\n				eixoTecnologico,\n				programaCurso,\n				nomeAreaConhecimento,\n				areaCurso,\n				modalidadePosGraduacao\n		);\n\n		assertThat(result.size()).isEqualTo(1);\n		assertThat(result.get(0)).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(cursoComparator);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista de cursos filtrados por id, quando existir mais de um id no filtro"")\n	void executeByIdsWhenHasMoreThanOneIdExpectSuccess() {\n		var cursoUm = this.cursoFactory.createRandom();\n		var cursoDois = this.cursoFactory.createRandom();\n		var cursosId = Set.of(cursoUm.getId(), cursoDois.getId());\n\n		var result = this.cursoDtoListQueryCommand.executeByIds(cursosId)\n				.values()\n				.stream()\n				.toList();\n\n		assertThat(result.size()).isEqualTo(2);\n		assertThat(result.get(0)).isNotEqualTo(result.get(1));\n	}\n\n	@Getter\n	@AllArgsConstructor\n	private static class CursoComparator {\n		private Long id;\n		private String nome;\n		private String grauAcademico;\n		private String nivelEnsino;\n		private String etapaEnsino;\n		private String email;\n		private String telefone;\n		private String eixoTecnologico;\n		private String nomePrograma;\n		private String nomeAreaConhecimento;\n		private String areaCurso;\n		private String modalidadePosGraduacao;\n	}\n\n}"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.disciplina.DisciplinaResultadoRefEnum.getById;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoMatriculaRefEnum.CONSISTENTE;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.DisciplinaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.disciplina.DisciplinaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.LocalOfertaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoMatriculaRefEnum;\n\n@DatabaseTest\nclass DisciplinasControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v3/estudante/matriculas/"";\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private DisciplinaFactory disciplinaFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private LocalOfertaFactory localOfertaFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadDisciplinasWithoutTokenExpectUnauthorized() {\n		var matriculaId = this.faker.random().nextLong();\n\n		given()\n				.get(BASE_URL + matriculaId + ""/disciplinas"")\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadDisciplinasWithInvalidTokenExpectUnauthorized() {\n		var matriculaId = this.faker.random().nextLong();\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL + matriculaId + ""/disciplinas"")\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma Bad Request quando a Path Variable não for do formato correto"")\n	void loadDisciplinasWithInvalidPathVariableExpectBadRequest() {\n		var matriculaId = this.faker.lorem().word();\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + matriculaId + ""/disciplinas"")\n				.then()\n				.statusCode(400);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um Not Found quando a Path Variable for nula"")\n	void loadDisciplinasWhenMatriculaIdIsMissingExpectNotFound() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL + ""/disciplinas"")\n				.then()\n				.statusCode(404);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando a matrícula não pertencer ao estudante"")\n	void loadDisciplinasFromAnotherMatriculaEstudanteExpectForbidden() {\n		var estudanteLogado = this.estudanteFactory.createRandom();\n		var wrongEstudante = this.estudanteFactory.createRandom();\n		var wrongMatricula = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(wrongEstudante.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		this.disciplinaFactory.create(d -> d.matriculaId.set(wrongMatricula.getId()));\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudanteLogado)))\n				.get(BASE_URL + wrongMatricula.getId() + ""/disciplinas"")\n				.then()\n				.statusCode(403);\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoMatriculaRefEnum.class,\n			names = ""CONSISTENTE"",\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando a situação da matrícula da disciplina não for consistente"")\n	void loadDisciplinasWhenMatriculaNotConsistenteExpectEmptyList(SituacaoMatriculaRefEnum situacaoMatriculaRefEnum) {\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.situacaoMatriculaId.set(situacaoMatriculaRefEnum.getId());\n		});\n		this.disciplinaFactory.create(d -> d.matriculaId.set(matricula.getId()));\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + matricula.getId() + ""/disciplinas"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.body()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, DisciplinaDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando a matrícula do estudante não tiver nenhuma disciplina"")\n	void loadDisciplinasWithoutDisciplinasExpectEmptyList() {\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + matricula.getId() + ""/disciplinas"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.body()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, DisciplinaDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso a disciplina da matrícula do estudante"")\n	void loadDisciplinasExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		var disciplina = this.disciplinaFactory.create(d -> d.matriculaId.set(matricula.getId()));\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + matricula.getId() + ""/disciplinas"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.body()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, DisciplinaDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(disciplina.getId());\n		assertThat(result.getIdentificadorDisciplina()).isEqualTo(disciplina.getIdentificadorDisciplina());\n		assertThat(result.getNome()).isEqualTo(disciplina.getNome());\n		assertThat(result.getCargaHoraria()).isEqualTo(disciplina.getCargaHoraria());\n		assertThat(result.getPeriodo()).isEqualTo(disciplina.getPeriodo());\n		assertThat(result.getMatrizCurso()).isEqualTo(disciplina.getMatrizCurso());\n		assertThat(result.getResultado()).isEqualTo(getById(disciplina.getResultadoId()).getNome());\n		assertThat(result.getNota()).isEqualTo(disciplina.getNota());\n		assertThat(result.getComponenteObrigatorio()).isEqualTo(disciplina.getComponenteObrigatorio());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso as disciplinas da matrícula do estudante"")\n	void loadDisciplinasWhenMoreThanOneDisciplinaExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		var disciplina1 = this.disciplinaFactory.create(d -> d.matriculaId.set(matricula.getId()));\n		var disciplina2 = this.disciplinaFactory.create(d -> d.matriculaId.set(matricula.getId()));\n		var disciplina3 = this.disciplinaFactory.create(d -> d.matriculaId.set(matricula.getId()));\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + matricula.getId() + ""/disciplinas"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.body()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, DisciplinaDto.class);\n\n		var iterator = resultList.iterator();\n		var result1 = iterator.next();\n		var result2 = iterator.next();\n		var result3 = iterator.next();\n\n		assertThat(resultList).hasSize(3);\n\n		assertThat(result1.getId()).isEqualTo(disciplina1.getId());\n		assertThat(result1.getIdentificadorDisciplina()).isEqualTo(disciplina1.getIdentificadorDisciplina());\n		assertThat(result1.getNome()).isEqualTo(disciplina1.getNome());\n		assertThat(result1.getCargaHoraria()).isEqualTo(disciplina1.getCargaHoraria());\n		assertThat(result1.getPeriodo()).isEqualTo(disciplina1.getPeriodo());\n		assertThat(result1.getMatrizCurso()).isEqualTo(disciplina1.getMatrizCurso());\n		assertThat(result1.getResultado()).isEqualTo(getById(disciplina1.getResultadoId()).getNome());\n		assertThat(result1.getNota()).isEqualTo(disciplina1.getNota());\n		assertThat(result1.getComponenteObrigatorio()).isEqualTo(disciplina1.getComponenteObrigatorio());\n\n		assertThat(result2.getId()).isEqualTo(disciplina2.getId());\n		assertThat(result2.getIdentificadorDisciplina()).isEqualTo(disciplina2.getIdentificadorDisciplina());\n		assertThat(result2.getNome()).isEqualTo(disciplina2.getNome());\n		assertThat(result2.getCargaHoraria()).isEqualTo(disciplina2.getCargaHoraria());\n		assertThat(result2.getPeriodo()).isEqualTo(disciplina2.getPeriodo());\n		assertThat(result2.getMatrizCurso()).isEqualTo(disciplina2.getMatrizCurso());\n		assertThat(result2.getResultado()).isEqualTo(getById(disciplina2.getResultadoId()).getNome());\n		assertThat(result2.getNota()).isEqualTo(disciplina2.getNota());\n		assertThat(result2.getComponenteObrigatorio()).isEqualTo(disciplina2.getComponenteObrigatorio());\n\n		assertThat(result3.getId()).isEqualTo(disciplina3.getId());\n		assertThat(result3.getIdentificadorDisciplina()).isEqualTo(disciplina3.getIdentificadorDisciplina());\n		assertThat(result3.getNome()).isEqualTo(disciplina3.getNome());\n		assertThat(result3.getCargaHoraria()).isEqualTo(disciplina3.getCargaHoraria());\n		assertThat(result3.getPeriodo()).isEqualTo(disciplina3.getPeriodo());\n		assertThat(result3.getMatrizCurso()).isEqualTo(disciplina3.getMatrizCurso());\n		assertThat(result3.getResultado()).isEqualTo(getById(disciplina3.getResultadoId()).getNome());\n		assertThat(result3.getNota()).isEqualTo(disciplina3.getNota());\n		assertThat(result3.getComponenteObrigatorio()).isEqualTo(disciplina3.getComponenteObrigatorio());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso apenas as disciplinas vínculadas a matrícula passada como Path Variable"")\n	void loadDisciplinasWhenEstudanteHasOtherMatriculasInDbExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var curso1 = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var curso2 = this.cursoFactory.create(c -> c.instituicaoId.set(instituicao.getId()));\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula1 = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso1.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		var disciplina1 = this.disciplinaFactory.create(d -> d.matriculaId.set(matricula1.getId()));\n		var matricula2 = this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso2.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		this.disciplinaFactory.create(d -> d.matriculaId.set(matricula2.getId()));\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + matricula1.getId() + ""/disciplinas"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.body()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, DisciplinaDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(disciplina1.getId());\n		assertThat(result.getIdentificadorDisciplina()).isEqualTo(disciplina1.getIdentificadorDisciplina());\n		assertThat(result.getNome()).isEqualTo(disciplina1.getNome());\n		assertThat(result.getCargaHoraria()).isEqualTo(disciplina1.getCargaHoraria());\n		assertThat(result.getPeriodo()).isEqualTo(disciplina1.getPeriodo());\n		assertThat(result.getMatrizCurso()).isEqualTo(disciplina1.getMatrizCurso());\n		assertThat(result.getResultado()).isEqualTo(getById(disciplina1.getResultadoId()).getNome());\n		assertThat(result.getNota()).isEqualTo(disciplina1.getNota());\n		assertThat(result.getComponenteObrigatorio()).isEqualTo(disciplina1.getComponenteObrigatorio());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.controller;\n\nimport static io.restassured.http.ContentType.JSON;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoITDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteResponsavelFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@DatabaseTest\nclass EstudanteControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v3/estudante"";\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private DAO dao;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private EstudanteResponsavelFactory estudanteResponsavelFactory;\n	@Autowired private JWTFactory jwtFactory;\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadEstudanteWithoutTokenExpectUnauthorized() {\n		given()\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadEstudanteWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso os dados pessoais do estudante"")\n	void loadEstudanteExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getObject(RestAssuredConstants.BASE_PATH, EstudanteDto.class);\n\n		assertThat(result).isNotNull();\n		assertThat(result.getId()).isEqualTo(estudante.getId());\n		assertThat(result.getCpf()).isEqualTo(estudante.getCpf());\n		assertThat(result.getNome()).isEqualTo(estudante.getNomeCivil());\n		assertThat(result.getNomeSocial()).isEqualTo(estudante.getNomeSocial());\n		assertThat(result.getNomeMae()).isEqualTo(estudante.getNomeMae());\n		assertThat(result.getDataNascimento()).isEqualTo(estudante.getDataNascimento());\n		assertThat(result.getEmail()).isEqualTo(estudante.getEmail());\n		assertThat(result.getTelefone()).isEqualTo(estudante.getTelefone());\n		assertThat(result.getIsResponsavel()).isFalse();\n		assertThat(result.getAceitouTermoUso()).isEqualTo(estudante.getAceitouTermoUso());\n		assertThat(result.getDataRegistroTermo()).isEqualTo(estudante.getDataRegistroTermo());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso os dados pessoais do dependente do estudante"")\n	void loadEstudanteDependenteExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var estudanteResponsavel = this.estudanteFactory.createRandom();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(estudante.getCpf());\n			s.cpfResponsavel.set(estudanteResponsavel.getCpf());\n		});\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudanteResponsavel)))\n				.get(BASE_URL + ""/dependentes"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, EstudanteDto.class)\n				.iterator()\n				.next();\n\n		assertThat(result).isNotNull();\n		assertThat(result.getId()).isEqualTo(estudante.getId());\n		assertThat(result.getCpf()).isEqualTo(estudante.getCpf());\n		assertThat(result.getNome()).isEqualTo(estudante.getNomeCivil());\n		assertThat(result.getNomeSocial()).isEqualTo(estudante.getNomeSocial());\n		assertThat(result.getNomeMae()).isEqualTo(estudante.getNomeMae());\n		assertThat(result.getDataNascimento()).isEqualTo(estudante.getDataNascimento());\n		assertThat(result.getEmail()).isEqualTo(estudante.getEmail());\n		assertThat(result.getTelefone()).isEqualTo(estudante.getTelefone());\n		assertThat(result.getIsResponsavel()).isFalse();\n		assertThat(result.getAceitouTermoUso()).isNull();\n		assertThat(result.getDataRegistroTermo()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando o estudante não possuir nenhum dependente"")\n	void loadEstudanteWithoutDependenteExpectSuccessAndEmptyResponse() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + ""/dependentes"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, EstudanteDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o endpoint de POST salva o termo de uso com sucesso"")\n	void persistTermoUsoExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var termoUsoITDto = new TermoUsoITDto();\n		termoUsoITDto.setAceitouTermoUso(this.faker.random().nextBoolean());\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(termoUsoITDto)\n				.post(BASE_URL + ""/termo-uso"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getObject(RestAssuredConstants.BASE_PATH, TermoUsoITDto.class);\n\n		assertThat(result.getAceitouTermoUso()).isEqualTo(termoUsoITDto.getAceitouTermoUso());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o endpoint de POST atualiza o termo de uso com sucesso"")\n	void updateTermoUsoExpectSuccess() {\n		var estudante = this.estudanteFactory.create(e -> e.aceitouTermoUso.set(false));\n		var termoUsoITDto = new TermoUsoITDto();\n		termoUsoITDto.setAceitouTermoUso(true);\n\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(termoUsoITDto)\n				.post(BASE_URL + ""/termo-uso"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getObject(RestAssuredConstants.BASE_PATH, TermoUsoITDto.class);\n\n		var estudanteInDb = this.dao.safeFind(Estudante.class, estudante.getId());\n\n		assertThat(estudanteInDb.getAceitouTermoUso()).isNotEqualTo(estudante.getAceitouTermoUso());\n		assertThat(estudanteInDb.getDataRegistroTermo()).isNotEqualTo(estudante.getDataRegistroTermo());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoMatriculaRefEnum.CONSISTENTE;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.CURSANDO;\nimport static io.restassured.http.ContentType.JSON;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static java.util.Objects.nonNull;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\nimport java.time.YearMonth;\nimport java.util.Comparator;\nimport java.util.stream.Collectors;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.NivelEnsinoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.TurnoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.ModalidadeEnsinoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoMatriculaRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum;\n\n@DatabaseTest\nclass MatriculaControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v3/estudante/matriculas"";\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadMatriculasWithoutTokenExpectUnauthorized() {\n		given()\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadMatriculasWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando o estudante não tiver nenhuma matrícula"")\n	void loadMatriculasWithoutMatriculaExpectEmptyList() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoMatriculaRefEnum.class,\n			names = ""CONSISTENTE"",\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando a situação da matrícula não for consistente"")\n	void loadMatriculasWhenNotConsistenteExpectEmptyList(SituacaoMatriculaRefEnum situacaoMatriculaRefEnum) {\n		var estudante = this.estudanteFactory.createRandom();\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.situacaoMatriculaId.set(situacaoMatriculaRefEnum.getId());\n		});\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando existem apenas matrículas que não são do estudante logado"")\n	void loadMatriculasWhenOnlyOtherEstudanteHasMatriculaExpectEmptyList() {\n		var estudanteLogado = this.estudanteFactory.createRandom();\n		var estudante = this.estudanteFactory.createRandom();\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(estudante.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudanteLogado)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso os dados da matrícula do estudante"")\n	void loadMatriculasExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(sistemaOrigem, m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class);\n		var result = resultList.iterator().next();\n\n		var anoMesConclusao = nonNull(matricula.getDataConclusao()) ? result.getAnoMesConclusao() : null;\n		var siglaUfReitoria = nonNull(instituicao.getDependenciaAdministrativaId()) ? result.getInstituicao().getSiglaUfReitoria() : null;\n		var municipioReitoria = nonNull(instituicao.getMunicipioAdmId()) ? result.getInstituicao().getMunicipioReitoria() : null;\n		var dataQualificacao = nonNull(matricula.getDataQualificacao()) ? result.getDataQualificacao() : null;\n		var dataDefesa = nonNull(matricula.getDataDefesa()) ? result.getDataDefesa() : null;\n		var urlDiplomaXml = nonNull(matricula.getUrlDiplomaXml()) ? result.getUrlDiplomaXml() : null;\n		var urlDiplomaPdf = nonNull(matricula.getUrlDiplomaPdf()) ? result.getUrlDiplomaPdf() : null;\n		var grauAcademico = nonNull(curso.getGrauAcademicoId()) ? result.getCurso().getGrauAcademico() : null;\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(matricula.getId());\n		assertThat(result.getNumeroMatricula()).isEqualTo(matricula.getNumeroMatricula());\n		assertThat(result.getSituacaoVinculo()).isEqualTo(SituacaoVinculoRefEnum.getById(matricula.getSituacaoVinculoId()).getNome());\n		assertThat(result.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula.getDataIngresso()));\n		assertThat(result.getAnoMesConclusao()).isEqualTo(anoMesConclusao);\n		assertThat(result.getPosicionamentoCurso()).isEqualTo(matricula.getPosicionamento());\n		assertThat(result.getTurno()).isEqualTo(TurnoRefEnum.getById(matricula.getTurnoId()).getDescricao());\n		assertThat(result.getCargaHorariaIntegralizada()).isEqualTo(matricula.getCargaHorariaIntegralizada());\n		assertThat(result.getCargaHorariaTotalCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getIndiceAproveitamentoEstudante()).isEqualTo(matricula.getIndiceAproveitamento());\n		assertThat(result.getIndiceAproveitamentoMedio()).isEqualTo(matricula.getIndiceAproveitamentoMedio());\n		assertThat(result.getDataAtualizacao()).isEqualTo(matricula.getDataAtualizacao());\n		assertThat(result.getInstituicao().getId()).isEqualTo(instituicao.getId());\n		assertThat(result.getInstituicao().getNome()).isEqualTo(instituicao.getNome());\n		assertThat(result.getInstituicao().getSigla()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getInstituicao().getSiglaUfReitoria()).isEqualTo(siglaUfReitoria);\n		assertThat(result.getInstituicao().getMunicipioReitoria()).isEqualTo(municipioReitoria);\n		assertThat(result.getInstituicao().getEmail()).isEqualTo(instituicao.getEmail());\n		assertThat(result.getInstituicao().getTelefone()).isEqualTo(instituicao.getTelefone());\n		assertThat(result.getCurso().getId()).isEqualTo(curso.getId());\n		assertThat(result.getCurso().getNome()).isEqualTo(curso.getNome());\n		assertThat(result.getCurso().getGrauAcademico()).isEqualTo(grauAcademico);\n		assertThat(result.getCurso().getNivelEnsino()).isEqualTo(NivelEnsinoRefEnum.getById(curso.getNivelEnsinoId()).getDescricao());\n		assertThat(result.getModalidadeEnsino()).isEqualTo(ModalidadeEnsinoRefEnum.getById(matricula.getModalidadeEnsinoId()).getDescricao());\n		assertThat(result.getDataQualificacao()).isEqualTo(dataQualificacao);\n		assertThat(result.getDataDefesa()).isEqualTo(dataDefesa);\n		assertThat(result.getUrlDiplomaXml()).isEqualTo(urlDiplomaXml);\n		assertThat(result.getUrlDiplomaPdf()).isEqualTo(urlDiplomaPdf);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso somente os dados da matrícula do estudante logado"")\n	void loadMatriculasEstudanteWhenOtherEstudanteAlsoHasMatriculaExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var estudanteLogado = this.estudanteFactory.createRandom();\n		var matriculaEstudanteLogado = this.matriculaFactory.create(sistemaOrigem, m -> {\n			m.estudanteId.set(estudanteLogado.getId());\n			m.cursoId.set(curso.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		var estudante = this.estudanteFactory.createRandom();\n		this.matriculaFactory.create(sistemaOrigem, n -> {\n			n.estudanteId.set(estudante.getId());\n			n.cursoId.set(curso.getId());\n			n.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudanteLogado)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class);\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(matriculaEstudanteLogado.getId());\n		assertThat(result.getInstituicao().getId()).isEqualTo(instituicao.getId());\n		assertThat(result.getCurso().getId()).isEqualTo(curso.getId());\n		assertThat(result.getAnoMesIngresso()).isEqualTo(YearMonth.from(matriculaEstudanteLogado.getDataIngresso()));\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso todas as matrículas do estudante quando ele possuir matrículas em diferentes instituições"")\n	void loadMatriculasSameEstudanteInDifferentInstituicoesExpectSuccess() {\n		var instituicao1 = this.instituicaoFactory.createRandom();\n		var sistemaOrigem1 = SistemaOrigemRefEnum.getById(instituicao1.getSistemaOrigemInstituicao());\n		var curso1 = this.cursoFactory.create(sistemaOrigem1, c -> c.instituicaoId.set(instituicao1.getId()));\n		var instituicao2 = this.instituicaoFactory.createRandom();\n		var sistemaOrigem2 = SistemaOrigemRefEnum.getById(instituicao2.getSistemaOrigemInstituicao());\n		var curso2 = this.cursoFactory.create(sistemaOrigem2, d -> d.instituicaoId.set(instituicao2.getId()));\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula1 = this.matriculaFactory.create(sistemaOrigem1, m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso1.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		var matricula2 = this.matriculaFactory.create(sistemaOrigem2, n -> {\n			n.estudanteId.set(estudante.getId());\n			n.cursoId.set(curso2.getId());\n			n.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class)\n				.stream()\n				.sorted(Comparator.comparingLong(MatriculaDto::getId))\n				.collect(Collectors.toList());\n		var iterator = resultList.iterator();\n		var result1 = iterator.next();\n		var result2 = iterator.next();\n\n		assertThat(resultList).hasSize(2);\n\n		assertThat(result1.getId()).isEqualTo(matricula1.getId());\n		assertThat(result1.getInstituicao().getId()).isEqualTo(instituicao1.getId());\n		assertThat(result1.getInstituicao().getNome()).isEqualTo(instituicao1.getNome());\n		assertThat(result1.getCurso().getId()).isEqualTo(curso1.getId());\n		assertThat(result1.getCurso().getNome()).isEqualTo(curso1.getNome());\n		assertThat(result1.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula1.getDataIngresso()));\n\n		assertThat(result2.getId()).isEqualTo(matricula2.getId());\n		assertThat(result2.getInstituicao().getId()).isEqualTo(instituicao2.getId());\n		assertThat(result2.getInstituicao().getNome()).isEqualTo(instituicao2.getNome());\n		assertThat(result2.getCurso().getId()).isEqualTo(curso2.getId());\n		assertThat(result2.getCurso().getNome()).isEqualTo(curso2.getNome());\n		assertThat(result2.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula2.getDataIngresso()));\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso todas as matrículas do estudante quando ele possuir matrículas em diferentes cursos e na mesma instituição"")\n	void loadMatriculasSameEstudanteAndInstituicaoInDifferentCursosExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso1 = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var curso2 = this.cursoFactory.create(sistemaOrigem, d -> d.instituicaoId.set(instituicao.getId()));\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula1 = this.matriculaFactory.create(sistemaOrigem, m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso1.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		var matricula2 = this.matriculaFactory.create(sistemaOrigem, n -> {\n			n.estudanteId.set(estudante.getId());\n			n.cursoId.set(curso2.getId());\n			n.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class)\n				.stream()\n				.sorted(Comparator.comparingLong(MatriculaDto::getId))\n				.collect(Collectors.toList());\n		var iterator = resultList.iterator();\n		var result1 = iterator.next();\n		var result2 = iterator.next();\n\n		assertThat(resultList).hasSize(2);\n\n		assertThat(result1.getId()).isEqualTo(matricula1.getId());\n		assertThat(result1.getInstituicao().getId()).isEqualTo(instituicao.getId());\n		assertThat(result1.getInstituicao().getNome()).isEqualTo(instituicao.getNome());\n		assertThat(result1.getCurso().getId()).isEqualTo(curso1.getId());\n		assertThat(result1.getCurso().getNome()).isEqualTo(curso1.getNome());\n		assertThat(result1.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula1.getDataIngresso()));\n\n		assertThat(result2.getId()).isEqualTo(matricula2.getId());\n		assertThat(result2.getInstituicao().getId()).isEqualTo(instituicao.getId());\n		assertThat(result2.getInstituicao().getNome()).isEqualTo(instituicao.getNome());\n		assertThat(result2.getCurso().getId()).isEqualTo(curso2.getId());\n		assertThat(result2.getCurso().getNome()).isEqualTo(curso2.getNome());\n		assertThat(result2.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula2.getDataIngresso()));\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso todas as matrículas do estudante quando ele possuir matrículas na mesma intituição e curso"")\n	void loadMatriculasSameEstudanteAndInstituicaoAndCursoExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula1 = this.matriculaFactory.create(sistemaOrigem, m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n		var matricula2 = this.matriculaFactory.create(sistemaOrigem, n -> {\n			n.estudanteId.set(estudante.getId());\n			n.cursoId.set(curso.getId());\n			n.dataIngresso.set(LocalDate.parse(""2021-01-01""));\n			n.situacaoMatriculaId.set(CONSISTENTE.getId());\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class)\n				.stream()\n				.sorted(Comparator.comparingLong(MatriculaDto::getId))\n				.collect(Collectors.toList());\n		var iterator = resultList.iterator();\n		var result1 = iterator.next();\n		var result2 = iterator.next();\n\n		assertThat(resultList).hasSize(2);\n\n		assertThat(result1.getId()).isEqualTo(matricula1.getId());\n		assertThat(result1.getInstituicao().getId()).isEqualTo(instituicao.getId());\n		assertThat(result1.getInstituicao().getNome()).isEqualTo(instituicao.getNome());\n		assertThat(result1.getCurso().getId()).isEqualTo(curso.getId());\n		assertThat(result1.getCurso().getNome()).isEqualTo(curso.getNome());\n		assertThat(result1.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula1.getDataIngresso()));\n\n		assertThat(result2.getId()).isEqualTo(matricula2.getId());\n		assertThat(result2.getInstituicao().getId()).isEqualTo(instituicao.getId());\n		assertThat(result2.getInstituicao().getNome()).isEqualTo(instituicao.getNome());\n		assertThat(result2.getCurso().getId()).isEqualTo(curso.getId());\n		assertThat(result2.getCurso().getNome()).isEqualTo(curso.getNome());\n		assertThat(result2.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula2.getDataIngresso()));\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso todos os dados da matrícula mesmo com informações faltando"")\n	void loadMatriculasWithMissingInformationsExpectSuccess() {\n		var instituicao = this.instituicaoFactory.create(i -> {\n			i.municipioAdmId.set(null);\n			i.sigla.set(null);\n			i.email.set(null);\n			i.telefone.set(null);\n		});\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> {\n			c.instituicaoId.set(instituicao.getId());\n			c.cargaHoraria.set(null);\n		});\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(sistemaOrigem, m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(curso.getId());\n			m.situacaoMatriculaId.set(CONSISTENTE.getId());\n			m.indiceAproveitamento.set(null);\n			m.indiceAproveitamentoMedio.set(null);\n			m.posicionamento.set(null);\n			m.cargaHorariaIntegralizada.set(null);\n			m.situacaoVinculoId.set(CURSANDO.getId());\n			m.dataConclusao.set(null);\n		});\n\n		var resultList = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MatriculaDto.class);\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(matricula.getId());\n		assertThat(result.getInstituicao().getId()).isEqualTo(instituicao.getId());\n		assertThat(result.getCurso().getId()).isEqualTo(curso.getId());\n		assertThat(result.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula.getDataIngresso()));\n		assertThat(result.getInstituicao().getSigla()).isNull();\n		assertThat(result.getInstituicao().getEmail()).isNull();\n		assertThat(result.getInstituicao().getTelefone()).isNull();\n		assertThat(result.getInstituicao().getMunicipioReitoria()).isNull();\n		assertThat(result.getCargaHorariaTotalCurso()).isNull();\n		assertThat(result.getCargaHorariaIntegralizada()).isNull();\n		assertThat(result.getIndiceAproveitamentoEstudante()).isNull();\n		assertThat(result.getIndiceAproveitamentoMedio()).isNull();\n		assertThat(result.getPosicionamentoCurso()).isNull();\n		assertThat(result.getAnoMesConclusao()).isNull();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.ArrayList;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator.TermoUsoValidator;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.PrincipalFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.validation.Validator;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\nclass EstudanteControllerTest {\n\n	private static final String BASE_URL = ""/api/v3/estudante"";\n	private final BridgeFaker faker = new BridgeFaker();\n	private final EstudanteFactory estudanteFactory = new EstudanteFactory();\n	private final PrincipalFactory principalFactory = new PrincipalFactory();\n	@Autowired private MockMvc mockMvc;\n	@Autowired private ObjectMapper objectMapper;\n\n	@MockBean\n	@Autowired\n	private EstudanteService estudanteService;\n\n	@MockBean\n	@Autowired\n	private TermoUsoValidator termoUsoValidator;\n\n	record EstudanteAndJwtRecord(Estudante estudante, Jwt jwt) {\n	}\n\n	private EstudanteAndJwtRecord createEstudanteAndJwtRecord() {\n		var estudante = this.estudanteFactory.createRandom();\n		var jwt = this.principalFactory.withEstudante(e -> e.id.set(estudante.getId()));\n		return new EstudanteAndJwtRecord(estudante, jwt);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se houve o correto acionamento dos métodos internos do endpoint de estudante"")\n	void showEstudanteExpectSuccess() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n\n		when(this.estudanteService.loadDadosPessoais(estudanteAndJwtRecord.estudante.getId()))\n				.thenReturn(new EstudanteDto());\n\n		this.mockMvc.perform(get(BASE_URL)\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt)))\n				.andExpect(status().is2xxSuccessful());\n\n		verify(this.estudanteService).loadDadosPessoais(estudanteAndJwtRecord.estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de estudante quando não há token"")\n	void showEstudanteWithoutTokenExpectUnauthorized() throws Exception {\n		this.mockMvc.perform(get(BASE_URL))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.estudanteService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de estudante quando o token for inválido"")\n	void showEstudanteWhenInvalidTokenExpectUnauthorized() throws Exception {\n		var bearerAuth = withBearerAuthorization(""INVALID"");\n\n		this.mockMvc\n				.perform(get(BASE_URL)\n						.header(bearerAuth.getName(), bearerAuth.getValue()))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.estudanteService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se houve o correto acionamento dos métodos internos do endpoint de dependentes"")\n	void indexDependentesExpectSuccess() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n\n		when(this.estudanteService.loadDependentesBcpf(estudanteAndJwtRecord.estudante.getId()))\n				.thenReturn(new ArrayList<>());\n\n		this.mockMvc.perform(get(BASE_URL + ""/dependentes"")\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt))\n						.contentType(MediaType.APPLICATION_JSON))\n				.andExpect(status().is2xxSuccessful());\n\n		verify(this.estudanteService).loadDependentesBcpf(estudanteAndJwtRecord.estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de dependentes quando não há token"")\n	void indexDependentesWithoutTokenExpectUnauthorized() throws Exception {\n		this.mockMvc.perform(get(BASE_URL + ""/dependentes""))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.estudanteService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de dependentes quando o token for inválido"")\n	void indexDependentesWhenInvalidTokenExpectUnauthorized() throws Exception {\n		var bearerAuth = withBearerAuthorization(""INVALID"");\n\n		this.mockMvc\n				.perform(get(BASE_URL + ""/dependentes"")\n						.header(bearerAuth.getName(), bearerAuth.getValue()))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.estudanteService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se houve o correto acionamento dos métodos internos do endpoint do termo de uso"")\n	void storeTermoUsoExpectSuccess() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n		var termoUsoDto = new TermoUsoDto();\n		termoUsoDto.setAceitouTermoUso(this.faker.random().nextBoolean());\n\n		when(this.termoUsoValidator.validate(termoUsoDto))\n				.thenReturn(Validator.of(termoUsoDto));\n\n		when(this.estudanteService.saveTermoUso(termoUsoDto, estudanteAndJwtRecord.estudante().getId()))\n				.thenReturn(termoUsoDto);\n\n		this.mockMvc.perform(post(BASE_URL + ""/termo-uso"")\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt))\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(termoUsoDto)))\n				.andExpect(status().is2xxSuccessful());\n\n		verify(this.termoUsoValidator).validate(termoUsoDto);\n		verify(this.estudanteService).saveTermoUso(termoUsoDto, estudanteAndJwtRecord.estudante().getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de termo de uso quando não há token"")\n	void storeTermoUsoWithoutTokenExpectUnauthorized() throws Exception {\n		this.mockMvc.perform(post(BASE_URL + ""/termo-uso"")\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(new TermoUsoDto())))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.termoUsoValidator);\n		verifyNoInteractions(this.estudanteService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint de termo de uso quando o token for inválido"")\n	void storeTermoUsoWhenInvalidTokenExpectUnauthorized() throws Exception {\n		var bearerAuth = withBearerAuthorization(""INVALID"");\n\n		this.mockMvc\n				.perform(post(BASE_URL + ""/termo-uso"")\n						.header(bearerAuth.getName(), bearerAuth.getValue())\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(new TermoUsoDto())))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.termoUsoValidator);\n		verifyNoInteractions(this.estudanteService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos do endpoint de termo de uso não continua após erros de validação"")\n	void storeTermoUsoWhenValidatorHasErrorsExpectBadRequest() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n		var termoUsoDto = new TermoUsoDto();\n		var validatorWithError = Validator.of(termoUsoDto);\n		validatorWithError.error(""ERROR"");\n\n		when(this.termoUsoValidator.validate(termoUsoDto))\n				.thenReturn(validatorWithError);\n\n		this.mockMvc.perform(post(BASE_URL + ""/termo-uso"")\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt))\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(termoUsoDto)))\n				.andExpect(status().isBadRequest());\n\n		verify(this.termoUsoValidator).validate(termoUsoDto);\n		verifyNoInteractions(this.estudanteService);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model;\n\nimport lombok.Data;\n\n@Data\npublic class MunicipioITDto {\n\n	private Long id;\n	private String nome;\n	private Long ufId;\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QUF.uF;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass UfDtoListQueryCommandIntegrationTest {\n\n	@Autowired private DAO dao;\n	@Autowired private UfDtoListQueryCommand ufDtoListQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar uma lista com todas as UFs"")\n	void executeWhenHasUFInDbExpectSuccess() {\n		var ufInDb = this.dao.queryFactory()\n				.selectFrom(uF)\n				.fetch();\n\n		var result = this.ufDtoListQueryCommand.execute();\n\n		assertThat(result).hasSize(ufInDb.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(ufInDb);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QMunicipio.municipio;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass MunicipioDtoListQueryCommandIntegrationTest {\n\n	@Autowired private DAO dao;\n	@Autowired private MunicipioDtoListQueryCommand municipioDtoListQueryCommand;\n	@Autowired private MunicipioDomainFactory municipioDomainFactory;\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando não existir o UfId que foi passado como parâmetro"")\n	void executeWhenUfIdNotExistsExpectEmptyList() {\n		var municipioDtoList = this.municipioDtoListQueryCommand.execute(0L);\n\n		assertThat(municipioDtoList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista com todos os municípios do sistema quando não for passado nenhum parâmetro"")\n	void executeWhenUfIdIsNullExpectAllMunicipiosInDbList() {\n		var municipiosInDb = this.dao.queryFactory()\n				.selectFrom(municipio)\n				.fetch();\n\n		var result = this.municipioDtoListQueryCommand.execute(null);\n\n		assertThat(result).hasSize(municipiosInDb.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(municipiosInDb);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista somente dos municípios vinculados ao UfId que foi passado como parâmetro"")\n	void executeWhenUfIdIsNotNullExpectOnlyUfMunicipiosList() {\n		var municipiosDtoInDbList = new ArrayList<MunicipioDto>();\n		var municipioUfId = this.municipioDomainFactory.createRandom().getUfId();\n		var municipiosEnumByUfId = Arrays.stream(MunicipioRefEnum.values())\n				.filter(municipioRefEnum -> municipioRefEnum.getUfId().equals(municipioUfId))\n				.toList();\n\n		municipiosEnumByUfId.forEach(municipioRefEnum -> {\n			var municipioDto = new MunicipioDto();\n			municipioDto.setId(municipioRefEnum.getId());\n			municipioDto.setNome(municipioRefEnum.getNome());\n			municipioDto.setUfId(municipioRefEnum.getUfId());\n			municipiosDtoInDbList.add(municipioDto);\n		});\n\n		var result = this.municipioDtoListQueryCommand.execute(municipioUfId);\n\n		assertThat(result).hasSize(municipiosDtoInDbList.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(municipiosDtoInDbList);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QMunicipio.municipio;\nimport static br.ufsc.bridge.jornadaestudante.model.QUF.uF;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioITDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.UfDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum;\n\n@DatabaseTest\npublic class EnderecoControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL_MUNICIPIO = ""/api/v2/municipios"";\n	private static final String BASE_URL_UF = ""/api/v2/unidades-federativas"";\n	@Autowired private DAO dao;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private MunicipioDomainFactory municipioDomainFactory;\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadUFWithoutTokenExpectUnauthorized() {\n		given()\n				.get(BASE_URL_UF)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadUFWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""token-invalido""))\n				.get(BASE_URL_UF)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o endpoint de GET retorna corretamente as informações das UFs"")\n	void loadUFExpectSuccess() {\n		var ufsInDb = this.dao.queryFactory()\n				.selectFrom(uF)\n				.fetch();\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL_UF)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, UfDto.class);\n\n		assertThat(result).hasSize(ufsInDb.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(ufsInDb);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadMunicipiosWithoutTokenExpectUnauthorized() {\n		given()\n				.get(BASE_URL_MUNICIPIO)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadMunicipiosWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(AuthorizationUtils.withBearerAuthorization(""token-invalido""))\n				.get(BASE_URL_MUNICIPIO)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o endpoint de GET retorna corretamente as informações de todos os municípios"")\n	void loadMunicipiosExpectSuccess() {\n		var municipiosInDb = this.dao.queryFactory()\n				.selectFrom(municipio)\n				.fetch();\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL_MUNICIPIO)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MunicipioDto.class);\n\n		assertThat(result).hasSize(municipiosInDb.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(municipiosInDb);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o endpoint de GET retorna corretamente as informações de todos os municípios da UF"")\n	void loadMunicipiosWithUfIdExpectSuccess() {\n		var municipiosInDb = new ArrayList<MunicipioITDto>();\n		var ufId = this.municipioDomainFactory.createRandom().getUfId();\n		var municipiosEnumByUfId = Arrays.stream(MunicipioRefEnum.values())\n				.filter(municipioRefEnum -> municipioRefEnum.getUfId().equals(ufId))\n				.toList();\n\n		municipiosEnumByUfId.forEach(municipioRefEnum -> {\n			var municipioDto = new MunicipioITDto();\n			municipioDto.setId(municipioRefEnum.getId());\n			municipioDto.setNome(municipioRefEnum.getNome());\n			municipioDto.setUfId(municipioRefEnum.getUfId());\n			municipiosInDb.add(municipioDto);\n		});\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL_MUNICIPIO + ""?ufId="" + ufId)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(RestAssuredConstants.BASE_PATH, MunicipioDto.class);\n\n		assertThat(result).hasSize(municipiosInDb.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(municipiosInDb);\n	}\n	\n}"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.command.BannerListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\n\npublic class BannerServiceTest {\n\n	private BannerService bannerService;\n	private BannerListQueryCommand bannerListQueryCommand;\n\n	@BeforeEach\n	void setup() {\n		this.bannerListQueryCommand = mock(BannerListQueryCommand.class);\n		this.bannerService = new BannerService(this.bannerListQueryCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve testar o método loadBannerList"")\n	void loadBannerListSuccess() {\n		List<BannerDto> bannerDtoList = Collections.emptyList();\n\n		when(this.bannerListQueryCommand.execute()).thenReturn(bannerDtoList);\n\n		var result = this.bannerService.loadBannerList();\n\n		assertThat(result).isEqualTo(bannerDtoList);\n\n		verify(this.bannerListQueryCommand).execute();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.banner.common.BannerConstants.MAX_SIZE_BANNERS;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.ATIVO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.EXCLUIDO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.EXPIRADO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.INATIVO;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.ArrayList;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.banner.BannerFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Banner;\n\n@SpringJUnit5Test\n@DatabaseTest\nclass BannerListQueryCommandTest {\n\n	@Autowired\n	private DAO dao;\n	@Autowired\n	private BannerListQueryCommand bannerListQueryCommand;\n	@Autowired\n	private BannerFactory bannerFactory;\n\n	@Test\n	@DisplayName(""Lista vazia ao buscar quando não houverem banners cadastrados"")\n	void loadBannersWithEmptyDbExpectEmptyList() {\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar apenas banners ativos com data de validade maior ou igual à data atual"")\n	void loadOnlyActiveBannersWithValidadeGreaterOrEqualTodayExpectSuccess() {\n		var bannerAtivo = this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now());\n		});\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataCriacao.set(Instant.now().minus(10, ChronoUnit.DAYS));\n			spec.dataValidade.set(LocalDate.now().minusDays(9));\n		});\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(INATIVO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXCLUIDO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXPIRADO.getId()));\n\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result.stream().map(BannerDto::getId)).containsOnly(bannerAtivo.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar no máximo 14 banners ativos"")\n	void loadActiveBannersExpectAtMostFourteenBanners() {\n		var bannerList = new ArrayList<Banner>();\n		while (bannerList.size() < MAX_SIZE_BANNERS) {\n			bannerList.add(this.bannerFactory.create(spec -> {\n				spec.situacaoBanner.set(ATIVO.getId());\n				spec.dataValidade.set(LocalDate.now());\n			}));\n		}\n\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(INATIVO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXPIRADO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXCLUIDO.getId()));\n\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result.size()).isEqualTo(MAX_SIZE_BANNERS);\n		assertThat(result.stream().map(BannerDto::getId)).containsExactlyInAnyOrderElementsOf(bannerList.stream().map(Banner::getId).toList());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar os banners ordenados por data de atualização da mais recente à mais antiga"")\n	void loadActiveBannersExpectOrderByMostRecentUpdated() {\n		var bannerRecente = this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now());\n			spec.dataAtualizacao.set(Instant.now());\n		});\n		var bannerAntigo = this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now());\n			spec.dataAtualizacao.set(Instant.now().minusSeconds(1));\n		});\n\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result.size()).isEqualTo(2);\n		assertThat(result.get(0).getId()).isEqualTo(bannerRecente.getId());\n		assertThat(result.get(1).getId()).isEqualTo(bannerAntigo.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar lista vazia se não houverem banners válidos"")\n	void whenNotHaveValidBannersExpectEmptyList() {\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now().minusDays(1));\n		});\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(INATIVO.getId());\n		});\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(EXPIRADO.getId());\n		});\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(EXPIRADO.getId());\n		});\n\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result).isEmpty();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants.BASE_PATH;\nimport static br.ufsc.bridge.jornadaestudante.common.utils.DateUtils.asInstant;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.ATIVO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.EXCLUIDO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.EXPIRADO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoBannerDbEnum.INATIVO;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n\nimport java.time.LocalDate;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.factory.module.banner.BannerFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Banner;\n\n@DatabaseTest\nclass BannerControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""api/v1/banners"";\n	@Autowired private BannerFactory bannerFactory;\n	@Autowired private JWTFactory jwtFactory;\n\n	@Test\n	@DisplayName(""Deve retornar Unauthorized ao tentar acessar a listagem dos banners sem autenticação"")\n	void listBannersWithoutCredentialExpectUnauthorized() {\n		given()\n				.when()\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar apenas banners ativos na listagem"")\n	void listBannersExpectOnlyActives() {\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(INATIVO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXPIRADO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXCLUIDO.getId()));\n		var bannerAtivo = this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now());\n		});\n\n		var response = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(BASE_PATH, BannerDto.class);\n\n		assertThat(response).hasSize(1);\n		assertThat(response.get(0).getId()).isEqualTo(bannerAtivo.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar os dados de um banner ativo corretamente na listagem"")\n	void listBannersExpectSuccess() {\n		var banner = this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now());\n		});\n\n		var resultBanner = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.jsonPath()\n				.getList(BASE_PATH, BannerDto.class)\n				.get(0);\n\n		assertThat(resultBanner.getId()).isEqualTo(banner.getId());\n		assertThat(resultBanner.getTitulo()).isEqualTo(banner.getTitulo());\n		assertThat(resultBanner.getUrl()).isEqualTo(banner.getUrl());\n		assertThat(resultBanner.getContentType()).isEqualTo(banner.getContentType());\n	}\n\n	@Test\n	@DisplayName(""Deve listar banners ativos com data de atualização mais recentes e não retornar banners antigos e inativos"")\n	void listActiveBannersByDataAtualizacaoExpectOlderAndInactiveNotReturned() {\n		var dataValidade = LocalDate.now();\n		var bannerActiveList = Stream.generate(() -> this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(dataValidade.plusDays(1));\n			spec.dataAtualizacao.set(asInstant(dataValidade.minusDays(1)));\n		})).limit(14).toList();\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(dataValidade.plusDays(1));\n			spec.dataAtualizacao.set(asInstant(dataValidade.minusDays(2)));\n		});\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(INATIVO.getId());\n		});\n\n		var response = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.get(BASE_URL)\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getList(BASE_PATH, BannerDto.class);\n\n		assertThat(response).hasSize(bannerActiveList.size());\n		assertThat(response.stream().map(BannerDto::getId)).containsAll(bannerActiveList.stream().map(Banner::getId).toList());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.service.BannerService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.PrincipalFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\nclass BannerControllerTest {\n\n	private static final String BASE_URL = ""/api/v1/banners"";\n	private final PrincipalFactory principalFactory = new PrincipalFactory();\n	@MockBean\n	@Autowired\n	private BannerService bannerService;\n	@Autowired\n	private MockMvc mockMvc;\n\n	@Test\n	@DisplayName(""Unauthorized ao listar os banners sem autenticação"")\n	void indexBannerWithoutAuthenticationExpectUnauthorized() throws Exception {\n		var getRequest = get(BASE_URL);\n\n		var response = this.mockMvc.perform(getRequest);\n\n		response.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.bannerService);\n	}\n\n	@Test\n	@DisplayName(""Unauthorized ao listar os banners com autenticação inválida"")\n	void indexBannerWithInvalidTokenExpectUnauthorized() throws Exception {\n		var bearerAuth = withBearerAuthorization(""token-invalido"");\n\n		var getRequest = get(BASE_URL).header(bearerAuth.getName(), bearerAuth.getValue());\n\n		var response = this.mockMvc.perform(getRequest);\n\n		response.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.bannerService);\n	}\n\n	@Test\n	@DisplayName(""Sucesso ao listar banners"")\n	void indexBannerExpectSuccess() throws Exception {\n		var jwt = this.principalFactory.withEstudanteRandom();\n		var dto = new BannerDto();\n\n		when(this.bannerService.loadBannerList()).thenReturn(List.of(dto));\n\n		var getRequest = get(BASE_URL).with(jwt().jwt(jwt));\n\n		var response = this.mockMvc.perform(getRequest);\n\n		response.andExpect(status().is2xxSuccessful());\n\n		verify(this.bannerService).loadBannerList();\n	}\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Random;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.core.io.ByteArrayResource;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ComprovanteVinculoDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ComprovanteVinculoInfoDtoFillCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.HashValidadorExistsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ValidadorHashSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.VinculoMatriculaQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.VinculoMatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\nclass ComprovanteVinculoServiceTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	private ComprovanteVinculoBuilder comprovanteVinculoBuilder;\n	private ComprovanteVinculoService comprovanteVinculoService;\n	private ComprovanteVinculoDtoQueryCommand comprovanteVinculoDtoQueryCommand;\n	private ComprovanteVinculoInfoDtoFillCommand comprovanteVinculoInfoDtoFillCommand;\n	private HashValidadorExistsQueryCommand hashValidadorExistsQueryCommand;\n	private ValidadorHashSaveCommand validadorHashSaveCommand;\n	private VinculoMatriculaQueryCommand vinculoMatriculaQueryCommand;\n\n	@BeforeEach\n	private void setup() {\n		this.comprovanteVinculoBuilder = mock(ComprovanteVinculoBuilder.class);\n		this.comprovanteVinculoDtoQueryCommand = mock(ComprovanteVinculoDtoQueryCommand.class);\n		this.comprovanteVinculoInfoDtoFillCommand = mock(ComprovanteVinculoInfoDtoFillCommand.class);\n		this.validadorHashSaveCommand = mock(ValidadorHashSaveCommand.class);\n		this.vinculoMatriculaQueryCommand = mock(VinculoMatriculaQueryCommand.class);\n		this.hashValidadorExistsQueryCommand = mock(HashValidadorExistsQueryCommand.class);\n		this.comprovanteVinculoService = spy(new ComprovanteVinculoService(\n				this.comprovanteVinculoBuilder,\n				this.comprovanteVinculoDtoQueryCommand,\n				this.comprovanteVinculoInfoDtoFillCommand,\n				this.validadorHashSaveCommand,\n				this.vinculoMatriculaQueryCommand,\n				this.hashValidadorExistsQueryCommand\n		));\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculoPdf é bem sucedido"")\n	void generateComprovanteVinculoPdfExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n		var comprovanteVinculoDto = new ComprovanteVinculoDto();\n		var resource = new ByteArrayResource(""teste"".getBytes());\n\n		doReturn(comprovanteVinculoDto)\n				.when(this.comprovanteVinculoService)\n				.generateComprovanteVinculo(matriculaId);\n\n		when(this.comprovanteVinculoBuilder.generatePdfComprovanteVinculo(comprovanteVinculoDto))\n				.thenReturn(resource);\n\n		this.comprovanteVinculoService.generateComprovanteVinculoPdf(matriculaId);\n\n		verify(this.comprovanteVinculoService).generateComprovanteVinculo(matriculaId);\n		verify(this.comprovanteVinculoBuilder).generatePdfComprovanteVinculo(comprovanteVinculoDto);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculoPdf é bem sucedido e não houve interação com comprovanteVinculoBuilder"")\n	void generateComprovanteVinculoPdfWhenVinculoDtoIsNullExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n\n		doReturn(null)\n				.when(this.comprovanteVinculoService)\n				.generateComprovanteVinculo(matriculaId);\n\n		var result = this.comprovanteVinculoService.generateComprovanteVinculoPdf(matriculaId);\n\n		assertThat(result).isNull();\n\n		verify(this.comprovanteVinculoService).generateComprovanteVinculo(matriculaId);\n		verifyNoInteractions(this.comprovanteVinculoBuilder);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculoInfo é bem sucedido"")\n	void generateComprovanteVinculoInfoExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n		var comprovanteVinculoDto = new ComprovanteVinculoDto();\n		var comprovanteVinculoInfoDto = new ComprovanteVinculoInfoDto();\n\n		doReturn(comprovanteVinculoDto)\n				.when(this.comprovanteVinculoService)\n				.generateComprovanteVinculo(matriculaId);\n\n		when(this.comprovanteVinculoInfoDtoFillCommand.execute(comprovanteVinculoDto))\n				.thenReturn(comprovanteVinculoInfoDto);\n\n		var result = this.comprovanteVinculoService.generateComprovanteVinculoInfo(matriculaId);\n\n		assertThat(result).isEqualTo(comprovanteVinculoInfoDto);\n\n		verify(this.comprovanteVinculoService).generateComprovanteVinculo(matriculaId);\n		verify(this.comprovanteVinculoInfoDtoFillCommand).execute(comprovanteVinculoDto);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculoInfo é bem sucedido e não houve interação com comprovanteVinculoInfoDtoFillCommand"")\n	void generateComprovanteVinculoInfoWhenVinculoDtoIsNullExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n\n		doReturn(null)\n				.when(this.comprovanteVinculoService)\n				.generateComprovanteVinculo(matriculaId);\n\n		var result = this.comprovanteVinculoService.generateComprovanteVinculoInfo(matriculaId);\n\n		assertThat(result).isNull();\n\n		verify(this.comprovanteVinculoService).generateComprovanteVinculo(matriculaId);\n		verifyNoInteractions(this.comprovanteVinculoInfoDtoFillCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadVinculoByHashValidador é bem sucedido"")\n	void loadVinculoByHashValidadorExpectSuccess() {\n		var hash = this.faker.hashHexadecimal();\n		var vinculoMatriculaDto = new VinculoMatriculaDto();\n\n		when(this.vinculoMatriculaQueryCommand.execute(hash))\n				.thenReturn(vinculoMatriculaDto);\n\n		var result = this.comprovanteVinculoService.loadVinculoByHashValidador(hash);\n\n		assertThat(result).isEqualTo(vinculoMatriculaDto);\n\n		verify(this.vinculoMatriculaQueryCommand).execute(hash);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculo é bem sucedido"")\n	void generateComprovanteVinculoWhenHashIsNullExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n		var comprovanteVinculoDto = new ComprovanteVinculoDto();\n		comprovanteVinculoDto.setMatriculaId(matriculaId);\n		comprovanteVinculoDto.setHash(null);\n\n		when(this.comprovanteVinculoDtoQueryCommand.execute(matriculaId))\n				.thenReturn(comprovanteVinculoDto);\n\n		when(this.hashValidadorExistsQueryCommand.execute(anyString()))\n				.thenReturn(Boolean.TRUE)\n				.thenReturn(Boolean.FALSE);\n\n		doNothing()\n				.when(this.validadorHashSaveCommand)\n				.execute(eq(matriculaId), anyString());\n\n		var result = this.comprovanteVinculoService.generateComprovanteVinculo(matriculaId);\n\n		assertThat(result).isNotNull();\n		assertThat(result.getMatriculaId()).isEqualTo(matriculaId);\n		assertThat(result.getHash()).isNotNull();\n\n		verify(this.comprovanteVinculoDtoQueryCommand).execute(matriculaId);\n		verify(this.hashValidadorExistsQueryCommand, times(2)).execute(anyString());\n		verify(this.validadorHashSaveCommand).execute(eq(matriculaId), anyString());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculo é bem sucedido""\n			+ "" e não houveram interações com hashValidadorExistsQueryCommand e validadorHashSaveCommand quando o hash já existe"")\n	void generateComprovanteVinculoWhenHashAlreadyExistsExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n		var hash = this.faker.hashHexadecimal();\n		var comprovanteVinculoDto = new ComprovanteVinculoDto();\n		comprovanteVinculoDto.setMatriculaId(matriculaId);\n		comprovanteVinculoDto.setHash(hash);\n\n		when(this.comprovanteVinculoDtoQueryCommand.execute(matriculaId))\n				.thenReturn(comprovanteVinculoDto);\n\n		var result = this.comprovanteVinculoService.generateComprovanteVinculo(matriculaId);\n\n		assertThat(result).isNotNull();\n		assertThat(result.getMatriculaId()).isEqualTo(matriculaId);\n		assertThat(result.getHash()).isEqualTo(hash);\n\n		verify(this.comprovanteVinculoDtoQueryCommand).execute(matriculaId);\n		verifyNoInteractions(this.hashValidadorExistsQueryCommand);\n		verifyNoInteractions(this.validadorHashSaveCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculo é bem sucedido""\n			+ "" e não houveram interações com hashValidadorExistsQueryCommand e validadorHashSaveCommand quando o vínculo não existe"")\n	void generateComprovanteVinculoWhenVinculoNotExistsExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n\n		when(this.comprovanteVinculoDtoQueryCommand.execute(matriculaId))\n				.thenReturn(null);\n\n		var result = this.comprovanteVinculoService.generateComprovanteVinculo(matriculaId);\n\n		assertThat(result).isNull();\n\n		verify(this.comprovanteVinculoDtoQueryCommand).execute(matriculaId);\n		verifyNoInteractions(this.hashValidadorExistsQueryCommand);\n		verifyNoInteractions(this.validadorHashSaveCommand);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mockStatic;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.MockitoAnnotations.openMocks;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.slf4j.LoggerFactory;\nimport org.thymeleaf.ITemplateEngine;\nimport org.thymeleaf.context.Context;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.CpfFormatter;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.QRCodeGenerator;\nimport br.ufsc.bridge.jornadaestudante.common.utils.DocumentResourceUtils;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\nimport ch.qos.logback.classic.Logger;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.core.read.ListAppender;\n\npublic class ComprovanteVinculoBuilderTest {\n\n	private static final String BASE_64 = ""data:image/png;base64,"";\n	private static final Locale PT_BR = new Locale(""pt"", ""BR"");\n\n	private final BridgeFaker faker = new BridgeFaker();\n	private ComprovanteVinculoBuilder comprovanteVinculoBuilder;\n	@Mock private ITemplateEngine templateEngine;\n\n	@BeforeEach\n	void setup() {\n		openMocks(this);\n		this.comprovanteVinculoBuilder = spy(new ComprovanteVinculoBuilder(this.templateEngine));\n	}\n\n	@Test\n	@DisplayName(""Os métodos derivados de generatePdfComprovanteVinculo devem ser chamados com os argumentos esperados"")\n	void generatePdfComprovanteVinculoExpectCorrectDerivedCalls() {\n		var vinculoDto = new ComprovanteVinculoDto();\n		var context = new Context();\n		var processedHTML = ""<div>teste</div>"";\n		var templateString = ""comprovanteVinculo/template_comprovante_vinculo.html"";\n\n		doReturn(context)\n				.when(this.comprovanteVinculoBuilder)\n				.buildContext(vinculoDto);\n\n		when(this.templateEngine.process(templateString, context))\n				.thenReturn(processedHTML);\n\n		var resource = this.comprovanteVinculoBuilder.generatePdfComprovanteVinculo(vinculoDto);\n\n		assertThat(resource).isNotNull();\n\n		verify(this.comprovanteVinculoBuilder).buildContext(vinculoDto);\n		verify(this.templateEngine).process(templateString, context);\n	}\n\n	@Test\n	@DisplayName(""Deve criar o contexto com os campos seguindo as regras de negócio"")\n	void buildContextExpectCorrectContextBuilt() {\n		var vinculoDto = new ComprovanteVinculoDto();\n		vinculoDto.setCpfEstudante(this.faker.cpf());\n		vinculoDto.setNomeInstituicao(this.faker.university().name());\n		vinculoDto.setNomeCurso(this.faker.educator().course());\n		vinculoDto.setHash(this.faker.hashHexadecimal());\n		vinculoDto.setNomeEstudante(this.faker.name().fullName());\n		vinculoDto.setNomeSocial(this.faker.name().firstName());\n		var qrcode = this.faker.lorem().characters();\n		var dtEmissao = LocalDate.now();\n		var anoVigente = dtEmissao.getYear();\n		var dtEmissaoFormatted = dtEmissao.format(DateTimeFormatter.ofPattern(""dd 'de' MMMM 'de' yyyy"").withLocale(PT_BR));\n\n		doReturn(qrcode)\n				.when(this.comprovanteVinculoBuilder)\n				.buildQrCode(vinculoDto.getHash());\n\n		var context = this.comprovanteVinculoBuilder.buildContext(vinculoDto);\n\n		assertThat(context.getVariable(""cpfEstudante"")).isEqualTo(CpfFormatter.mask(vinculoDto.getCpfEstudante()));\n		assertThat(context.getVariable(""nomeEstudante"")).isEqualTo(vinculoDto.getNomeEstudante());\n		assertThat(context.getVariable(""nomeSocial"")).isEqualTo(vinculoDto.getNomeSocial());\n		assertThat(context.getVariable(""nomeCurso"")).isEqualTo(vinculoDto.getNomeCurso());\n		assertThat(context.getVariable(""nomeInstituicao"")).isEqualTo(vinculoDto.getNomeInstituicao());\n		assertThat(context.getVariable(""anoVigente"")).isNotNull();\n		assertThat(context.getVariable(""anoVigente"")).isEqualTo(anoVigente);\n		assertThat(context.getVariable(""dataEmissao"")).isNotNull();\n		assertThat(context.getVariable(""dataEmissao"")).isEqualTo(dtEmissaoFormatted);\n		assertThat(context.getVariable(""qrcode"")).isEqualTo(qrcode);\n		assertThat(context.getVariable(""hash"")).isEqualTo(vinculoDto.getHash());\n		assertThat(context.getVariable(""brasao"")).asString().contains(BASE_64);\n		assertThat(context.getVariable(""logo_min"")).asString().contains(BASE_64);\n		assertThat(context.getVariable(""logo_cve"")).asString().contains(BASE_64);\n\n		verify(this.comprovanteVinculoBuilder).buildQrCode(vinculoDto.getHash());\n	}\n\n	@Test\n	@DisplayName(""Deve criar o contexto sem erros de carregamento de imagem"")\n	void buildContextExpectNoLoadImagesErrors() {\n		var vinculoDto = new ComprovanteVinculoDto();\n		vinculoDto.setCpfEstudante(this.faker.cpf());\n		vinculoDto.setHash(this.faker.hashHexadecimal());\n\n		doReturn(this.faker.lorem().characters())\n				.when(this.comprovanteVinculoBuilder)\n				.buildQrCode(vinculoDto.getHash());\n\n		var logs = new ListAppender<ILoggingEvent>();\n		var logger = (Logger) LoggerFactory.getLogger(DocumentResourceUtils.class);\n		logger.addAppender(logs);\n		logs.start();\n\n		this.comprovanteVinculoBuilder.buildContext(vinculoDto);\n\n		assertThat(logs.list).isEmpty();\n		verify(this.comprovanteVinculoBuilder).buildQrCode(vinculoDto.getHash());\n	}\n\n	@Test\n	@DisplayName(""Builder do QRCodeGenerator deve ser invocado 1 vez"")\n	void buildQrCodeExpectInvoqueQRCodeGeneratorOnce() {\n		var hash = this.faker.hashHexadecimal();\n		var url = this.faker.randomHTTPUrl();\n		var urlParam = url + ""?codigoValidacao="" + hash;\n\n		when(this.comprovanteVinculoBuilder.getUrl()).thenReturn(url);\n		var qrCodeGeneratorMocked = mockStatic(QRCodeGenerator.class);\n		qrCodeGeneratorMocked.when(() -> QRCodeGenerator.buildQrCodeBase64(urlParam)).thenReturn(any());\n\n		this.comprovanteVinculoBuilder.buildQrCode(hash);\n\n		qrCodeGeneratorMocked.verify((() -> QRCodeGenerator.buildQrCodeBase64(urlParam)), times(1));\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model;\n\nimport lombok.Data;\n\n@Data\npublic class ComprovanteVinculoInfoITDto {\n\n    private String nomeEstudante;\n    private String cpfEstudante;\n    private String nomeInstituicao;\n    private String nomeCurso;\n    private String qrCode;\n    private String codigoValidacao;\n    private String urlValidador;\n\n}"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.CURSANDO;\nimport static java.util.Optional.ofNullable;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.ZonedDateTime;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.converter.CpfOcultConverter;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\nimport br.ufsc.bridge.jornadaestudante.model.Instituicao;\nimport br.ufsc.bridge.jornadaestudante.model.Matricula;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass VinculoMatriculaQueryCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	private final CpfOcultConverter cpfOcultConverter = new CpfOcultConverter();\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n	@Autowired private VinculoMatriculaQueryCommand vinculoMatriculaQueryCommand;\n	private Curso curso;\n	private Estudante estudante;\n	private Instituicao instituicao;\n	private Matricula matricula;\n	private SistemaOrigemRefEnum sistemaOrigem;\n\n	private void createCurso() {\n		this.instituicao = this.instituicaoFactory.createRandom();\n		this.sistemaOrigem = SistemaOrigemRefEnum.getById(this.instituicao.getSistemaOrigemInstituicao());\n		this.curso = this.cursoFactory.create(this.sistemaOrigem, c -> c.instituicaoId.set(this.instituicao.getId()));\n	}\n\n	private void createMatricula(Integer situacaoVinculoId) {\n		this.estudante = this.estudanteFactory.createRandom();\n		this.matricula = this.matriculaFactory.create(this.sistemaOrigem, m -> {\n			m.estudanteId.set(this.estudante.getId());\n			m.cursoId.set(this.curso.getId());\n			m.situacaoVinculoId.set(situacaoVinculoId);\n		});\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso as informações de vínculo quando o estudante possui nome social"")\n	void executeWhenEstudanteWithNomeSocialExpectSuccess() {\n		this.createCurso();\n		this.createMatricula(CURSANDO.getId());\n\n		var result = this.vinculoMatriculaQueryCommand.execute(this.matricula.getHashValidador());\n\n		assertThat(result.getNome()).isEqualTo(ofNullable(this.estudante.getNomeSocial()).orElse(this.estudante.getNomeCivil()));\n		assertThat(result.getCpf()).isEqualTo(this.cpfOcultConverter.convert(this.estudante.getCpf()));\n		assertThat(result.getNomeInstituicao()).isEqualTo(this.instituicao.getNome());\n		assertThat(result.getNomeCurso()).isEqualTo(this.curso.getNome());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso as informações de vínculo quando o estudante não possui nome social"")\n	void executeWhenEstudanteWithoutNomeSocialExpectSuccess() {\n		this.createCurso();\n		var estudante = this.estudanteFactory.create(e -> e.nomeSocial.set(null));\n		var matricula = this.matriculaFactory.create(this.sistemaOrigem, m -> {\n			m.estudanteId.set(estudante.getId());\n			m.cursoId.set(this.curso.getId());\n			m.situacaoVinculoId.set(CURSANDO.getId());\n		});\n\n		var result = this.vinculoMatriculaQueryCommand.execute(matricula.getHashValidador());\n\n		assertThat(result.getNome()).isEqualTo(estudante.getNomeCivil());\n		assertThat(result.getCpf()).isEqualTo(this.cpfOcultConverter.convert(estudante.getCpf()));\n		assertThat(result.getNomeInstituicao()).isEqualTo(this.instituicao.getNome());\n		assertThat(result.getNomeCurso()).isEqualTo(this.curso.getNome());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando não existir o hash"")\n	void executeWhenHashNotExistsExpectNull() {\n		this.createCurso();\n		this.matriculaFactory.create(this.sistemaOrigem, m -> {\n			m.cursoId.set(this.curso.getId());\n			m.situacaoVinculoId.set(CURSANDO.getId());\n			m.hashValidador.set(null);\n		});\n\n		var result = this.vinculoMatriculaQueryCommand.execute(this.faker.hashHexadecimal());\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando o hash não for igual a nenhuma matrícula"")\n	void executeWhenHashNotEqualAnyMatriculaInDbExpectNull() {\n		this.createCurso();\n		this.createMatricula(CURSANDO.getId());\n\n		var result = this.vinculoMatriculaQueryCommand.execute(this.faker.hashHexadecimal());\n\n		assertThat(result).isNull();\n	}\n\n	/*\n	TODO: Adicionar posteriomente os seguintes testes de datas:\n	 1) ExpectSuccess se a data de atualização for ano passado e a data atual é até o último dia de março;\n	 2) ExpectNull se a data de atualização for ano passado e a data atual é a partir do primeiro dia de abril.\n	*/\n	@Test\n	@DisplayName(""Deve retornar nulo quando a data de atualização for inválida"")\n	void executeWhenDataAtualizacaoIsInvalidExpectNull() {\n		this.createCurso();\n		var matricula = this.matriculaFactory.create(this.sistemaOrigem, m -> {\n			m.cursoId.set(this.curso.getId());\n			m.situacaoVinculoId.set(CURSANDO.getId());\n			m.dataAtualizacao.set(ZonedDateTime.now().minusYears(2).toInstant());\n		});\n\n		var result = this.vinculoMatriculaQueryCommand.execute(matricula.getHashValidador());\n\n		assertThat(result).isNull();\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoVinculoRefEnum.class,\n			names = { ""CURSANDO"" },\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar nulo quando a situação da matrícula for diferente de cursando"")\n	void executeWhenSituacaoNotCursandoExpectNull(SituacaoVinculoRefEnum situacaoVinculo) {\n		this.createCurso();\n		this.createMatricula(situacaoVinculo.getId());\n\n		var result = this.vinculoMatriculaQueryCommand.execute(this.matricula.getHashValidador());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Matricula;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass ValidadorHashSaveCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private DAO dao;\n	@Autowired private MatriculaFactory matriculaFactory;\n	@Autowired private ValidadorHashSaveCommand validadorHashSaveCommand;\n\n	@Test\n	@DisplayName(""Verifica se o hash gerado é igual ao que foi salvo"")\n	void executeSaveExpectSameHash() {\n		var matriculaInDb = this.matriculaFactory.createRandom();\n		var hashGenerated = this.faker.hashHexadecimal();\n\n		this.validadorHashSaveCommand.execute(matriculaInDb.getId(), hashGenerated);\n\n		var hashPersisted = this.dao.getReference(Matricula.class, matriculaInDb.getId()).getHashValidador();\n\n		assertThat(hashPersisted).isEqualTo(hashGenerated);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.QRCodeGenerator.buildQrCodeBase64;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\n@SpringJUnit5Test\nclass ComprovanteVinculoInfoDtoFillCommandTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Value(""${bridge.comprovanteVinculo.validador.url:localhost}"")\n	private String url;\n	@Autowired private ComprovanteVinculoInfoDtoFillCommand comprovanteVinculoInfoDtoFillCommand;\n\n	private ComprovanteVinculoDto createComprovanteVinculoDto(Boolean hasNomeSocial) {\n		var comprovanteVinculoDto = new ComprovanteVinculoDto();\n		comprovanteVinculoDto.setMatriculaId(this.faker.random().nextLong());\n		comprovanteVinculoDto.setCpfEstudante(this.faker.cpf());\n		comprovanteVinculoDto.setNomeInstituicao(this.faker.university().name());\n		comprovanteVinculoDto.setNomeCurso(this.faker.educator().course());\n		comprovanteVinculoDto.setHash(this.faker.hashHexadecimal());\n		comprovanteVinculoDto.setNomeEstudante(this.faker.name().fullName());\n		comprovanteVinculoDto.setNomeSocial(hasNomeSocial ? this.faker.name().firstName() : null);\n		return comprovanteVinculoDto;\n	}\n\n	@Test\n	@DisplayName(""Verifica se as informações do comprovante de vínculo foram preenchidas corretamente quando o estudante não possui nome social"")\n	void executeWithoutNomeSocialExpectSuccess() {\n		var comprovanteVinculoDto = this.createComprovanteVinculoDto(Boolean.FALSE);\n\n		var result = this.comprovanteVinculoInfoDtoFillCommand.execute(comprovanteVinculoDto);\n\n		assertThat(result.getCpfEstudante()).isEqualTo(comprovanteVinculoDto.getCpfEstudante());\n		assertThat(result.getNomeInstituicao()).isEqualTo(comprovanteVinculoDto.getNomeInstituicao());\n		assertThat(result.getNomeCurso()).isEqualTo(comprovanteVinculoDto.getNomeCurso());\n		assertThat(result.getQrCode()).isEqualTo(buildQrCodeBase64(this.url + ""?codigoValidacao="" + comprovanteVinculoDto.getHash()));\n		assertThat(result.getCodigoValidacao()).isEqualTo(comprovanteVinculoDto.getHash());\n		assertThat(result.getUrlValidador()).isEqualTo(this.url);\n		assertThat(result.getNomeEstudante()).isEqualTo(comprovanteVinculoDto.getNomeEstudante());\n	}\n\n	@Test\n	@DisplayName(""Verifica se as informações do comprovante de vínculo foram preenchidas corretamente quando o estudante possui nome social"")\n	void executeWithNomeSocialExpectSuccess() {\n		var comprovanteVinculoDto = this.createComprovanteVinculoDto(Boolean.TRUE);\n\n		var result = this.comprovanteVinculoInfoDtoFillCommand.execute(comprovanteVinculoDto);\n\n		assertThat(result.getCpfEstudante()).isEqualTo(comprovanteVinculoDto.getCpfEstudante());\n		assertThat(result.getNomeInstituicao()).isEqualTo(comprovanteVinculoDto.getNomeInstituicao());\n		assertThat(result.getNomeCurso()).isEqualTo(comprovanteVinculoDto.getNomeCurso());\n		assertThat(result.getQrCode()).isEqualTo(buildQrCodeBase64(this.url + ""?codigoValidacao="" + comprovanteVinculoDto.getHash()));\n		assertThat(result.getCodigoValidacao()).isEqualTo(comprovanteVinculoDto.getHash());\n		assertThat(result.getUrlValidador()).isEqualTo(this.url);\n		assertThat(result.getNomeEstudante()).isEqualTo(comprovanteVinculoDto.getNomeSocial());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass HashValidadorExistsQueryCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private MatriculaFactory matriculaFactory;\n	@Autowired private HashValidadorExistsQueryCommand hashValidadorExistsQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar verdadeiro se o hash referenciado corresponder a uma matrícula"")\n	void executeWhenHasHashInDbExpectTrue() {\n		var matricula = this.matriculaFactory.createRandom();\n\n		var result = this.hashValidadorExistsQueryCommand.execute(matricula.getHashValidador());\n\n		assertThat(result).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar falso se o hash referenciado não corresponder a uma matrícula"")\n	void executeWhenHashNotExistsInDbExpectFalse() {\n		this.matriculaFactory.create(m -> m.hashValidador.set(null));\n\n		var result = this.hashValidadorExistsQueryCommand.execute(this.faker.hashHexadecimal());\n\n		assertThat(result).isFalse();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.CURSANDO;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.ZonedDateTime;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\nimport br.ufsc.bridge.jornadaestudante.model.Instituicao;\nimport br.ufsc.bridge.jornadaestudante.model.Matricula;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass ComprovanteVinculoDtoQueryCommandIntegrationTest {\n\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n	@Autowired private ComprovanteVinculoDtoQueryCommand comprovanteVinculoDtoQueryCommand;\n	private Curso curso;\n	private Estudante estudante;\n	private Instituicao instituicao;\n	private Matricula matricula;\n	private SistemaOrigemRefEnum sistemaOrigem;\n\n	private void createCurso() {\n		this.instituicao = this.instituicaoFactory.createRandom();\n		this.sistemaOrigem = SistemaOrigemRefEnum.getById(this.instituicao.getSistemaOrigemInstituicao());\n		this.curso = this.cursoFactory.create(this.sistemaOrigem, c -> c.instituicaoId.set(this.instituicao.getId()));\n	}\n\n	private void createMatricula(Integer situacaoVinculoId) {\n		this.estudante = this.estudanteFactory.createRandom();\n		this.matricula = this.matriculaFactory.create(this.sistemaOrigem, m -> {\n			m.estudanteId.set(this.estudante.getId());\n			m.cursoId.set(this.curso.getId());\n			m.situacaoVinculoId.set(situacaoVinculoId);\n		});\n	}\n\n	@Test\n	@DisplayName(""Deve retornar os dados da matrícula e do estudante para preenchimento do comprovante de vínculo"")\n	void executeWhenHasMatriculaInDbExpectSuccess() {\n		this.createCurso();\n		this.createMatricula(CURSANDO.getId());\n\n		var result = this.comprovanteVinculoDtoQueryCommand.execute(this.matricula.getId());\n\n		assertThat(result.getMatriculaId()).isEqualTo(this.matricula.getId());\n		assertThat(result.getHash()).isEqualTo(this.matricula.getHashValidador());\n		assertThat(result.getCpfEstudante()).isEqualTo(this.estudante.getCpf());\n		assertThat(result.getNomeEstudante()).isEqualTo(this.estudante.getNomeCivil());\n		assertThat(result.getNomeSocial()).isEqualTo(this.estudante.getNomeSocial());\n		assertThat(result.getNomeCurso()).isEqualTo(this.curso.getNome());\n		assertThat(result.getNomeInstituicao()).isEqualTo(this.instituicao.getNome());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando não existir a matrícula"")\n	void executeWhenEmptyDbExpectNull() {\n		var result = this.comprovanteVinculoDtoQueryCommand.execute(new Random().nextLong());\n\n		assertThat(result).isNull();\n	}\n\n	/*\n	TODO: Adicionar posteriomente os seguintes testes de datas:\n	 1) ExpectSuccess se a data de atualização for ano passado e a data atual é até o último dia de março;\n	 2) ExpectNull se a data de atualização for ano passado e a data atual é a partir do primeiro dia de abril.\n	*/\n	@Test\n	@DisplayName(""Deve retornar nulo quando a data de atualização for inválida"")\n	void executeWhenDataAtualizacaoIsInvalidExpectNull() {\n		this.createCurso();\n		var matricula = this.matriculaFactory.create(m -> {\n			m.cursoId.set(this.curso.getId());\n			m.situacaoVinculoId.set(CURSANDO.getId());\n			m.dataAtualizacao.set(ZonedDateTime.now().minusYears(2).toInstant());\n		});\n\n		var result = this.comprovanteVinculoDtoQueryCommand.execute(matricula.getId());\n\n		assertThat(result).isNull();\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoVinculoRefEnum.class,\n			names = { ""CURSANDO"" },\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar nulo quando a situação da matrícula for diferente de cursando"")\n	void executeWhenSituacaoNotCursandoExpectNull(SituacaoVinculoRefEnum situacaoVinculo) {\n		this.createCurso();\n		this.createMatricula(situacaoVinculo.getId());\n\n		var result = this.comprovanteVinculoDtoQueryCommand.execute(this.matricula.getId());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QInstituicao.instituicao;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoITDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteResponsavelFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\nimport br.ufsc.bridge.jornadaestudante.model.Matricula;\nimport br.ufsc.bridge.jornadaestudante.model.QEstudante;\n\n@DatabaseTest\nclass ComprovanteVinculoControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""api/comprovante-vinculo"";\n	private Estudante estudante;\n	private Matricula matriculaEstudante;\n	@Autowired private DAO dao;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private EstudanteResponsavelFactory estudanteResponsavelFactory;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n\n	public void createMatriculaForEstudante() {\n		this.estudante = this.estudanteFactory.create(e -> e.nomeSocial.set(null));\n		this.matriculaEstudante = this.matriculaFactory.create(e -> {\n			e.estudanteId.set(this.estudante.getId());\n			e.situacaoVinculoId.set(SituacaoVinculoRefEnum.CURSANDO.getId());\n		});\n	}\n\n	@Test\n	@DisplayName(""Deve gerar com sucesso o template de comprovante do vínculo"")\n	void loadComprovanteVinculoExpectSuccess() {\n		this.createMatriculaForEstudante();\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(this.estudante)))\n				.get(BASE_URL + ""?matriculaId="" + this.matriculaEstudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.asByteArray();\n\n		assertThat(result).isNotNull();\n	}\n\n	@Test\n	@DisplayName(""Deve gerar com sucesso o template de comprovante do vínculo quando for gerado pelo responsável do estudante"")\n	void loadComprovanteVinculoByEstudanteResponsavelExpectSuccess() {\n		this.createMatriculaForEstudante();\n		var estudanteResponsavel = this.estudanteFactory.createRandom();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(this.estudante.getCpf());\n			s.cpfResponsavel.set(estudanteResponsavel.getCpf());\n		});\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudanteResponsavel)))\n				.get(BASE_URL + ""?matriculaId="" + this.matriculaEstudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.asByteArray();\n\n		assertThat(result).isNotNull();\n	}\n\n	@Test\n	@DisplayName(""Deve carregar com sucesso as informações do comprovante de vínculo"")\n	void loadComprovanteVinculoInfoExpectSuccess() {\n		this.createMatriculaForEstudante();\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(this.estudante)))\n				.get(BASE_URL + ""/info?matriculaId="" + this.matriculaEstudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getObject(RestAssuredConstants.BASE_PATH, ComprovanteVinculoInfoITDto.class);\n\n		var infoMatriculaInDb = this.dao.queryFactory()\n				.from(matricula)\n				.join(QEstudante.estudante).on(QEstudante.estudante.id.eq(matricula.estudanteId))\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.join(instituicao).on(instituicao.id.eq(curso.instituicaoId))\n				.where(matricula.estudanteId.eq(this.estudante.getId()))\n				.select(matricula.hashValidador, QEstudante.estudante.nomeCivil, QEstudante.estudante.cpf, curso.nome, instituicao.nome)\n				.fetchOne();\n\n		assertThat(result.getNomeEstudante()).isEqualTo(infoMatriculaInDb.get(QEstudante.estudante.nomeCivil));\n		assertThat(result.getCpfEstudante()).isEqualTo(infoMatriculaInDb.get(QEstudante.estudante.cpf));\n		assertThat(result.getNomeInstituicao()).isEqualTo(infoMatriculaInDb.get(instituicao.nome));\n		assertThat(result.getNomeCurso()).isEqualTo(infoMatriculaInDb.get(curso.nome));\n		assertThat(result.getQrCode()).isNotNull();\n		assertThat(result.getCodigoValidacao()).isEqualTo(infoMatriculaInDb.get(matricula.hashValidador));\n		assertThat(result.getUrlValidador()).isNotNull();\n	}\n\n	@Test\n	@DisplayName(""Deve carregar com sucesso as informações do comprovante de vínculo quando for solicitado pelo responsável do estudante"")\n	void loadComprovanteVinculoInfoByEstudanteResponsavelExpectSuccess() {\n		this.createMatriculaForEstudante();\n		var estudanteResponsavel = this.estudanteFactory.createRandom();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(this.estudante.getCpf());\n			s.cpfResponsavel.set(estudanteResponsavel.getCpf());\n		});\n\n		var result = given()\n				.header(AuthorizationUtils.withBearerAuthorization(this.jwtFactory.withEstudante(estudanteResponsavel)))\n				.get(BASE_URL + ""/info?matriculaId="" + this.matriculaEstudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getObject(RestAssuredConstants.BASE_PATH, ComprovanteVinculoInfoITDto.class);\n\n		var infoMatriculaInDb = this.dao.queryFactory()\n				.from(matricula)\n				.join(QEstudante.estudante).on(QEstudante.estudante.id.eq(matricula.estudanteId))\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.join(instituicao).on(instituicao.id.eq(curso.instituicaoId))\n				.where(matricula.estudanteId.eq(this.estudante.getId()))\n				.select(matricula.hashValidador, QEstudante.estudante.nomeCivil, QEstudante.estudante.cpf, curso.nome, instituicao.nome)\n				.fetchOne();\n\n		assertThat(result.getNomeEstudante()).isEqualTo(infoMatriculaInDb.get(QEstudante.estudante.nomeCivil));\n		assertThat(result.getCpfEstudante()).isEqualTo(infoMatriculaInDb.get(QEstudante.estudante.cpf));\n		assertThat(result.getNomeInstituicao()).isEqualTo(infoMatriculaInDb.get(instituicao.nome));\n		assertThat(result.getNomeCurso()).isEqualTo(infoMatriculaInDb.get(curso.nome));\n		assertThat(result.getQrCode()).isNotNull();\n		assertThat(result.getCodigoValidacao()).isEqualTo(infoMatriculaInDb.get(matricula.hashValidador));\n		assertThat(result.getUrlValidador()).isNotNull();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.doNothing;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service.ComprovanteVinculoService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator.EstudantePermissionAccess;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.security.exception.HttpForbidden;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\nimport br.ufsc.bridge.jornadaestudante.model.Matricula;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\nclass ComprovanteVinculoControllerTest {\n\n	private static final String BASE_URL = ""/api/comprovante-vinculo"";\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private MockMvc mockMvc;\n	@Autowired private ObjectMapper objectMapper;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private MatriculaFactory matriculaFactory;\n	@MockBean\n	@Autowired\n	private ComprovanteVinculoService comprovanteVinculoService;\n	@MockBean\n	@Autowired\n	private EstudantePermissionAccess permissionAccess;\n\n	record MatriculaRecord(Estudante estudante, Matricula matricula) {\n	}\n\n	private MatriculaRecord createMatricula() {\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(s -> s.estudanteId.set(estudante.getId()));\n		return new MatriculaRecord(estudante, matricula);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos do endpoint GET do comprovante de vínculo é bem sucedido"")\n	void showComprovanteVinculoExpectSuccess() throws Exception {\n		var matriculaRecord = this.createMatricula();\n		var resource = new ByteArrayResource(""teste"".getBytes());\n\n		doNothing()\n				.when(this.permissionAccess)\n				.checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n\n		when(this.comprovanteVinculoService.generateComprovanteVinculoPdf(matriculaRecord.matricula.getId()))\n				.thenReturn(resource);\n\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudante(matriculaRecord.estudante));\n		var getRequest = get(BASE_URL)\n				.queryParam(""matriculaId"", matriculaRecord.matricula.getId().toString())\n				.header(bearerAuth.getName(), bearerAuth.getValue());\n\n		var result = this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().is2xxSuccessful())\n				.andExpect(content().contentType(MediaType.APPLICATION_OCTET_STREAM))\n				.andReturn()\n				.getResponse();\n\n		assertThat(result.getContentAsByteArray()).isEqualTo(resource.getByteArray());\n		assertThat(result.getHeader(HttpHeaders.CONTENT_DISPOSITION)).contains(""filename=comprovante_vinculo_estudantil.pdf"");\n\n		verify(this.permissionAccess).checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n		verify(this.comprovanteVinculoService).generateComprovanteVinculoPdf(matriculaRecord.matricula.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint GET do comprovante de vínculo quando o token é inválido"")\n	void showComprovanteVinculoWhenInvalidTokenExpectUnauthorized() throws Exception {\n		var bearerAuth = withBearerAuthorization(""token-invalido"");\n		var getRequest = get(BASE_URL)\n				.queryParam(""matriculaId"", String.valueOf(this.faker.random().nextLong()))\n				.header(bearerAuth.getName(), bearerAuth.getValue());\n\n		this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.permissionAccess);\n		verifyNoInteractions(this.comprovanteVinculoService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento do service do endpoint GET do comprovante de vínculo quando o estudante não tem permissão"")\n	void showComprovanteVinculoWhenEstudanteHasNoPermissionExpectForbidden() throws Exception {\n		var matriculaRecord = this.createMatricula();\n\n		doThrow(HttpForbidden.class)\n				.when(this.permissionAccess)\n				.checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudante(matriculaRecord.estudante));\n		var getRequest = get(BASE_URL)\n				.queryParam(""matriculaId"", matriculaRecord.matricula.getId().toString())\n				.header(bearerAuth.getName(), bearerAuth.getValue());\n\n		this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().isForbidden());\n\n		verify(this.permissionAccess).checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n		verifyNoInteractions(this.comprovanteVinculoService);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma Bad Request quando o comprovante de vínculo não conseguiu ser gerado"")\n	void showComprovanteVinculoWhenNullResourceExpectBadRequest() throws Exception {\n		var matriculaRecord = this.createMatricula();\n\n		doNothing()\n				.when(this.permissionAccess)\n				.checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n\n		when(this.comprovanteVinculoService.generateComprovanteVinculoPdf(matriculaRecord.matricula.getId()))\n				.thenReturn(null);\n\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudante(matriculaRecord.estudante));\n		var getRequest = get(BASE_URL)\n				.queryParam(""matriculaId"", matriculaRecord.matricula.getId().toString())\n				.header(bearerAuth.getName(), bearerAuth.getValue());\n\n		this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().isBadRequest());\n\n		verify(this.permissionAccess).checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n		verify(this.comprovanteVinculoService).generateComprovanteVinculoPdf(matriculaRecord.matricula.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos do endpoint GET das informações do comprovante de vínculo é bem sucedido"")\n	void showComprovanteVinculoInfoExpectSuccess() throws Exception {\n		var matriculaRecord = this.createMatricula();\n		var comprovanteVinculoInfoDto = new ComprovanteVinculoInfoDto();\n		comprovanteVinculoInfoDto.setNomeEstudante(matriculaRecord.estudante.getNomeCivil());\n		comprovanteVinculoInfoDto.setCpfEstudante(matriculaRecord.estudante.getCpf());\n		comprovanteVinculoInfoDto.setNomeInstituicao(this.faker.university().name());\n		comprovanteVinculoInfoDto.setNomeCurso(this.faker.educator().course());\n		comprovanteVinculoInfoDto.setQrCode(this.faker.lorem().characters());\n		comprovanteVinculoInfoDto.setCodigoValidacao(this.faker.lorem().characters());\n		comprovanteVinculoInfoDto.setUrlValidador(this.faker.internet().url());\n\n		doNothing()\n				.when(this.permissionAccess)\n				.checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n\n		when(this.comprovanteVinculoService.generateComprovanteVinculoInfo(matriculaRecord.matricula.getId()))\n				.thenReturn(comprovanteVinculoInfoDto);\n\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudante(matriculaRecord.estudante));\n		var getRequest = get(BASE_URL + ""/info"")\n				.queryParam(""matriculaId"", matriculaRecord.matricula.getId().toString())\n				.header(bearerAuth.getName(), bearerAuth.getValue());\n\n		var result = this.mockMvc.perform(getRequest)\n				.andExpect(status().is2xxSuccessful())\n				.andExpect(content().contentType(MediaType.APPLICATION_JSON))\n				.andReturn()\n				.getResponse()\n				.getContentAsByteArray();\n\n		assertThat(new String(result, StandardCharsets.UTF_8)).isEqualTo(this.objectMapper.writeValueAsString(comprovanteVinculoInfoDto));\n\n		verify(this.permissionAccess).checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n		verify(this.comprovanteVinculoService).generateComprovanteVinculoInfo(matriculaRecord.matricula.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento dos métodos internos do endpoint GET das informações do comprovante de vínculo quando o token é inválido"")\n	void showComprovanteVinculoInfoWhenInvalidTokenExpectUnauthorized() throws Exception {\n		var bearerAuth = withBearerAuthorization(""token-invalido"");\n		var getRequest = get(BASE_URL + ""/info"")\n				.queryParam(""matriculaId"", String.valueOf(this.faker.random().nextLong()))\n				.header(bearerAuth.getName(), bearerAuth.getValue());\n\n		this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.permissionAccess);\n		verifyNoInteractions(this.comprovanteVinculoService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se não há acionamento do service do endpoint GET das informações do comprovante de vínculo quando o estudante não tem permissão"")\n	void showComprovanteVinculoInfoWhenEstudanteHasNoPermissionExpectForbidden() throws Exception {\n		var matriculaRecord = this.createMatricula();\n\n		doThrow(HttpForbidden.class)\n				.when(this.permissionAccess)\n				.checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n\n		var bearerAuth = withBearerAuthorization(this.jwtFactory.withEstudante(matriculaRecord.estudante));\n		var getRequest = get(BASE_URL + ""/info"")\n				.queryParam(""matriculaId"", matriculaRecord.matricula.getId().toString())\n				.header(bearerAuth.getName(), bearerAuth.getValue());\n\n		this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().isForbidden());\n\n		verify(this.permissionAccess).checkMatriculaPermission(matriculaRecord.estudante.getId(), matriculaRecord.matricula.getId());\n		verifyNoInteractions(this.comprovanteVinculoService);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.controller;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.VinculoMatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service.ComprovanteVinculoService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.recaptcha.util.RecaptchaGoogleValidator;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\nclass ValidacaoComprovanteVinculoControllerTest {\n\n	private static final String BASE_URL = ""/api/public/validacao-comprovante-vinculo"";\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private MockMvc mockMvc;\n	@Autowired private ObjectMapper objectMapper;\n	@Autowired\n	@MockBean\n	private ComprovanteVinculoService comprovanteVinculoService;\n	@Autowired\n	@MockBean\n	private RecaptchaGoogleValidator recaptchaGoogleValidator;\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos do endpoint GET do validador de comprovante de vínculo é bem sucedido"")\n	void showVinculoExpectSuccess() throws Exception {\n		var vinculoMatriculaDto = new VinculoMatriculaDto();\n		vinculoMatriculaDto.setNome(this.faker.name().fullName());\n		vinculoMatriculaDto.setCpf(this.faker.cpf());\n		vinculoMatriculaDto.setNomeInstituicao(this.faker.university().name());\n		vinculoMatriculaDto.setNomeCurso(this.faker.educator().course());\n\n		var hash = this.faker.hashHexadecimal();\n		var token = ""token-valido"";\n\n		when(this.recaptchaGoogleValidator.isValid(token))\n				.thenReturn(Boolean.TRUE);\n\n		when(this.comprovanteVinculoService.loadVinculoByHashValidador(hash))\n				.thenReturn(vinculoMatriculaDto);\n\n		var getRequest = get(BASE_URL)\n				.queryParam(""hash"", hash)\n				.queryParam(""token"", token);\n\n		var result = this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().is2xxSuccessful())\n				.andExpect(content().contentType(MediaType.APPLICATION_JSON))\n				.andReturn()\n				.getResponse()\n				.getContentAsByteArray();\n\n		assertThat(new String(result, StandardCharsets.UTF_8)).isEqualTo(this.objectMapper.writeValueAsString(vinculoMatriculaDto));\n\n		verify(this.recaptchaGoogleValidator).isValid(token);\n		verify(this.comprovanteVinculoService).loadVinculoByHashValidador(hash);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma Bad Request quando o token do recaptcha é inválido"")\n	void showVinculoWhenRecaptchaTokenIsInvalidExpectBadRequest() throws Exception {\n		var hash = this.faker.hashHexadecimal();\n		var token = ""token-invalido"";\n\n		when(this.recaptchaGoogleValidator.isValid(token))\n				.thenReturn(Boolean.FALSE);\n\n		var getRequest = get(BASE_URL)\n				.queryParam(""hash"", hash)\n				.queryParam(""token"", token);\n\n		this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().isBadRequest());\n\n		verify(this.recaptchaGoogleValidator).isValid(token);\n		verifyNoInteractions(this.comprovanteVinculoService);\n	}\n\n}\n"
factory,"package br.ufsc.bridge.jornadaestudante.backend.module.security;\n\nimport java.util.Map;\nimport java.util.function.Consumer;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.security.jwt.JwtHelper;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@Component\npublic class JWTFactory {\n\n	@Autowired \n	private EstudanteFactory estudanteFactory;\n	\n	@Autowired \n	private JwtHelper jwtHelper;\n\n	public String withEstudanteRandom() {\n		var estudante = this.estudanteFactory.createRandom();\n		return this.createJwtWithEstudante(estudante);\n	}\n\n	public String withEstudante(Consumer<EstudanteFactory.Spec> estudanteConsumer) {\n		var estudante = this.estudanteFactory.create(estudanteConsumer);\n		return this.createJwtWithEstudante(estudante);\n	}\n\n	public String withEstudante(Estudante estudante) {\n		return this.createJwtWithEstudante(estudante);\n	}\n\n	private String createJwtWithEstudante(Estudante estudante) {\n		return this.jwtHelper.createJwtForClaims(estudante.getId().toString(), Map.of());\n	}\n\n}\n"
factory,"package br.ufsc.bridge.jornadaestudante.backend.module.security;\n\nimport java.util.function.Consumer;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.factory.core.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.jornadaestudante.factory.core.DataFactoryInMemoryCreationStrategy;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@Component\npublic class PrincipalFactory {\n\n	private final EstudanteFactory estudanteFactory;\n\n	@Autowired\n	public PrincipalFactory(DataFactoryCreationStrategy creationStrategy) {\n		this.estudanteFactory = new EstudanteFactory(creationStrategy);\n	}\n\n	public PrincipalFactory() {\n		this(new DataFactoryInMemoryCreationStrategy());\n	}\n\n	public Jwt withEstudanteRandom() {\n		var estudante = this.estudanteFactory.createRandom();\n		return this.createJwtWithEstudante(estudante);\n	}\n\n	public Jwt withEstudante(Consumer<EstudanteFactory.Spec> estudanteConsumer) {\n		var estudante = this.estudanteFactory.create(estudanteConsumer);\n		return this.createJwtWithEstudante(estudante);\n	}\n\n	private Jwt createJwtWithEstudante(Estudante estudante) {\n		return Jwt.withTokenValue(""empty"")\n				.header(""alg"", ""none"")\n				.subject(estudante.getId().toString())\n				.build();\n	}\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.MockitoAnnotations.openMocks;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.CursoExistInMunicipioQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.CursoTurnoExistsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.DependenteIdListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.EstudanteIdBySolicitacaoDadosIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormDto;\nimport br.ufsc.bridge.jornadaestudante.model.SolicitacaoDadosEstudante;\n\nclass SolicitacaoDadosServiceTest {\n\n	private SolicitacaoDadosService solicitacaoDadosService;\n\n	@Mock private CursoExistInMunicipioQueryCommand cursoExistInMunicipioQueryCommand;\n	@Mock private CursoTurnoExistsQueryCommand cursoTurnoExistsQueryCommand;\n	@Mock private DependenteIdListQueryCommand dependenteIdListQueryCommand;\n	@Mock private EstudanteIdBySolicitacaoDadosIdQueryCommand estudanteIdBySolicitacaoDadosIdQueryCommand;\n	@Mock private SolicitacaoDadosEstudanteDeleteCommand solicitacaoDadosEstudantedDeleteCommand;\n	@Mock private SolicitacaoDadosEstudanteDtoListQueryCommand solicitacaoDadosEstudanteDtoListQueryCommand;\n	@Mock private SolicitacaoDadosEstudanteSaveCommand solicitacaoDadosEstudanteSaveCommand;\n\n	@BeforeEach\n	void setup() {\n		openMocks(this);\n		this.solicitacaoDadosService = new SolicitacaoDadosService(\n				this.cursoExistInMunicipioQueryCommand,\n				this.cursoTurnoExistsQueryCommand,\n				this.dependenteIdListQueryCommand,\n				this.estudanteIdBySolicitacaoDadosIdQueryCommand,\n				this.solicitacaoDadosEstudantedDeleteCommand,\n				this.solicitacaoDadosEstudanteDtoListQueryCommand,\n				this.solicitacaoDadosEstudanteSaveCommand\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve salvar a solicitação e retornar a mesma"")\n	void saveSolicitacaoDadosEstudanteExpectSuccess() {\n		var estudanteId = new Random().nextLong();\n		var solicitacaoForm = new SolicitacaoDadosEstudanteFormDto();\n		var solicitacao = new SolicitacaoDadosEstudante();\n\n		when(this.solicitacaoDadosEstudanteSaveCommand.save(solicitacaoForm, estudanteId, estudanteId)).thenReturn(solicitacao);\n\n		var result = this.solicitacaoDadosService.saveSolicitacaoDadosEstudante(solicitacaoForm, estudanteId, estudanteId);\n\n		assertThat(result).isEqualTo(solicitacaoForm);\n\n		verify(this.solicitacaoDadosEstudanteSaveCommand).save(solicitacaoForm, estudanteId, estudanteId);\n	}\n\n	@Test\n	@DisplayName(""Deve carregar uma lista das solicitações de um estudante"")\n	void loadSolicitacaoDadosEstudanteListExpectSuccess() {\n		var estudanteId = new Random().nextLong();\n		List<SolicitacaoDadosEstudanteDto> queryDtoList = Collections.singletonList(new SolicitacaoDadosEstudanteDto());\n\n		when(this.solicitacaoDadosEstudanteDtoListQueryCommand.execute(estudanteId)).thenReturn(queryDtoList);\n\n		List<SolicitacaoDadosEstudanteDto> result = this.solicitacaoDadosService.loadSolicitacaoDadosEstudanteList(estudanteId);\n\n		assertThat(result.get(0)).isEqualTo(queryDtoList.get(0));\n\n		verify(this.solicitacaoDadosEstudanteDtoListQueryCommand).execute(estudanteId);\n	}\n\n	@Test\n	@DisplayName(""Deve atualizar a solicitação e retornar a mesma"")\n	void updateSolicitacaoDadosEstudanteExpectSuccess() {\n		var estudanteId = new Random().nextLong();\n		var solicitacaoDadosId = new Random().nextLong();\n		var solicitacaoForm = new SolicitacaoDadosEstudanteFormDto();\n		var solicitacao = new SolicitacaoDadosEstudante();\n\n		when(this.solicitacaoDadosEstudanteSaveCommand.update(solicitacaoForm, estudanteId, solicitacaoDadosId)).thenReturn(solicitacao);\n\n		var result = this.solicitacaoDadosService.updateSolicitacaoDadosEstudante(solicitacaoForm, estudanteId, solicitacaoDadosId);\n\n		assertThat(result).isEqualTo(solicitacaoForm);\n\n		verify(this.solicitacaoDadosEstudanteSaveCommand).update(solicitacaoForm, estudanteId, solicitacaoDadosId);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar o identificador de um estudante referente a solicitação de dados"")\n	void loadEstudanteIdBySolicitacaoDadosIdExpectSuccess() {\n		var solicitacaoDadosId = new Random().nextLong();\n		var estudanteId = new Random().nextLong();\n\n		when(this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosId)).thenReturn(estudanteId);\n\n		var result = this.solicitacaoDadosService.loadEstudanteIdBySolicitacaoDadosId(solicitacaoDadosId);\n\n		assertThat(result).isEqualTo(estudanteId);\n\n		verify(this.estudanteIdBySolicitacaoDadosIdQueryCommand).execute(solicitacaoDadosId);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista de identificadores dos dependentes do estudante"")\n	void loadDependentesIdsExpectSuccess() {\n		var estudanteId = new Random().nextLong();\n		List<Long> queryDependenteList = Collections.singletonList(new Random().nextLong());\n\n		when(this.dependenteIdListQueryCommand.execute(estudanteId)).thenReturn(queryDependenteList);\n\n		List<Long> result = this.solicitacaoDadosService.loadDependentesIds(estudanteId);\n\n		assertThat(result.get(0)).isEqualTo(queryDependenteList.get(0));\n\n		verify(this.dependenteIdListQueryCommand).execute(estudanteId);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um booleano informando se o curso existe no município"")\n	void cursoExistsInMunicipioExpectSuccess() {\n		var cursoId = new Random().nextLong();\n		var municipioId = new Random().nextLong();\n		var booleanResult = new Random().nextBoolean();\n\n		when(this.cursoExistInMunicipioQueryCommand.execute(cursoId, municipioId)).thenReturn(booleanResult);\n\n		var result = this.solicitacaoDadosService.cursoExistsInMunicipio(cursoId, municipioId);\n\n		assertThat(result).isEqualTo(booleanResult);\n\n		verify(this.cursoExistInMunicipioQueryCommand).execute(cursoId, municipioId);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um booleano informando se o turno existe no curso"")\n	void turnoExistsInCursoExpectSuccess() {\n		var cursoId = new Random().nextLong();\n		var turnoId = new Random().nextInt();\n		var booleanResult = new Random().nextBoolean();\n\n		when(this.cursoTurnoExistsQueryCommand.execute(cursoId, turnoId)).thenReturn(booleanResult);\n\n		var result = this.solicitacaoDadosService.cursoTurnoExists(cursoId, turnoId);\n\n		assertThat(result).isEqualTo(booleanResult);\n\n		verify(this.cursoTurnoExistsQueryCommand).execute(cursoId, turnoId);\n	}\n\n	@Test\n	@DisplayName(""Deve remover a solicitacao de dados do estudante"")\n	void deleteSolicitacaoDadosEstudanteExpectSuccess() {\n		var solicitacaoDadosId = new Random().nextLong();\n\n		this.solicitacaoDadosService.deleteSolicitacaoDadosEstudante(solicitacaoDadosId);\n\n		verify(this.solicitacaoDadosEstudantedDeleteCommand).execute(solicitacaoDadosId);\n	}\n\n}\n"
dto,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\npublic class SolicitacaoDadosEstudanteFormITDto {\n\n	private Long cursoId;\n	private Long municipioId;\n	private Integer turnoId;\n	private Integer situacaoVinculoId;\n	private Integer dataAnoInicio;\n	private Integer dataAnoFim;\n\n	@Deprecated\n	private Long instituicaoId;\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.MSolicitacaoDadosEstudanteFormDto.meta;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.ANTERIOR_IGUAL_DATA_ATUAL;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.CAMPO_INVALIDO;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.CAMPO_NAO_ENCONTRADO_DB;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.INFO_NAO_ENCONTRADA_DB;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.NAO_DEVE_SER_PREENCHIDO;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.OPCAO_INVALIDA;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.PREENCHIMENTO_OBRIGATORIO;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.afterOrEqualFieldValidationMessage;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.validationMsgWithRelatedFields;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.CURSANDO;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.MATRICULA_TRANCADA;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.NAO_INFORMADO;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.time.LocalDate;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.database.SolicitacaoDadosEstudanteFormDtoFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.service.SolicitacaoDadosService;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.TurnoDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.solicitacaoDados.SolicitacaoDadosEstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.SolicitacaoDadosEstudante;\n\nimport com.github.javafaker.Faker;\n\nclass SolicitacaoDadosValidatorTest {\n\n	private final Faker faker = new Faker();\n	private final SolicitacaoDadosEstudanteFactory solicitacaoDadosEstudanteFactory = new SolicitacaoDadosEstudanteFactory();\n	private final SolicitacaoDadosEstudanteFormDtoFactory solicitacaoDadosEstudanteFormDtoFactory = new SolicitacaoDadosEstudanteFormDtoFactory();\n	private final TurnoDomainFactory turnoDomainFactory = new TurnoDomainFactory();\n	private DAO dao;\n	private SolicitacaoDadosValidator solicitacaoDadosValidator;\n	private SolicitacaoDadosService solicitacaoDadosService;\n\n	@BeforeEach\n	void setup() {\n		this.dao = mock(DAO.class);\n		this.solicitacaoDadosService = mock(SolicitacaoDadosService.class);\n		this.solicitacaoDadosValidator = new SolicitacaoDadosValidator(this.dao, this.solicitacaoDadosService);\n	}\n\n	@Test\n	@DisplayName(""Deve ser válido se o id da solicitação de dados existe no banco de dados"")\n	void solicitacaoDadosIdExistsInDbExpectSuccess() {\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.createRandom();\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.create(s -> {\n			s.cursoId.set(solicitacaoDadosEstudante.getCursoId());\n			s.municipioId.set(solicitacaoDadosEstudante.getMunicipioId());\n		});\n\n		when(this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId()))\n				.thenReturn(solicitacaoDadosEstudante);\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, solicitacaoDadosEstudante.getId());\n\n		assertThat(validator.isValid()).isTrue();\n		verify(this.dao).find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId());\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido se o id da solicitação de dados não existe no banco de dados"")\n	void solicitacaoDadosIdNotExistsInDbExpectNotFoundError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createRandom();\n		var solicitacaoDadosId = this.faker.random().nextLong();\n\n		when(this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosId)).thenReturn(null);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, solicitacaoDadosId);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(CAMPO_NAO_ENCONTRADO_DB);\n		verify(this.dao).find(SolicitacaoDadosEstudante.class, solicitacaoDadosId);\n	}\n\n	@Test\n	@DisplayName(""Deve ser válido se o id da solicitação de dados for nulo"")\n	void solicitacaoDadosIdNullDbExpectSuccess() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createRandom();\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isTrue();\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso o id do curso seja nulo"")\n	void dtoWithoutCursoIdExpectNotNullError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.cursoId.set(null)\n		);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{cursoId=%s}"".formatted(PREENCHIMENTO_OBRIGATORIO));\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso o id do município seja nulo"")\n	void dtoWithoutMunicipioIdExpectNotNullError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.municipioId.set(null)\n		);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{municipioId=%s}"".formatted(PREENCHIMENTO_OBRIGATORIO));\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso o curso não seja ofertado no município"")\n	void checkCursoIsNotOfferedInMunicipioExpectNotFoundError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createRandom();\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(false);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{cursoId=%s}""\n				.formatted(validationMsgWithRelatedFields(INFO_NAO_ENCONTRADA_DB, meta.municipioId)));\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser válido caso o turno seja ofertado pelo curso"")\n	void dtoWithTurnoOfferedByCursoExpectSuccess() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.create(s -> s.turnoId.set(this.turnoDomainFactory.createRandom().getId()));\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n		when(this.solicitacaoDadosService.cursoTurnoExists(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getTurnoId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isTrue();\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		verify(this.solicitacaoDadosService).cursoTurnoExists(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getTurnoId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso o turno não seja ofertado pelo curso"")\n	void dtoWithTurnoNotOfferedByCursoExpectNotFoundError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.create(s -> s.turnoId.set(this.turnoDomainFactory.createRandom().getId()));\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n		when(this.solicitacaoDadosService.cursoTurnoExists(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getTurnoId()))\n				.thenReturn(false);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{cursoId=%s}""\n				.formatted(validationMsgWithRelatedFields(INFO_NAO_ENCONTRADA_DB, meta.turnoId)));\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		verify(this.solicitacaoDadosService).cursoTurnoExists(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getTurnoId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a situação do vínculo seja nulo"")\n	void dtoWithoutSituacaoVinculoIdExpectNotNullError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.situacaoVinculoId.set(null)\n		);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{situacaoVinculoId=%s}"".formatted(PREENCHIMENTO_OBRIGATORIO));\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoVinculoRefEnum.class,\n			names = {\n					""NAO_INFORMADO"",\n					""CURSANDO"",\n					""MATRICULA_TRANCADA""\n			},\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve ser válido caso a situação do vínculo seja válida e quando há data de ano fim"")\n	void dtoWithValidSituacaoVinculoIdAndDataAnoFimExpectSuccess(SituacaoVinculoRefEnum situacaoVinculoRefEnum) {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.situacaoVinculoId.set(situacaoVinculoRefEnum.getId())\n		);\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isTrue();\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@ParameterizedTest\n	@EnumSource(value = SituacaoVinculoRefEnum.class,\n			names = {\n					""NAO_INFORMADO"",\n					""DESVINCULADO_CURSO"",\n					""TRANSFERIDO_OUTRO_CURSO_MESMA_IES"",\n					""FORMADO"",\n					""FALECIDO""\n			},\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve ser válido caso a situação do vínculo seja válida e quando não há data de ano fim"")\n	void dtoWithValidSituacaoVinculoIdAndWithoutDataAnoFimExpectSuccess(SituacaoVinculoRefEnum situacaoVinculoRefEnum) {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithoutDataAnoFim(s ->\n				s.situacaoVinculoId.set(situacaoVinculoRefEnum.getId())\n		);\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isTrue();\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a situação do vínculo seja inválida"")\n	void dtoWithInvalidSituacaoVinculoIdExpectInvalidOptionError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.create(s -> s.situacaoVinculoId.set(NAO_INFORMADO.getId()));\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{situacaoVinculoId=%s}"".formatted(OPCAO_INVALIDA));\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a situação do vínculo não existe"")\n	void dtoWithNotExistentSituacaoVinculoIdExpectInvalidOptionError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.create(s -> s.situacaoVinculoId.set(new Random().nextInt()));\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{situacaoVinculoId=%s}"".formatted(OPCAO_INVALIDA));\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a data de ano início seja nulo"")\n	void dtoWithoutDataAnoInicioExpectNotNullError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.dataAnoInicio.set(null)\n		);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{dataAnoInicio=%s}"".formatted(PREENCHIMENTO_OBRIGATORIO));\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a data de ano início seja inválida"")\n	void dtoWithInvalidDataAnoInicioExpectInvalidFieldError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.create(s ->\n				s.dataAnoInicio.set(this.faker.number().numberBetween(0, 1899))\n		);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{dataAnoInicio=%s}"".formatted(CAMPO_INVALIDO));\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a data de ano início seja posterior à data atual"")\n	void dtoWithDataAnoInicioAfterDataAtualExpectBeforeOrEqualError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.create(s ->\n				s.dataAnoInicio.set(LocalDate.now().getYear() + 1)\n		);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{dataAnoInicio=%s}"".formatted(ANTERIOR_IGUAL_DATA_ATUAL));\n	}\n\n	@Test\n	@DisplayName(""Deve ser válido caso a data de ano início seja anterior à data do ano fim"")\n	void dtoWithDataAnoInicioBeforeDataAnoFimExpectSuccess() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s -> {\n			s.dataAnoInicio.set(LocalDate.now().getYear() - 1);\n			s.dataAnoFim.set(LocalDate.now().getYear());\n		});\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isTrue();\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a data de ano fim seja posterior à data atual"")\n	void dtoWithDataAnoFimAfterDataAtualExpectBeforeOrEqualError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.dataAnoFim.set(LocalDate.now().getYear() + 1)\n		);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{dataAnoFim=%s}"".formatted(ANTERIOR_IGUAL_DATA_ATUAL));\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a data de ano fim seja inválida"")\n	void dtoWithInvalidDataAnoFimExpectInvalidFieldError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.dataAnoFim.set(this.faker.number().numberBetween(0, 1899))\n		);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{dataAnoFim=%s}"".formatted(CAMPO_INVALIDO));\n	}\n\n	@Test\n	@DisplayName(""Deve ser válido caso a data de ano fim seja igual à data de ano início"")\n	void dtoWithDataAnoFimEqualDataAnoInicioExpectSuccess() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s -> {\n			s.dataAnoInicio.set(LocalDate.now().getYear());\n			s.dataAnoFim.set(LocalDate.now().getYear());\n		});\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isTrue();\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a data de ano fim seja anterior à data de ano início"")\n	void dtoWithDataAnoFimBeforeDataAnoInicioExpectAfterOrEqualFieldError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s -> {\n			s.dataAnoInicio.set(LocalDate.now().getYear());\n			s.dataAnoFim.set(LocalDate.now().getYear() - 1);\n		});\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{dataAnoFim=%s}"".formatted(afterOrEqualFieldValidationMessage(meta.dataAnoInicio)));\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a data de ano fim for preenchida e a situação do vínculo for cursando"")\n	void dtoWithDataAnoFimAndSituacaoVinculoCursandoExpectMustNotBeFilledError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.situacaoVinculoId.set(CURSANDO.getId())\n		);\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{dataAnoFim=%s}"".formatted(NAO_DEVE_SER_PREENCHIDO));\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso a data de ano fim for preenchida e a situação do vínculo for matrícula trancada"")\n	void dtoWithDataAnoFimAndSituacaoVinculoMatriculaTrancadaExpectMustNotBeFilledError() {\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.situacaoVinculoId.set(MATRICULA_TRANCADA.getId())\n		);\n\n		when(this.solicitacaoDadosService.cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId()))\n				.thenReturn(true);\n\n		var validator = this.solicitacaoDadosValidator.validate(solicitacaoDadosEstudanteFormDto, null);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).hasToString(""{dataAnoFim=%s}"".formatted(NAO_DEVE_SER_PREENCHIDO));\n		verify(this.solicitacaoDadosService).cursoExistsInMunicipio(solicitacaoDadosEstudanteFormDto.getCursoId(),\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.SOLICITACAO_DADOS_SEM_PERMISSAO;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.service.SolicitacaoDadosService;\nimport br.ufsc.bridge.jornadaestudante.backend.security.exception.HttpForbidden;\nimport br.ufsc.bridge.jornadaestudante.backend.security.exception.HttpUnauthorized;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.solicitacaoDados.SolicitacaoDadosEstudanteFactory;\n\nclass SolicitacaoDadosPermissionAccessTest {\n\n	private EstudanteFactory estudanteFactory = new EstudanteFactory();\n	private SolicitacaoDadosEstudanteFactory solicitacaoDadosEstudanteFactory = new SolicitacaoDadosEstudanteFactory();\n	private SolicitacaoDadosService solicitacaoDadosService;\n	private SolicitacaoDadosPermissionAccess solicitacaoDadosPermissionAccess;\n\n	@BeforeEach\n	void setup() {\n		this.solicitacaoDadosService = mock(SolicitacaoDadosService.class);\n		this.solicitacaoDadosPermissionAccess = new SolicitacaoDadosPermissionAccess(this.solicitacaoDadosService);\n	}\n\n	@Test()\n	void checkEstudantePermissionWithoutDependenteSuccess() {\n		Long estudanteId = this.estudanteFactory.createRandom().getId();\n\n		assertDoesNotThrow(() -> this.solicitacaoDadosPermissionAccess.checkEstudantePermission(estudanteId, null));\n	}\n\n	@Test()\n	void checkEstudantePermissionWithDependenteSuccess() {\n		Long responsavelId = this.estudanteFactory.createRandom().getId();\n		Long dependenteId = this.estudanteFactory.createRandom().getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(responsavelId)).thenReturn(new ArrayList<>(List.of(dependenteId)));\n\n		assertDoesNotThrow(() -> this.solicitacaoDadosPermissionAccess.checkEstudantePermission(responsavelId, dependenteId));\n\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadDependentesIds(responsavelId);\n	}\n\n	@Test()\n	void checkEstudantePermissionWithoutDependenteUnauthorized() {\n		Long estudanteId = this.estudanteFactory.createRandom().getId();\n		Long wrongDependenteId = this.estudanteFactory.createRandom().getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(estudanteId)).thenReturn(new ArrayList<>(List.of()));\n\n		assertThrows(HttpUnauthorized.class, () -> this.solicitacaoDadosPermissionAccess.checkEstudantePermission(estudanteId, wrongDependenteId));\n\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadDependentesIds(estudanteId);\n	}\n\n	@Test()\n	void checkEstudantePermissionWithDependenteUnauthorized() {\n		Long responsavelId = this.estudanteFactory.createRandom().getId();\n		Long correctDependenteId = this.estudanteFactory.createRandom().getId();\n		Long wrongDependenteId = this.estudanteFactory.createRandom().getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(responsavelId)).thenReturn(new ArrayList<>(List.of(correctDependenteId)));\n\n		assertThrows(HttpUnauthorized.class, () -> this.solicitacaoDadosPermissionAccess.checkEstudantePermission(responsavelId, wrongDependenteId));\n\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadDependentesIds(responsavelId);\n	}\n\n	@Test()\n	void checkSolicitacaoDadosPermissionWithoutDependenteSuccess() {\n		Long estudanteId = this.estudanteFactory.createRandom().getId();\n		Long solicitacaoId = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudanteId);\n			s.autorAtualizacaoId.set(null);\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		}).getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(estudanteId)).thenReturn(new ArrayList<>(List.of()));\n		when(this.solicitacaoDadosService.loadEstudanteIdBySolicitacaoDadosId(solicitacaoId)).thenReturn(estudanteId);\n\n		assertDoesNotThrow(() -> this.solicitacaoDadosPermissionAccess.checkSolicitacaoDadosPermission(estudanteId, solicitacaoId));\n\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadDependentesIds(estudanteId);\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadEstudanteIdBySolicitacaoDadosId(solicitacaoId);\n	}\n\n	@Test()\n	void checkSolicitacaoDadosPermissionWithDependenteSuccess() {\n		Long responsavelId = this.estudanteFactory.createRandom().getId();\n		Long dependenteId = this.estudanteFactory.createRandom().getId();\n		Long solicitacaoId = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(dependenteId);\n			s.autorAtualizacaoId.set(responsavelId);\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		}).getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(responsavelId)).thenReturn(new ArrayList<>(List.of(dependenteId)));\n		when(this.solicitacaoDadosService.loadEstudanteIdBySolicitacaoDadosId(solicitacaoId)).thenReturn(dependenteId);\n\n		assertDoesNotThrow(() -> this.solicitacaoDadosPermissionAccess.checkSolicitacaoDadosPermission(responsavelId, solicitacaoId));\n\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadDependentesIds(responsavelId);\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadEstudanteIdBySolicitacaoDadosId(solicitacaoId);\n	}\n\n	@Test()\n	void checkSolicitacaoDadosPermissionWithoutDependenteUnauthorized() {\n		Long estudanteId = this.estudanteFactory.createRandom().getId();\n		Long wrongDependenteId = this.estudanteFactory.createRandom().getId();\n		Long solicitacaoId = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(wrongDependenteId);\n			s.autorAtualizacaoId.set(null);\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		}).getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(estudanteId)).thenReturn(new ArrayList<>(List.of()));\n		when(this.solicitacaoDadosService.loadEstudanteIdBySolicitacaoDadosId(solicitacaoId)).thenReturn(wrongDependenteId);\n\n		HttpForbidden httpForbidden = assertThrows(HttpForbidden.class, () ->\n				this.solicitacaoDadosPermissionAccess.checkSolicitacaoDadosPermission(estudanteId, solicitacaoId));\n		assertThat(httpForbidden.getMessage()).isEqualTo(SOLICITACAO_DADOS_SEM_PERMISSAO);\n\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadDependentesIds(estudanteId);\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadEstudanteIdBySolicitacaoDadosId(solicitacaoId);\n	}\n\n	@Test()\n	void checkSolicitacaoDadosPermissionWithDependenteUnauthorized() {\n		Long estudanteId = this.estudanteFactory.createRandom().getId();\n		Long correctDependenteId = this.estudanteFactory.createRandom().getId();\n		Long wrongDependenteId = this.estudanteFactory.createRandom().getId();\n		Long wrongSolicitacaoId = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(wrongDependenteId);\n			s.autorAtualizacaoId.set(null);\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		}).getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(estudanteId)).thenReturn(new ArrayList<>(List.of(correctDependenteId)));\n		when(this.solicitacaoDadosService.loadEstudanteIdBySolicitacaoDadosId(wrongSolicitacaoId)).thenReturn(wrongDependenteId);\n\n		HttpForbidden httpForbidden = assertThrows(HttpForbidden.class, () ->\n				this.solicitacaoDadosPermissionAccess.checkSolicitacaoDadosPermission(estudanteId, wrongSolicitacaoId));\n		assertThat(httpForbidden.getMessage()).isEqualTo(SOLICITACAO_DADOS_SEM_PERMISSAO);\n\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadDependentesIds(estudanteId);\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadEstudanteIdBySolicitacaoDadosId(wrongSolicitacaoId);\n	}\n\n	@Test\n	void checkSolicitacaoDadosPermissionWhenSolicitacaoAtendidaWithoutDependente() {\n		Long estudanteId = this.estudanteFactory.createRandom().getId();\n		Long solicitacaoId = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudanteId);\n			s.solicitacaoAtendida.set(Boolean.TRUE);\n		}).getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(estudanteId)).thenReturn(new ArrayList<>(List.of()));\n		when(this.solicitacaoDadosService.loadEstudanteIdBySolicitacaoDadosId(solicitacaoId)).thenReturn(null);\n\n		HttpForbidden httpForbidden = assertThrows(HttpForbidden.class, () ->\n				this.solicitacaoDadosPermissionAccess.checkSolicitacaoDadosPermission(estudanteId, solicitacaoId));\n		assertThat(httpForbidden.getMessage()).isEqualTo(SOLICITACAO_DADOS_SEM_PERMISSAO);\n\n		verify(this.solicitacaoDadosService, Mockito.times(0)).loadDependentesIds(estudanteId);\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadEstudanteIdBySolicitacaoDadosId(solicitacaoId);\n	}\n\n	@Test\n	void checkSolicitacaoDadosPermissionWhenSolicitacaoAtendidaWithDependente() {\n		Long responsavelId = this.estudanteFactory.createRandom().getId();\n		Long dependenteId = this.estudanteFactory.createRandom().getId();\n		Long solicitacaoId = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(dependenteId);\n			s.autorAtualizacaoId.set(responsavelId);\n			s.solicitacaoAtendida.set(Boolean.TRUE);\n		}).getId();\n\n		when(this.solicitacaoDadosService.loadDependentesIds(responsavelId)).thenReturn(new ArrayList<>(List.of(dependenteId)));\n		when(this.solicitacaoDadosService.loadEstudanteIdBySolicitacaoDadosId(solicitacaoId)).thenReturn(null);\n\n		HttpForbidden httpForbidden = assertThrows(HttpForbidden.class, () ->\n				this.solicitacaoDadosPermissionAccess.checkSolicitacaoDadosPermission(dependenteId, solicitacaoId));\n		assertThat(httpForbidden.getMessage()).isEqualTo(SOLICITACAO_DADOS_SEM_PERMISSAO);\n\n		verify(this.solicitacaoDadosService, Mockito.times(0)).loadDependentesIds(responsavelId);\n		verify(this.solicitacaoDadosService, Mockito.times(1)).loadEstudanteIdBySolicitacaoDadosId(solicitacaoId);\n	}\n\n}\n"
factory,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.database;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.situacaoVinculoWithDataAnoFim;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.situacaoVinculoWithoutDataAnoFim;\nimport static br.ufsc.bridge.jornadaestudante.factory.utils.RandomUtils.getRandomElement;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum.CURSANDO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum.MATRICULA_TRANCADA;\nimport static java.time.temporal.TemporalAdjusters.firstDayOfYear;\nimport static java.time.temporal.TemporalAdjusters.lastDayOfYear;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormITDto;\nimport br.ufsc.bridge.jornadaestudante.factory.core.DtoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.core.SpecValue;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoDomainFactory;\n\npublic class SolicitacaoDadosEstudanteFormITDtoFactory extends DtoFactory<SolicitacaoDadosEstudanteFormITDto, SolicitacaoDadosEstudanteFormITDtoFactory.Spec> {\n\n	private final CursoFactory cursoFactory = new CursoFactory();\n	private final MunicipioDomainFactory municipioDomainFactory = new MunicipioDomainFactory();\n	private final SituacaoVinculoDomainFactory situacaoVinculoDomainFactory = new SituacaoVinculoDomainFactory();\n\n	@Override\n	protected SolicitacaoDadosEstudanteFormITDto create(Spec spec) {\n		var solicitacaoDadosEstudanteFormITDto = new SolicitacaoDadosEstudanteFormITDto();\n		solicitacaoDadosEstudanteFormITDto.setMunicipioId(spec.municipioId.get());\n		solicitacaoDadosEstudanteFormITDto.setCursoId(spec.cursoId.get());\n		solicitacaoDadosEstudanteFormITDto.setTurnoId(spec.turnoId.get());\n		solicitacaoDadosEstudanteFormITDto.setSituacaoVinculoId(spec.situacaoVinculoId.get());\n		solicitacaoDadosEstudanteFormITDto.setDataAnoInicio(spec.dataAnoInicio.get());\n		solicitacaoDadosEstudanteFormITDto.setDataAnoFim(spec.dataAnoFim.get());\n		return solicitacaoDadosEstudanteFormITDto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		var spec = new Spec();\n		spec.municipioId.setDefault(() -> this.municipioDomainFactory.createRandom().getId());\n		spec.cursoId.setDefault(() -> this.cursoFactory.createRandom().getId());\n		spec.situacaoVinculoId.setDefault(() -> this.situacaoVinculoDomainFactory.createRandom().getId());\n		spec.dataAnoInicio.setDefault(() -> LocalDate.now().with(firstDayOfYear()).minusYears(5).getYear());\n		if (!List.of(CURSANDO.getId(), MATRICULA_TRANCADA.getId()).contains(spec.situacaoVinculoId.get())) {\n			spec.dataAnoFim.setDefault(() -> LocalDate.now().with(lastDayOfYear()).getYear());\n		}\n		return spec;\n	}\n\n	public SolicitacaoDadosEstudanteFormITDto createWithDataAnoFim(Consumer<Spec> specApplier) {\n		var spec = new Spec();\n		spec.situacaoVinculoId.setDefault(() -> getRandomElement(situacaoVinculoWithDataAnoFim()).getId());\n		spec.dataAnoFim.setDefault(() -> LocalDate.now().with(lastDayOfYear()).getYear());\n		this.applyDefaultSpec(specApplier, spec);\n		return this.create(spec);\n	}\n\n	public SolicitacaoDadosEstudanteFormITDto createWithoutDataAnoFim(Consumer<Spec> specApplier) {\n		var spec = new Spec();\n		spec.situacaoVinculoId.setDefault(() -> getRandomElement(situacaoVinculoWithoutDataAnoFim()).getId());\n		spec.dataAnoFim.setDefault(() -> null);\n		this.applyDefaultSpec(specApplier, spec);\n		return this.create(spec);\n	}\n\n	protected void applyDefaultSpec(Consumer<Spec> specApplier, Spec spec) {\n		spec.municipioId.setDefault(() -> this.municipioDomainFactory.createRandom().getId());\n		spec.cursoId.setDefault(() -> this.cursoFactory.createRandom().getId());\n		spec.dataAnoInicio.setDefault(() -> LocalDate.now().with(firstDayOfYear()).minusYears(5).getYear());\n		specApplier.accept(spec);\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> municipioId = new SpecValue<>();\n		public final SpecValue<Long> cursoId = new SpecValue<>();\n		public final SpecValue<Integer> turnoId = new SpecValue<>();\n		public final SpecValue<Integer> situacaoVinculoId = new SpecValue<>();\n		public final SpecValue<Integer> dataAnoInicio = new SpecValue<>();\n		public final SpecValue<Integer> dataAnoFim = new SpecValue<>();\n	}\n\n}\n"
factory,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.database;\n\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.situacaoVinculoWithDataAnoFim;\nimport static br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoRefEnum.situacaoVinculoWithoutDataAnoFim;\nimport static br.ufsc.bridge.jornadaestudante.factory.utils.RandomUtils.getRandomElement;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum.CURSANDO;\nimport static br.ufsc.bridge.jornadaestudante.model.enums.SituacaoVinculoDbEnum.MATRICULA_TRANCADA;\nimport static java.time.temporal.TemporalAdjusters.firstDayOfYear;\nimport static java.time.temporal.TemporalAdjusters.lastDayOfYear;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormDto;\nimport br.ufsc.bridge.jornadaestudante.factory.core.DtoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.core.SpecValue;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoDomainFactory;\n\npublic class SolicitacaoDadosEstudanteFormDtoFactory extends DtoFactory<SolicitacaoDadosEstudanteFormDto, SolicitacaoDadosEstudanteFormDtoFactory.Spec> {\n\n	private final CursoFactory cursoFactory = new CursoFactory();\n	private final MunicipioDomainFactory municipioDomainFactory = new MunicipioDomainFactory();\n	private final SituacaoVinculoDomainFactory situacaoVinculoDomainFactory = new SituacaoVinculoDomainFactory();\n\n	@Override\n	protected SolicitacaoDadosEstudanteFormDto create(Spec spec) {\n		var solicitacaoDadosEstudanteFormDto = new SolicitacaoDadosEstudanteFormDto();\n		solicitacaoDadosEstudanteFormDto.setMunicipioId(spec.municipioId.get());\n		solicitacaoDadosEstudanteFormDto.setCursoId(spec.cursoId.get());\n		solicitacaoDadosEstudanteFormDto.setTurnoId(spec.turnoId.get());\n		solicitacaoDadosEstudanteFormDto.setSituacaoVinculoId(spec.situacaoVinculoId.get());\n		solicitacaoDadosEstudanteFormDto.setDataAnoInicio(spec.dataAnoInicio.get());\n		solicitacaoDadosEstudanteFormDto.setDataAnoFim(spec.dataAnoFim.get());\n		return solicitacaoDadosEstudanteFormDto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		var spec = new Spec();\n		spec.municipioId.setDefault(() -> this.municipioDomainFactory.createRandom().getId());\n		spec.cursoId.setDefault(() -> this.cursoFactory.createRandom().getId());\n		spec.situacaoVinculoId.setDefault(() -> this.situacaoVinculoDomainFactory.createRandom().getId());\n		spec.dataAnoInicio.setDefault(() -> LocalDate.now().with(firstDayOfYear()).minusYears(5).getYear());\n		if (!List.of(CURSANDO.getId(), MATRICULA_TRANCADA.getId()).contains(spec.situacaoVinculoId.get())) {\n			spec.dataAnoFim.setDefault(() -> LocalDate.now().with(lastDayOfYear()).getYear());\n		}\n		return spec;\n	}\n\n	public SolicitacaoDadosEstudanteFormDto createWithDataAnoFim(Consumer<Spec> specApplier) {\n		var spec = new Spec();\n		spec.situacaoVinculoId.setDefault(() -> getRandomElement(situacaoVinculoWithDataAnoFim()).getId());\n		spec.dataAnoFim.setDefault(() -> LocalDate.now().with(lastDayOfYear()).getYear());\n		this.applyDefaultSpec(specApplier, spec);\n		return this.create(spec);\n	}\n\n	public SolicitacaoDadosEstudanteFormDto createWithoutDataAnoFim(Consumer<Spec> specApplier) {\n		var spec = new Spec();\n		spec.situacaoVinculoId.setDefault(() -> getRandomElement(situacaoVinculoWithoutDataAnoFim()).getId());\n		spec.dataAnoFim.setDefault(() -> null);\n		this.applyDefaultSpec(specApplier, spec);\n		return this.create(spec);\n	}\n\n	protected void applyDefaultSpec(Consumer<Spec> specApplier, Spec spec) {\n		spec.municipioId.setDefault(() -> this.municipioDomainFactory.createRandom().getId());\n		spec.cursoId.setDefault(() -> this.cursoFactory.createRandom().getId());\n		spec.dataAnoInicio.setDefault(() -> LocalDate.now().with(firstDayOfYear()).minusYears(5).getYear());\n		specApplier.accept(spec);\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> municipioId = new SpecValue<>();\n		public final SpecValue<Long> cursoId = new SpecValue<>();\n		public final SpecValue<Integer> turnoId = new SpecValue<>();\n		public final SpecValue<Integer> situacaoVinculoId = new SpecValue<>();\n		public final SpecValue<Integer> dataAnoInicio = new SpecValue<>();\n		public final SpecValue<Integer> dataAnoFim = new SpecValue<>();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.test.util.TestUtils.ignoringNanos;\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.parseYearFirstMonthAndDay;\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.parseYearLastMonthAndDay;\nimport static java.time.temporal.ChronoUnit.DAYS;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.Instant;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.database.SolicitacaoDadosEstudanteFormDtoFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.SituacaoVinculoDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.solicitacaoDados.SolicitacaoDadosEstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.SolicitacaoDadosEstudante;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass SolicitacaoDadosEstudanteSaveCommandIntegrationTest {\n\n	private final SolicitacaoDadosEstudanteFormDtoFactory solicitacaoDadosEstudanteFormDtoFactory = new SolicitacaoDadosEstudanteFormDtoFactory();\n	@Autowired private DAO dao;\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private MunicipioDomainFactory municipioDomainFactory;\n	@Autowired private SituacaoVinculoDomainFactory situacaoVinculoDomainFactory;\n	@Autowired private SolicitacaoDadosEstudanteFactory solicitacaoDadosEstudanteFactory;\n	@Autowired private SolicitacaoDadosEstudanteSaveCommand solicitacaoDadosEstudanteSaveCommand;\n\n	@Test\n	@DisplayName(""Verifica se a solicitação de dados, solicitada pelo próprio estudante logado e com data de ano fim, foi salva corretamente"")\n	void executeSaveWithDataAnoFimExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var curso = this.cursoFactory.createRandom();\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.cursoId.set(curso.getId())\n		);\n\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteSaveCommand.save(\n				solicitacaoDadosEstudanteFormDto,\n				estudanteId,\n				estudanteId\n		);\n\n		var result = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId());\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudante.getId());\n		assertThat(result.getEstudanteId()).isEqualTo(estudanteId);\n		assertThat(result.getDataSolicitacao()).isCloseTo(solicitacaoDadosEstudante.getDataSolicitacao(), ignoringNanos());\n		assertThat(result.getInstituicaoId()).isEqualTo(curso.getInstituicaoId());\n		assertThat(result.getMunicipioId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		assertThat(result.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		assertThat(result.getDataAnoFim()).isEqualTo(\n				parseYearLastMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoFim().toString()));\n		assertThat(result.getAutorAtualizacaoId()).isEqualTo(estudanteId);\n		assertThat(result.getDataAtualizacao()).isCloseTo(solicitacaoDadosEstudante.getDataAtualizacao(), ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(estudanteId);\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Verifica se a solicitação de dados, solicitada pelo próprio estudante logado e sem data de ano fim, foi salva corretamente"")\n	void executeSaveWithoutDataAnoFimExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var curso = this.cursoFactory.createRandom();\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithoutDataAnoFim(s ->\n				s.cursoId.set(curso.getId())\n		);\n\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteSaveCommand.save(\n				solicitacaoDadosEstudanteFormDto,\n				estudanteId,\n				estudanteId\n		);\n\n		var result = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId());\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudante.getId());\n		assertThat(result.getEstudanteId()).isEqualTo(estudanteId);\n		assertThat(result.getDataSolicitacao()).isCloseTo(solicitacaoDadosEstudante.getDataSolicitacao(), ignoringNanos());\n		assertThat(result.getInstituicaoId()).isEqualTo(curso.getInstituicaoId());\n		assertThat(result.getMunicipioId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		assertThat(result.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		assertThat(result.getDataAnoFim()).isNull();\n		assertThat(result.getAutorAtualizacaoId()).isEqualTo(estudanteId);\n		assertThat(result.getDataAtualizacao()).isCloseTo(solicitacaoDadosEstudante.getDataAtualizacao(), ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(estudanteId);\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Verifica se a solicitação de dados, solicitada pelo responsável para seu dependente e com data de ano fim, foi salva corretamente"")\n	void executeSaveByResponsavelWithDataAnoFimExpectSuccess() {\n		var estudanteDependenteId = this.estudanteFactory.createRandom().getId();\n		var estudanteResponsavelId = this.estudanteFactory.createRandom().getId();\n		var curso = this.cursoFactory.createRandom();\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.cursoId.set(curso.getId())\n		);\n\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteSaveCommand.save(\n				solicitacaoDadosEstudanteFormDto,\n				estudanteResponsavelId,\n				estudanteDependenteId\n		);\n\n		var result = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId());\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudante.getId());\n		assertThat(result.getEstudanteId()).isEqualTo(estudanteDependenteId);\n		assertThat(result.getDataSolicitacao()).isCloseTo(solicitacaoDadosEstudante.getDataSolicitacao(), ignoringNanos());\n		assertThat(result.getInstituicaoId()).isEqualTo(curso.getInstituicaoId());\n		assertThat(result.getMunicipioId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		assertThat(result.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		assertThat(result.getDataAnoFim()).isEqualTo(\n				parseYearLastMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoFim().toString()));\n		assertThat(result.getAutorAtualizacaoId()).isEqualTo(estudanteResponsavelId);\n		assertThat(result.getDataAtualizacao()).isCloseTo(solicitacaoDadosEstudante.getDataAtualizacao(), ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(estudanteResponsavelId);\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Verifica se a solicitação de dados, solicitada pelo responsável para seu dependente e sem data de ano fim, foi salva corretamente"")\n	void executeSaveByResponsavelWithoutDataAnoFimExpectSuccess() {\n		var estudanteDependenteId = this.estudanteFactory.createRandom().getId();\n		var estudanteResponsavelId = this.estudanteFactory.createRandom().getId();\n		var curso = this.cursoFactory.createRandom();\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithoutDataAnoFim(s ->\n				s.cursoId.set(curso.getId())\n		);\n\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteSaveCommand.save(\n				solicitacaoDadosEstudanteFormDto,\n				estudanteResponsavelId,\n				estudanteDependenteId\n		);\n\n		var result = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId());\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudante.getId());\n		assertThat(result.getEstudanteId()).isEqualTo(estudanteDependenteId);\n		assertThat(result.getDataSolicitacao()).isCloseTo(solicitacaoDadosEstudante.getDataSolicitacao(), ignoringNanos());\n		assertThat(result.getInstituicaoId()).isEqualTo(curso.getInstituicaoId());\n		assertThat(result.getMunicipioId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		assertThat(result.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		assertThat(result.getDataAnoFim()).isNull();\n		assertThat(result.getAutorAtualizacaoId()).isEqualTo(estudanteResponsavelId);\n		assertThat(result.getDataAtualizacao()).isCloseTo(solicitacaoDadosEstudante.getDataAtualizacao(), ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(estudanteResponsavelId);\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Verifica se a solicitação de dados, alterada pelo próprio estudante logado e com data de ano fim, foi atualizada corretamente"")\n	void executeUpdateWithDataAnoFimExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var curso = this.cursoFactory.createRandom();\n		var solicitacaoDadosEstudanteInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudanteId);\n			s.autorSolicitacaoId.set(estudanteId);\n			s.dataSolicitacao.set(Instant.now().minus(30, DAYS));\n		});\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.cursoId.set(curso.getId())\n		);\n\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteSaveCommand.update(\n				solicitacaoDadosEstudanteFormDto,\n				estudanteId,\n				solicitacaoDadosEstudanteInDb.getId()\n		);\n\n		var result = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudanteInDb.getId());\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudanteInDb.getId());\n		assertThat(result.getEstudanteId()).isEqualTo(solicitacaoDadosEstudanteInDb.getEstudanteId());\n		assertThat(result.getDataSolicitacao()).isCloseTo(solicitacaoDadosEstudanteInDb.getDataSolicitacao(), ignoringNanos());\n		assertThat(result.getInstituicaoId()).isEqualTo(curso.getInstituicaoId());\n		assertThat(result.getMunicipioId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		assertThat(result.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		assertThat(result.getDataAnoFim()).isEqualTo(\n				parseYearLastMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoFim().toString()));\n		assertThat(result.getAutorAtualizacaoId()).isEqualTo(estudanteId);\n		assertThat(result.getDataAtualizacao()).isCloseTo(solicitacaoDadosEstudante.getDataAtualizacao(), ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId());\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Verifica se a solicitação de dados, alterada pelo próprio estudante logado e sem data de ano fim, foi atualizada corretamente"")\n	void executeUpdateWithoutDataAnoFimExpectSuccess() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n		var curso = this.cursoFactory.createRandom();\n		var solicitacaoDadosEstudanteInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudanteId);\n			s.autorSolicitacaoId.set(estudanteId);\n			s.dataSolicitacao.set(Instant.now().minus(30, DAYS));\n		});\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithoutDataAnoFim(s ->\n				s.cursoId.set(curso.getId())\n		);\n\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteSaveCommand.update(\n				solicitacaoDadosEstudanteFormDto,\n				estudanteId,\n				solicitacaoDadosEstudanteInDb.getId()\n		);\n\n		var result = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudanteInDb.getId());\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudanteInDb.getId());\n		assertThat(result.getEstudanteId()).isEqualTo(solicitacaoDadosEstudanteInDb.getEstudanteId());\n		assertThat(result.getDataSolicitacao()).isCloseTo(solicitacaoDadosEstudanteInDb.getDataSolicitacao(), ignoringNanos());\n		assertThat(result.getInstituicaoId()).isEqualTo(curso.getInstituicaoId());\n		assertThat(result.getMunicipioId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		assertThat(result.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		assertThat(result.getDataAnoFim()).isNull();\n		assertThat(result.getAutorAtualizacaoId()).isEqualTo(estudanteId);\n		assertThat(result.getDataAtualizacao()).isCloseTo(solicitacaoDadosEstudante.getDataAtualizacao(), ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId());\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Verifica se a solicitação de dados, alterada  pelo responsável para seu dependente e com data de ano fim, foi atualizada corretamente"")\n	void executeUpdateByResponsavelWithDataAnoFimExpectSuccess() {\n		var estudanteDependenteId = this.estudanteFactory.createRandom().getId();\n		var estudanteResponsavelId = this.estudanteFactory.createRandom().getId();\n		var curso = this.cursoFactory.createRandom();\n		var solicitacaoDadosEstudanteInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudanteDependenteId);\n			s.autorSolicitacaoId.set(estudanteDependenteId);\n			s.dataSolicitacao.set(Instant.now().minus(30, DAYS));\n		});\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithDataAnoFim(s ->\n				s.cursoId.set(curso.getId())\n		);\n\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteSaveCommand.update(\n				solicitacaoDadosEstudanteFormDto,\n				estudanteResponsavelId,\n				solicitacaoDadosEstudanteInDb.getId()\n		);\n\n		var result = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudanteInDb.getId());\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudanteInDb.getId());\n		assertThat(result.getEstudanteId()).isEqualTo(solicitacaoDadosEstudanteInDb.getEstudanteId());\n		assertThat(result.getDataSolicitacao()).isCloseTo(solicitacaoDadosEstudanteInDb.getDataSolicitacao(), ignoringNanos());\n		assertThat(result.getInstituicaoId()).isEqualTo(curso.getInstituicaoId());\n		assertThat(result.getMunicipioId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		assertThat(result.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		assertThat(result.getDataAnoFim()).isEqualTo(\n				parseYearLastMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoFim().toString()));\n		assertThat(result.getAutorAtualizacaoId()).isEqualTo(estudanteResponsavelId);\n		assertThat(result.getDataAtualizacao()).isCloseTo(solicitacaoDadosEstudante.getDataAtualizacao(), ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId());\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Verifica se a solicitação de dados, alterada  pelo responsável para seu dependente e sem data de ano fim, foi atualizada corretamente"")\n	void executeUpdateByResponsavelWithoutDataAnoFimExpectSuccess() {\n		var estudanteDependenteId = this.estudanteFactory.createRandom().getId();\n		var estudanteResponsavelId = this.estudanteFactory.createRandom().getId();\n		var curso = this.cursoFactory.createRandom();\n		var solicitacaoDadosEstudanteInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudanteDependenteId);\n			s.autorSolicitacaoId.set(estudanteDependenteId);\n			s.dataSolicitacao.set(Instant.now().minus(30, DAYS));\n		});\n		var solicitacaoDadosEstudanteFormDto = this.solicitacaoDadosEstudanteFormDtoFactory.createWithoutDataAnoFim(s ->\n				s.cursoId.set(curso.getId())\n		);\n\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteSaveCommand.update(\n				solicitacaoDadosEstudanteFormDto,\n				estudanteResponsavelId,\n				solicitacaoDadosEstudanteInDb.getId()\n		);\n\n		var result = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudanteInDb.getId());\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudanteInDb.getId());\n		assertThat(result.getEstudanteId()).isEqualTo(solicitacaoDadosEstudanteInDb.getEstudanteId());\n		assertThat(result.getDataSolicitacao()).isCloseTo(solicitacaoDadosEstudanteInDb.getDataSolicitacao(), ignoringNanos());\n		assertThat(result.getInstituicaoId()).isEqualTo(curso.getInstituicaoId());\n		assertThat(result.getMunicipioId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getMunicipioId());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId());\n		assertThat(result.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoInicio().toString()));\n		assertThat(result.getDataAnoFim()).isNull();\n		assertThat(result.getAutorAtualizacaoId()).isEqualTo(estudanteResponsavelId);\n		assertThat(result.getDataAtualizacao()).isCloseTo(solicitacaoDadosEstudante.getDataAtualizacao(), ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId());\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.solicitacaoDados.SolicitacaoDadosEstudanteFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass EstudanteIdBySolicitacaoDadosIdQueryCommandIntegrationTest {\n\n	@Autowired EstudanteFactory estudanteFactory;\n	@Autowired MatriculaFactory matriculaFactory;\n	@Autowired SolicitacaoDadosEstudanteFactory solicitacaoDadosEstudanteFactory;\n	@Autowired EstudanteIdBySolicitacaoDadosIdQueryCommand estudanteIdBySolicitacaoDadosIdQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar o id do estudante filtrado pelo id da solicitação de dados"")\n	void executeWhenHasSolicitacaoDadosInDbExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		});\n\n		var result = this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosEstudante.getId());\n\n		assertThat(result).isEqualTo(estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando não existir a solicitação de dados"")\n	void executeWhenEmptyDbExpectNull() {\n		var solicitacaoDadosId = new Random().nextLong();\n\n		var result = this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosId);\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando o id da solicitação de dados não existe"")\n	void executeWhenSolicitacaoDadosIdDoesntExistsInDbExpectNull() {\n		var estudante = this.estudanteFactory.createRandom();\n		this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		});\n		var solicitacaoDadosId = new Random().nextLong();\n\n		var result = this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosId);\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando a solicitação de dados foi atendida"")\n	void executeWhenSolicitacaoAtendidaExpectNull() {\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(m -> m.estudanteId.set(estudante.getId()));\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.TRUE);\n			s.matriculaId.set(matricula.getId());\n		});\n\n		var result = this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosEstudante.getId());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoTurnoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.UFRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.solicitacaoDados.SolicitacaoDadosEstudanteFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass SolicitacaoDadosEstudanteDtoListCommandIntegrationTest {\n\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private CursoTurnoFactory cursoTurnoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private MunicipioDomainFactory municipioDomainFactory;\n	@Autowired private SolicitacaoDadosEstudanteFactory solicitacaoDadosEstudanteFactory;\n	@Autowired private SolicitacaoDadosEstudanteDtoListQueryCommand solicitacaoDadosEstudanteDtoListCommand;\n\n	@Test\n	@DisplayName(""Deve retornar vazio quando não existir nenhuma solicitação de dados"")\n	void executeWhenEmptyDbExpectEmpty() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(estudanteId);\n\n		assertThat(resultList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio quando não existir o id do estudante que foi passado como argumento"")\n	void executeWhenEstudanteIdDoesntExistsInDbExpectEmpty() {\n		var estudante1 = this.estudanteFactory.createRandom();\n		this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante1.getId());\n		});\n		var estudante2 = new Random().nextLong();\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(estudante2);\n\n		assertThat(resultList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a solicitação de dados do estudante com nome social"")\n	void executeWithEstudanteNomeSocialExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var municipio = this.municipioDomainFactory.createRandom();\n		var solicitacaoDadosInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.instituicaoId.set(instituicao.getId());\n			s.cursoId.set(curso.getId());\n			s.turnoId.set(cursoTurno.getTurnoId());\n			s.municipioId.set(municipio.getId());\n		});\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(estudante.getId());\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosInDb.getId());\n		assertThat(result.getInstituicaoId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNomeInstituicao()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSiglaInstituicao()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSistemaOrigemInstituicaoId()).isEqualTo(curso.getSistemaOrigemCurso());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getNomeCurso()).isEqualTo(curso.getNome());\n		assertThat(result.getTurnoId()).isEqualTo(cursoTurno.getTurnoId());\n		assertThat(result.getCargaHorariaCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getMunicipioId()).isEqualTo(municipio.getId());\n		assertThat(result.getNomeMunicipio()).isEqualTo(municipio.getNome());\n		assertThat(result.getUfId()).isEqualTo(municipio.getUfId());\n		assertThat(result.getNomeUf()).isEqualTo(UFRefEnum.getById(municipio.getUfId()).getNome());\n		assertThat(result.getDataAnoInicio()).isEqualTo(solicitacaoDadosInDb.getDataAnoInicio());\n		assertThat(result.getDataAnoFim()).isEqualTo(solicitacaoDadosInDb.getDataAnoFim());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosInDb.getSituacaoVinculoId());\n		assertThat(result.getDataSolicitacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataSolicitacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorSolicitacao()).isEqualTo(estudante.getNomeSocial());\n		assertThat(result.getDataAtualizacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataAtualizacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorAtualizacao()).isEqualTo(estudante.getNomeSocial());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a solicitação de dados do estudante sem nome social"")\n	void executeWithoutEstudanteNomeSocialExpectSuccess() {\n		var estudante = this.estudanteFactory.create(e -> e.nomeSocial.set(null));\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var municipio = this.municipioDomainFactory.createRandom();\n		var solicitacaoDadosInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.instituicaoId.set(instituicao.getId());\n			s.cursoId.set(curso.getId());\n			s.turnoId.set(cursoTurno.getTurnoId());\n			s.municipioId.set(municipio.getId());\n		});\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(estudante.getId());\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosInDb.getId());\n		assertThat(result.getInstituicaoId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNomeInstituicao()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSiglaInstituicao()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSistemaOrigemInstituicaoId()).isEqualTo(curso.getSistemaOrigemCurso());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getNomeCurso()).isEqualTo(curso.getNome());\n		assertThat(result.getTurnoId()).isEqualTo(cursoTurno.getTurnoId());\n		assertThat(result.getCargaHorariaCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getMunicipioId()).isEqualTo(municipio.getId());\n		assertThat(result.getNomeMunicipio()).isEqualTo(municipio.getNome());\n		assertThat(result.getUfId()).isEqualTo(municipio.getUfId());\n		assertThat(result.getNomeUf()).isEqualTo(UFRefEnum.getById(municipio.getUfId()).getNome());\n		assertThat(result.getDataAnoInicio()).isEqualTo(solicitacaoDadosInDb.getDataAnoInicio());\n		assertThat(result.getDataAnoFim()).isEqualTo(solicitacaoDadosInDb.getDataAnoFim());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosInDb.getSituacaoVinculoId());\n		assertThat(result.getDataSolicitacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataSolicitacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorSolicitacao()).isEqualTo(estudante.getNomeCivil());\n		assertThat(result.getDataAtualizacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataAtualizacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorAtualizacao()).isEqualTo(estudante.getNomeCivil());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a solicitação de dados, do estudante logado, solicitada pelo responsável com nome social"")\n	void executeWithResponsavelAutorNomeSocialExpectSuccess() {\n		var estudanteResponsavel = this.estudanteFactory.createRandom();\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var municipio = this.municipioDomainFactory.createRandom();\n		var solicitacaoDadosInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.instituicaoId.set(instituicao.getId());\n			s.cursoId.set(curso.getId());\n			s.turnoId.set(cursoTurno.getTurnoId());\n			s.municipioId.set(municipio.getId());\n			s.autorSolicitacaoId.set(estudanteResponsavel.getId());\n			s.autorAtualizacaoId.set(estudanteResponsavel.getId());\n		});\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(solicitacaoDadosInDb.getEstudanteId());\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosInDb.getId());\n		assertThat(result.getInstituicaoId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNomeInstituicao()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSiglaInstituicao()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSistemaOrigemInstituicaoId()).isEqualTo(curso.getSistemaOrigemCurso());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getNomeCurso()).isEqualTo(curso.getNome());\n		assertThat(result.getTurnoId()).isEqualTo(cursoTurno.getTurnoId());\n		assertThat(result.getCargaHorariaCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getMunicipioId()).isEqualTo(municipio.getId());\n		assertThat(result.getNomeMunicipio()).isEqualTo(municipio.getNome());\n		assertThat(result.getUfId()).isEqualTo(municipio.getUfId());\n		assertThat(result.getNomeUf()).isEqualTo(UFRefEnum.getById(municipio.getUfId()).getNome());\n		assertThat(result.getDataAnoInicio()).isEqualTo(solicitacaoDadosInDb.getDataAnoInicio());\n		assertThat(result.getDataAnoFim()).isEqualTo(solicitacaoDadosInDb.getDataAnoFim());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosInDb.getSituacaoVinculoId());\n		assertThat(result.getDataSolicitacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataSolicitacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorSolicitacao()).isEqualTo(estudanteResponsavel.getNomeSocial());\n		assertThat(result.getDataAtualizacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataAtualizacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorAtualizacao()).isEqualTo(estudanteResponsavel.getNomeSocial());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a solicitação de dados, do estudante logado, solicitada pelo responsável sem nome social"")\n	void executeWithoutResponsavelAutorNomeSocialExpectSuccess() {\n		var estudanteResponsavel = this.estudanteFactory.create(e -> e.nomeSocial.set(null));\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var municipio = this.municipioDomainFactory.createRandom();\n		var solicitacaoDadosInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.instituicaoId.set(instituicao.getId());\n			s.cursoId.set(curso.getId());\n			s.turnoId.set(cursoTurno.getTurnoId());\n			s.municipioId.set(municipio.getId());\n			s.autorSolicitacaoId.set(estudanteResponsavel.getId());\n			s.autorAtualizacaoId.set(estudanteResponsavel.getId());\n		});\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(solicitacaoDadosInDb.getEstudanteId());\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosInDb.getId());\n		assertThat(result.getInstituicaoId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNomeInstituicao()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSiglaInstituicao()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSistemaOrigemInstituicaoId()).isEqualTo(curso.getSistemaOrigemCurso());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getNomeCurso()).isEqualTo(curso.getNome());\n		assertThat(result.getTurnoId()).isEqualTo(cursoTurno.getTurnoId());\n		assertThat(result.getCargaHorariaCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getMunicipioId()).isEqualTo(municipio.getId());\n		assertThat(result.getNomeMunicipio()).isEqualTo(municipio.getNome());\n		assertThat(result.getUfId()).isEqualTo(municipio.getUfId());\n		assertThat(result.getNomeUf()).isEqualTo(UFRefEnum.getById(municipio.getUfId()).getNome());\n		assertThat(result.getDataAnoInicio()).isEqualTo(solicitacaoDadosInDb.getDataAnoInicio());\n		assertThat(result.getDataAnoFim()).isEqualTo(solicitacaoDadosInDb.getDataAnoFim());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosInDb.getSituacaoVinculoId());\n		assertThat(result.getDataSolicitacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataSolicitacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorSolicitacao()).isEqualTo(estudanteResponsavel.getNomeCivil());\n		assertThat(result.getDataAtualizacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataAtualizacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorAtualizacao()).isEqualTo(estudanteResponsavel.getNomeCivil());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a solicitação de dados, do estudante logado, quando os autores forem diferentes e possuam nome social"")\n	void executeWhenAuthorsAreDifferentWithNomeSocialExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var estudanteResponsavel = this.estudanteFactory.createRandom();\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var municipio = this.municipioDomainFactory.createRandom();\n		var solicitacaoDadosInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.instituicaoId.set(instituicao.getId());\n			s.cursoId.set(curso.getId());\n			s.turnoId.set(cursoTurno.getTurnoId());\n			s.municipioId.set(municipio.getId());\n			s.autorAtualizacaoId.set(estudanteResponsavel.getId());\n		});\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(solicitacaoDadosInDb.getEstudanteId());\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosInDb.getId());\n		assertThat(result.getInstituicaoId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNomeInstituicao()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSiglaInstituicao()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSistemaOrigemInstituicaoId()).isEqualTo(curso.getSistemaOrigemCurso());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getNomeCurso()).isEqualTo(curso.getNome());\n		assertThat(result.getTurnoId()).isEqualTo(cursoTurno.getTurnoId());\n		assertThat(result.getCargaHorariaCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getMunicipioId()).isEqualTo(municipio.getId());\n		assertThat(result.getNomeMunicipio()).isEqualTo(municipio.getNome());\n		assertThat(result.getUfId()).isEqualTo(municipio.getUfId());\n		assertThat(result.getNomeUf()).isEqualTo(UFRefEnum.getById(municipio.getUfId()).getNome());\n		assertThat(result.getDataAnoInicio()).isEqualTo(solicitacaoDadosInDb.getDataAnoInicio());\n		assertThat(result.getDataAnoFim()).isEqualTo(solicitacaoDadosInDb.getDataAnoFim());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosInDb.getSituacaoVinculoId());\n		assertThat(result.getDataSolicitacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataSolicitacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorSolicitacao()).isEqualTo(estudante.getNomeSocial());\n		assertThat(result.getDataAtualizacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataAtualizacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorAtualizacao()).isEqualTo(estudanteResponsavel.getNomeSocial());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a solicitação de dados, do estudante logado, quando os autores forem diferentes e não possuam nome social"")\n	void executeWhenAuthorsAreDifferentWithoutNomeSocialExpectSuccess() {\n		var estudante = this.estudanteFactory.create(e -> e.nomeSocial.set(null));\n		var estudanteResponsavel = this.estudanteFactory.create(e -> e.nomeSocial.set(null));\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, c -> c.instituicaoId.set(instituicao.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(c -> c.cursoId.set(curso.getId()));\n		var municipio = this.municipioDomainFactory.createRandom();\n		var solicitacaoDadosInDb = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.instituicaoId.set(instituicao.getId());\n			s.cursoId.set(curso.getId());\n			s.turnoId.set(cursoTurno.getTurnoId());\n			s.municipioId.set(municipio.getId());\n			s.autorAtualizacaoId.set(estudanteResponsavel.getId());\n		});\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(solicitacaoDadosInDb.getEstudanteId());\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosInDb.getId());\n		assertThat(result.getInstituicaoId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNomeInstituicao()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSiglaInstituicao()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSistemaOrigemInstituicaoId()).isEqualTo(curso.getSistemaOrigemCurso());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getNomeCurso()).isEqualTo(curso.getNome());\n		assertThat(result.getTurnoId()).isEqualTo(cursoTurno.getTurnoId());\n		assertThat(result.getCargaHorariaCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getMunicipioId()).isEqualTo(municipio.getId());\n		assertThat(result.getNomeMunicipio()).isEqualTo(municipio.getNome());\n		assertThat(result.getUfId()).isEqualTo(municipio.getUfId());\n		assertThat(result.getNomeUf()).isEqualTo(UFRefEnum.getById(municipio.getUfId()).getNome());\n		assertThat(result.getDataAnoInicio()).isEqualTo(solicitacaoDadosInDb.getDataAnoInicio());\n		assertThat(result.getDataAnoFim()).isEqualTo(solicitacaoDadosInDb.getDataAnoFim());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosInDb.getSituacaoVinculoId());\n		assertThat(result.getDataSolicitacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataSolicitacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorSolicitacao()).isEqualTo(estudante.getNomeCivil());\n		assertThat(result.getDataAtualizacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosInDb.getDataAtualizacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorAtualizacao()).isEqualTo(estudanteResponsavel.getNomeCivil());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar múltiplas solicitações de dados do estudante com mais de um curso"")\n	void executeWithMultipleSolicitacoesExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDados1 = this.solicitacaoDadosEstudanteFactory.create(s -> s.estudanteId.set(estudante.getId()));\n		var solicitacaoDados2 = this.solicitacaoDadosEstudanteFactory.create(s -> s.estudanteId.set(estudante.getId()));\n\n		var resultList = this.solicitacaoDadosEstudanteDtoListCommand.execute(estudante.getId());\n\n		assertThat(resultList).hasSize(2);\n		assertThat(resultList.stream().map(SolicitacaoDadosEstudanteDto::getId)).containsExactlyInAnyOrder(solicitacaoDados1.getId(), solicitacaoDados2.getId());\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.controller;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.security.AuthorizationUtils.withBearerAuthorization;\nimport static br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredConstants.BASE_PATH;\nimport static br.ufsc.bridge.jornadaestudante.backend.test.util.TestUtils.ignoringMicros;\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.SOLICITACAO_DADOS_SEM_PERMISSAO;\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.parseYearFirstMonthAndDay;\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.parseYearLastMonthAndDay;\nimport static br.ufsc.bridge.jornadaestudante.model.QSolicitacaoDadosEstudante.solicitacaoDadosEstudante;\nimport static io.restassured.http.ContentType.JSON;\nimport static io.restassured.module.mockmvc.RestAssuredMockMvc.given;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.CoreMatchers.equalTo;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.JWTFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.database.SolicitacaoDadosEstudanteFormITDtoFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormITDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.restassured.RestAssuredMockMvcTest;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.curso.CursoTurnoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.UFRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.InstituicaoFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.instituicao.SistemaOrigemRefEnum;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.LocalOfertaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.solicitacaoDados.SolicitacaoDadosEstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.model.Curso;\nimport br.ufsc.bridge.jornadaestudante.model.Municipio;\nimport br.ufsc.bridge.jornadaestudante.model.SolicitacaoDadosEstudante;\n\n@DatabaseTest\nclass SolicitacaoDadosControllerIntegrationTest extends RestAssuredMockMvcTest {\n\n	private static final String BASE_URL = ""/api/v2/solicitacao-dados"";\n	private final BridgeFaker faker = new BridgeFaker();\n	private final SolicitacaoDadosEstudanteFormITDtoFactory solicitacaoDadosEstudanteFormITDtoFactory = new SolicitacaoDadosEstudanteFormITDtoFactory();\n	@Autowired private DAO dao;\n	@Autowired private CursoFactory cursoFactory;\n	@Autowired private CursoTurnoFactory cursoTurnoFactory;\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private InstituicaoFactory instituicaoFactory;\n	@Autowired private JWTFactory jwtFactory;\n	@Autowired private LocalOfertaFactory localOfertaFactory;\n	@Autowired private MunicipioDomainFactory municipioDomainFactory;\n	@Autowired private SolicitacaoDadosEstudanteFactory solicitacaoDadosEstudanteFactory;\n\n	record CursoAndMunicipioRecord(Curso curso, Municipio municipio) {\n	}\n\n	private CursoAndMunicipioRecord createCursoAndMunicipioRecord() {\n		var curso = this.cursoFactory.createRandom();\n		var municipio = this.municipioDomainFactory.createRandom();\n		this.localOfertaFactory.create(spec -> {\n			spec.cursoId.set(curso.getId());\n			spec.municipioId.set(municipio.getId());\n		});\n		return new CursoAndMunicipioRecord(curso, municipio);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void loadSolicitacaoDadosWithoutTokenExpectUnauthorized() {\n		given()\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void loadSolicitacaoDadosWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(withBearerAuthorization(""tokenInvalido""))\n				.get(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando não houver token de autenticação"")\n	void saveSolicitacaoDadosWithoutTokenExpectUnauthorized() {\n		given()\n				.post(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Não deve ser autorizado quando o token de autenticação for inválido"")\n	void saveSolicitacaoDadosWithInvalidTokenExpectUnauthorized() {\n		given()\n				.header(withBearerAuthorization(""tokenInvalido""))\n				.post(BASE_URL)\n				.then()\n				.statusCode(401);\n	}\n\n	@Test\n	@DisplayName(""Deve salvar com sucesso a solicitação de dados de um estudante quando há uma data de ano fim"")\n	void saveSolicitacaoDadosWithDataAnoFimExpectSuccess() {\n		var cursoAndMunicipioRecord = this.createCursoAndMunicipioRecord();\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudanteFormITDto = this.solicitacaoDadosEstudanteFormITDtoFactory.createWithDataAnoFim(c -> {\n			c.cursoId.set(cursoAndMunicipioRecord.curso.getId());\n			c.municipioId.set(cursoAndMunicipioRecord.municipio.getId());\n		});\n		var dataAtual = Instant.now();\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(solicitacaoDadosEstudanteFormITDto)\n				.post(BASE_URL + ""?estudanteId="" + estudante.getId())\n				.then()\n				.statusCode(200);\n\n		var solicitacaoDadosEstudanteInDb = this.dao.queryFactory()\n				.selectFrom(solicitacaoDadosEstudante)\n				.fetchOne();\n\n		assertThat(solicitacaoDadosEstudanteInDb.getEstudanteId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getInstituicaoId()).isEqualTo(cursoAndMunicipioRecord.curso.getInstituicaoId());\n		assertThat(solicitacaoDadosEstudanteInDb.getCursoId()).isEqualTo(cursoAndMunicipioRecord.curso.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getMunicipioId()).isEqualTo(cursoAndMunicipioRecord.municipio.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormITDto.getSituacaoVinculoId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormITDto.getDataAnoInicio().toString()));\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAnoFim()).isEqualTo(\n				parseYearLastMonthAndDay(solicitacaoDadosEstudanteFormITDto.getDataAnoFim().toString()));\n		assertThat(solicitacaoDadosEstudanteInDb.getDataSolicitacao()).isCloseTo(dataAtual, ignoringMicros());\n		assertThat(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAtualizacao()).isCloseTo(dataAtual, ignoringMicros());\n		assertThat(solicitacaoDadosEstudanteInDb.getAutorAtualizacaoId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getSolicitacaoAtendida()).isFalse();\n		assertThat(solicitacaoDadosEstudanteInDb.getDataSolicitacaoAtendida()).isNull();\n		assertThat(solicitacaoDadosEstudanteInDb.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve salvar com sucesso a solicitação de dados de um estudante quando não há uma data de ano fim"")\n	void saveSolicitacaoDadosWithoutDataAnoFimExpectSuccess() {\n		var cursoAndMunicipioRecord = this.createCursoAndMunicipioRecord();\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudanteFormITDto = this.solicitacaoDadosEstudanteFormITDtoFactory.createWithoutDataAnoFim(c -> {\n			c.cursoId.set(cursoAndMunicipioRecord.curso.getId());\n			c.municipioId.set(cursoAndMunicipioRecord.municipio.getId());\n		});\n		var dataAtual = Instant.now();\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(solicitacaoDadosEstudanteFormITDto)\n				.post(BASE_URL + ""?estudanteId="" + estudante.getId())\n				.then()\n				.statusCode(200);\n\n		var solicitacaoDadosEstudanteInDb = this.dao.queryFactory()\n				.selectFrom(solicitacaoDadosEstudante)\n				.fetchOne();\n\n		assertThat(solicitacaoDadosEstudanteInDb.getEstudanteId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getInstituicaoId()).isEqualTo(cursoAndMunicipioRecord.curso.getInstituicaoId());\n		assertThat(solicitacaoDadosEstudanteInDb.getCursoId()).isEqualTo(cursoAndMunicipioRecord.curso.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getMunicipioId()).isEqualTo(cursoAndMunicipioRecord.municipio.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormITDto.getSituacaoVinculoId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormITDto.getDataAnoInicio().toString()));\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAnoFim()).isNull();\n		assertThat(solicitacaoDadosEstudanteInDb.getDataSolicitacao()).isCloseTo(dataAtual, ignoringMicros());\n		assertThat(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAtualizacao()).isCloseTo(dataAtual, ignoringMicros());\n		assertThat(solicitacaoDadosEstudanteInDb.getAutorAtualizacaoId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getSolicitacaoAtendida()).isFalse();\n		assertThat(solicitacaoDadosEstudanteInDb.getDataSolicitacaoAtendida()).isNull();\n		assertThat(solicitacaoDadosEstudanteInDb.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso as solicitações de dados de um estudante"")\n	void loadSolicitacaoDadosExpectSuccess() {\n		var instituicao = this.instituicaoFactory.createRandom();\n		var sistemaOrigem = SistemaOrigemRefEnum.getById(instituicao.getSistemaOrigemInstituicao());\n		var curso = this.cursoFactory.create(sistemaOrigem, spec -> spec.instituicaoId.set(instituicao.getId()));\n		var cursoTurno = this.cursoTurnoFactory.create(spec -> spec.cursoId.set(curso.getId()));\n		var municipio = this.municipioDomainFactory.createRandom();\n		this.localOfertaFactory.create(spec -> {\n			spec.cursoId.set(curso.getId());\n			spec.municipioId.set(municipio.getId());\n		});\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.instituicaoId.set(instituicao.getId());\n			s.cursoId.set(curso.getId());\n			s.municipioId.set(municipio.getId());\n			s.turnoId.set(cursoTurno.getTurnoId());\n			s.autorSolicitacaoId.set(estudante.getId());\n			s.autorAtualizacaoId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		});\n\n		var resultList = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + ""?estudanteId="" + estudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath().getList(BASE_PATH, SolicitacaoDadosEstudanteDto.class);\n		var result = resultList.iterator().next();\n\n		assertThat(result.getId()).isEqualTo(solicitacaoDadosEstudante.getId());\n		assertThat(result.getInstituicaoId()).isEqualTo(instituicao.getId());\n		assertThat(result.getNomeInstituicao()).isEqualTo(instituicao.getNome());\n		assertThat(result.getSiglaInstituicao()).isEqualTo(instituicao.getSigla());\n		assertThat(result.getSistemaOrigemInstituicaoId()).isEqualTo(instituicao.getSistemaOrigemInstituicao());\n		assertThat(result.getCursoId()).isEqualTo(curso.getId());\n		assertThat(result.getNomeCurso()).isEqualTo(curso.getNome());\n		assertThat(result.getTurnoId()).isEqualTo(cursoTurno.getTurnoId());\n		assertThat(result.getCargaHorariaCurso()).isEqualTo(curso.getCargaHoraria());\n		assertThat(result.getMunicipioId()).isEqualTo(municipio.getId());\n		assertThat(result.getNomeMunicipio()).isEqualTo(municipio.getNome());\n		assertThat(result.getUfId()).isEqualTo(UFRefEnum.getById(municipio.getUfId()).getId());\n		assertThat(result.getNomeUf()).isEqualTo(UFRefEnum.getById(municipio.getUfId()).getNome());\n		assertThat(result.getDataAnoInicio()).isEqualTo(solicitacaoDadosEstudante.getDataAnoInicio());\n		assertThat(result.getDataAnoFim()).isEqualTo(solicitacaoDadosEstudante.getDataAnoFim());\n		assertThat(result.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudante.getSituacaoVinculoId());\n		assertThat(result.getDataSolicitacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosEstudante.getDataSolicitacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorSolicitacao()).isEqualTo(estudante.getNomeSocial());\n		assertThat(result.getDataAtualizacao()).isEqualTo(LocalDate.ofInstant(solicitacaoDadosEstudante.getDataAtualizacao(), ZoneId.systemDefault()));\n		assertThat(result.getNomeAutorAtualizacao()).isEqualTo(estudante.getNomeSocial());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando não houver nenhuma solicitação de dados para o estudante"")\n	void loadSolicitacaoDadosWithoutSolicitacaoExpectSuccessAndEmptyResponse() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var result = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + ""?estudanteId="" + estudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath().getList(BASE_PATH, SolicitacaoDadosEstudanteDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar com sucesso uma lista vazia quando a solicitação de dados de um estudante já estiver sido atendida"")\n	void loadSolicitacaoDadosWhenIsAlreadyAtendidaExpectSuccessAndEmptyResponse() {\n		var estudante = this.estudanteFactory.createRandom();\n		this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.TRUE);\n		});\n\n		var resultList = given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.get(BASE_URL + ""?estudanteId="" + estudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath().getList(BASE_PATH, SolicitacaoDadosEstudanteDto.class);\n\n		assertThat(resultList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve atualizar com sucesso a solicitação de dados de um estudante quando há uma data de ano fim"")\n	void updateSolicitacaoDadosWithDataAnoFimExpectSuccess() {\n		var cursoAndMunicipioRecord1 = this.createCursoAndMunicipioRecord();\n		var cursoAndMunicipioRecord2 = this.createCursoAndMunicipioRecord();\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.cursoId.set(cursoAndMunicipioRecord1.curso.getId());\n			s.municipioId.set(cursoAndMunicipioRecord1.municipio.getId());\n		});\n		var solicitacaoDadosEstudanteFormITDto = this.solicitacaoDadosEstudanteFormITDtoFactory.createWithDataAnoFim(c -> {\n			c.cursoId.set(cursoAndMunicipioRecord2.curso.getId());\n			c.municipioId.set(cursoAndMunicipioRecord2.municipio.getId());\n		});\n		var dataAtual = Instant.now();\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(solicitacaoDadosEstudanteFormITDto)\n				.put(BASE_URL + ""/"" + solicitacaoDadosEstudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getObject(BASE_PATH, SolicitacaoDadosEstudanteFormITDto.class);\n\n		var solicitacaoDadosEstudanteInDb = this.dao.safeFind(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId());\n\n		assertThat(solicitacaoDadosEstudanteInDb.getId()).isEqualTo(solicitacaoDadosEstudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getEstudanteId()).isEqualTo(solicitacaoDadosEstudante.getEstudanteId());\n		assertThat(solicitacaoDadosEstudanteInDb.getInstituicaoId()).isEqualTo(cursoAndMunicipioRecord2.curso.getInstituicaoId());\n		assertThat(solicitacaoDadosEstudanteInDb.getCursoId()).isEqualTo(cursoAndMunicipioRecord2.curso.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getMunicipioId()).isEqualTo(cursoAndMunicipioRecord2.municipio.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormITDto.getSituacaoVinculoId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormITDto.getDataAnoInicio().toString()));\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAnoFim()).isEqualTo(\n				parseYearLastMonthAndDay(solicitacaoDadosEstudanteFormITDto.getDataAnoFim().toString()));\n		assertThat(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataSolicitacao()).isBefore(dataAtual);\n		assertThat(solicitacaoDadosEstudanteInDb.getAutorAtualizacaoId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAtualizacao()).isCloseTo(dataAtual, ignoringMicros());\n		assertThat(solicitacaoDadosEstudanteInDb.getSolicitacaoAtendida()).isFalse();\n		assertThat(solicitacaoDadosEstudanteInDb.getDataSolicitacaoAtendida()).isNull();\n		assertThat(solicitacaoDadosEstudanteInDb.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve atualizar com sucesso a solicitação de dados de um estudante quando não há data de ano fim"")\n	void updateSolicitacaoDadosWithoutDataAnoFimExpectSuccess() {\n		var cursoAndMunicipioRecord1 = this.createCursoAndMunicipioRecord();\n		var cursoAndMunicipioRecord2 = this.createCursoAndMunicipioRecord();\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.cursoId.set(cursoAndMunicipioRecord1.curso.getId());\n			s.municipioId.set(cursoAndMunicipioRecord1.municipio.getId());\n		});\n		var solicitacaoDadosEstudanteFormITDto = this.solicitacaoDadosEstudanteFormITDtoFactory.createWithoutDataAnoFim(c -> {\n			c.cursoId.set(cursoAndMunicipioRecord2.curso.getId());\n			c.municipioId.set(cursoAndMunicipioRecord2.municipio.getId());\n		});\n		var dataAtual = Instant.now();\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(solicitacaoDadosEstudanteFormITDto)\n				.put(BASE_URL + ""/"" + solicitacaoDadosEstudante.getId())\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.jsonPath()\n				.getObject(BASE_PATH, SolicitacaoDadosEstudanteFormITDto.class);\n\n		var solicitacaoDadosEstudanteInDb = this.dao.safeFind(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId());\n\n		assertThat(solicitacaoDadosEstudanteInDb.getId()).isEqualTo(solicitacaoDadosEstudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getEstudanteId()).isEqualTo(solicitacaoDadosEstudante.getEstudanteId());\n		assertThat(solicitacaoDadosEstudanteInDb.getInstituicaoId()).isEqualTo(cursoAndMunicipioRecord2.curso.getInstituicaoId());\n		assertThat(solicitacaoDadosEstudanteInDb.getCursoId()).isEqualTo(cursoAndMunicipioRecord2.curso.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getMunicipioId()).isEqualTo(cursoAndMunicipioRecord2.municipio.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getSituacaoVinculoId()).isEqualTo(solicitacaoDadosEstudanteFormITDto.getSituacaoVinculoId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAnoInicio()).isEqualTo(\n				parseYearFirstMonthAndDay(solicitacaoDadosEstudanteFormITDto.getDataAnoInicio().toString()));\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAnoFim()).isNull();\n		assertThat(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataSolicitacao()).isBefore(dataAtual);\n		assertThat(solicitacaoDadosEstudanteInDb.getAutorAtualizacaoId()).isEqualTo(estudante.getId());\n		assertThat(solicitacaoDadosEstudanteInDb.getDataAtualizacao()).isCloseTo(dataAtual, ignoringMicros());\n		assertThat(solicitacaoDadosEstudanteInDb.getSolicitacaoAtendida()).isFalse();\n		assertThat(solicitacaoDadosEstudanteInDb.getDataSolicitacaoAtendida()).isNull();\n		assertThat(solicitacaoDadosEstudanteInDb.getMatriculaId()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Não deve permitir atualizar a solicitação de dados de um estudante quando já estiver sido atendida"")\n	void updateSolicitacaoDadosWhenIsAlreadyAtendidaExpectForbidden() {\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.TRUE);\n		});\n		var solicitacaoDadosEstudanteFormITDto = new SolicitacaoDadosEstudanteFormITDto();\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.contentType(JSON)\n				.body(solicitacaoDadosEstudanteFormITDto)\n				.put(BASE_URL + ""/"" + solicitacaoDadosEstudante.getId())\n				.then()\n				.statusCode(403)\n				.body(equalTo(SOLICITACAO_DADOS_SEM_PERMISSAO));\n	}\n\n	@Test\n	@DisplayName(""Deve deletar com sucesso a solicitação de dados de um estudante"")\n	void deleteSolicitacaoDadosExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> s.estudanteId.set(estudante.getId()));\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.delete(BASE_URL + ""/"" + solicitacaoDadosEstudante.getId())\n				.then()\n				.statusCode(200);\n\n		var solicitacaoDadosEstudanteInDb = this.dao.find(SolicitacaoDadosEstudante.class, solicitacaoDadosEstudante.getId());\n\n		assertThat(solicitacaoDadosEstudanteInDb).isNull();\n	}\n\n	@Test\n	@DisplayName(""Não deve permitir deletar a solicitação de dados de um estudante quando ela não existir"")\n	void deleteSolicitacaoDadosWithoutSolicitacaoExpectForbidden() {\n		var estudanteId = this.faker.random().nextLong();\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.delete(BASE_URL + ""/"" + estudanteId)\n				.then()\n				.statusCode(403);\n	}\n\n	@Test\n	@DisplayName(""Não deve permitir deletar a solicitação de dados de outro estudante"")\n	void deleteSolicitacaoDadosWhenSolicitacaoBelongsToOtherStudentExpectForbidden() {\n		var estudanteSolicitacao = this.estudanteFactory.createRandom();\n		var estudanteErrado = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> s.estudanteId.set(estudanteSolicitacao.getId()));\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudanteErrado)))\n				.delete(BASE_URL + ""/"" + solicitacaoDadosEstudante.getId())\n				.then()\n				.statusCode(403);\n	}\n\n	@Test\n	@DisplayName(""Não deve permitir deletar a solicitação de dados de um estudante quando já estiver sido atendida"")\n	void deleteSolicitacaoDadosWhenIsAlreadyAtendidaExpectForbidden() {\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudanteAtendida = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.TRUE);\n		});\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.delete(BASE_URL + ""/"" + solicitacaoDadosEstudanteAtendida.getId())\n				.then()\n				.statusCode(403)\n				.body(equalTo(SOLICITACAO_DADOS_SEM_PERMISSAO));\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.test.restassured;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\n\nimport io.restassured.module.mockmvc.RestAssuredMockMvc;\n\n@SpringJUnit5Test\npublic abstract class RestAssuredMockMvcTest {\n\n	@Autowired\n	private WebApplicationContext webApplicationContext;\n\n	@BeforeEach\n	public void initializeRestAssuredMockMvcWebApplicationContext() {\n		RestAssuredMockMvc.webAppContextSetup(this.webApplicationContext);\n	}\n\n}\n"
test,"package br.ufsc.bridge.jornadaestudante.backend.test.annotation;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.app.config.Profiles.TEST;\nimport static java.lang.annotation.ElementType.TYPE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\nimport static org.springframework.test.context.TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS;\n\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.TestExecutionListeners;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.BackendApplication;\nimport br.ufsc.bridge.jornadaestudante.backend.test.config.BuildPropertiesConfig;\nimport br.ufsc.bridge.jornadaestudante.backend.test.config.DataFactoryConfig;\nimport br.ufsc.bridge.jornadaestudante.backend.test.security.SecurityTestExecutionListener;\n\n@Target({ TYPE })\n@Retention(RUNTIME)\n@Inherited\n@Transactional\n@ActiveProfiles(profiles = { TEST })\n@Import({ DataFactoryConfig.class, BuildPropertiesConfig.class })\n@ComponentScan(value = ""br.ufsc.bridge.jornadaestudante.factory.*"")\n@SpringBootTest(classes = { BackendApplication.class, }, webEnvironment = RANDOM_PORT)\n@TestExecutionListeners(value = { SecurityTestExecutionListener.class }, mergeMode = MERGE_WITH_DEFAULTS)\n@ExtendWith(MockitoExtension.class)\n@Tag(""IntegrationTest"")\npublic @interface SpringJUnit5Test {\n\n}"
