not_service,"package br.ufsc.bridge.pecassinador;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DatabaseApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(DatabaseApplication.class, args);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n@SpringBootApplication\n@EnableScheduling\npublic class PecAssinadorApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(PecAssinadorApplication.class, args);\n	}\n\n}"
not_service,"package br.ufsc.bridge.pecassinador.localidade.latest.dto;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Data\n@Metafy\npublic class MunicipioDto {\n	private String nome;\n\n	private UfEnum uf;\n\n	private String codigoIbge;\n\n	private String numeroCep;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.latest.validator;\n\nimport static br.ufsc.bridge.pecassinador.localidade.latest.dto.MMunicipioDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\n\n@Component\n@RequiredArgsConstructor\npublic class MunicipioDtoValidator implements DtoValidator<MunicipioDto> {\n	public Validator<MunicipioDto> validate(\n			MunicipioDto municipioDto\n	) {\n		val validator = Validator.of(municipioDto);\n\n		validator\n				.check(meta.nome, required)\n				.check(meta.uf, required);\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.latest.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.mapper.UfMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\n\n@Mapper(componentModel = ""spring"", uses = { UfMapper.class })\npublic abstract class MunicipioMapper implements DataMapper<MunicipioDto, Municipio> {\n	public abstract MunicipioDto toDto(Municipio municipio);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.dto;\n\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\n\n@TypeScriptModel\npublic record UfDto(String sigla, String nome) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Entity\n@Table(name = ""TB_UF"")\n@Data\npublic class Uf implements DomainEntityDefault {\n\n	@Id\n	@Column(name = ""CO_UF"")\n	private Long id;\n\n	@Column(name = ""SG_UF"")\n	private String sigla;\n\n	@Column(name = ""NO_UF"")\n	private String nome;\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_PAIS"")\npublic class Pais {\n	@Id\n	@Column(name = ""CO_PAIS"")\n	private Long id;\n\n	@Column(name = ""NO_PAIS"")\n	private String nome;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_MUNICIPIO"")\npublic class Municipio {\n	@Id\n	@Column(name = ""CO_MUNICIPIO"")\n	private Long id;\n\n	@Column(name = ""NO_MUNICIPIO"")\n	private String nome;\n\n	@Column(name = ""NO_MUNICIPIO_FILTRO"")\n	private String nomeFiltro;\n\n	@Column(name = ""CO_IBGE"")\n	private String codigoIbge;\n\n	@Column(name = ""NU_CEP"")\n	private String numeroCep;\n\n	@JoinColumn(name = ""CO_UF"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Uf uf;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@Getter\n@RequiredArgsConstructor\npublic enum UfEnum implements DomainEntityDefault {\n	AC(1L, ""Acre""),\n	AL(2L, ""Alagoas""),\n	AM(3L, ""Amazonas""),\n	AP(4L, ""Amapá""),\n	BA(5L, ""Bahia""),\n	CE(6L, ""Ceará""),\n	DF(7L, ""Distrito Federal""),\n	ES(8L, ""Espírito Santo""),\n	GO(9L, ""Goiás""),\n	MA(10L, ""Maranhão""),\n	MG(11L, ""Minas Gerais""),\n	MS(12L, ""Mato Grosso do Sul""),\n	MT(13L, ""Mato Grosso""),\n	PA(14L, ""Pará""),\n	PB(15L, ""Paraíba""),\n	PE(16L, ""Pernambuco""),\n	PI(17L, ""Piauí""),\n	PR(18L, ""Paraná""),\n	RJ(19L, ""Rio de Janeiro""),\n	RN(20L, ""Rio Grande do Norte""),\n	RO(21L, ""Rondônia""),\n	RR(22L, ""Roraima""),\n	RS(23L, ""Rio Grande do Sul""),\n	SC(24L, ""Santa Catarina""),\n	SE(25L, ""Sergipe""),\n	SP(26L, ""São Paulo""),\n	TO(27L, ""Tocantins"");\n\n	private static final Map<Long, UfEnum> map = Arrays\n			.stream(UfEnum.values())\n			.collect(toMap(UfEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String nome;\n\n	public static UfEnum getById(Long id) {\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\n@Mapper(componentModel = ""spring"")\npublic class UfMapper extends DomainEntityDefaultMapper<UfEnum, Uf> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.dto.UfDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\n@Mapper(componentModel = ""spring"")\npublic interface UfDtoMapper extends DataMapper<UfDto, Uf> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.service.UfListService;\nimport br.ufsc.bridge.pecassinador.localidade.common.dto.UfDto;\n\n@RestController\n@RequestMapping(""/api/localidades/ufs"")\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class UfListController {\n	private final UfListService ufListService;\n\n	@GetMapping\n	public ResponseEntity<List<UfDto>> listUfs() {\n		return ResponseEntity.ok(this.ufListService.getUfs());\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.service.MunicipioListService;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@RestController\n@RequestMapping(""/api/localidades/ufs/{siglaUf}/municipios"")\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class MunicipioListController {\n	private final MunicipioListService municipioListService;\n\n	@GetMapping()\n	public ResponseEntity<List<MunicipioDto>> listMunicipios(\n			@PathVariable UfEnum siglaUf,\n			@RequestParam(required = false) String nomeFilter\n	) {\n		return ResponseEntity.ok(this.municipioListService.getMunicipios(siglaUf, nomeFilter));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.repository;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.repository.query.Param;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\n\npublic interface MunicipioRepository extends JpaRepository<Municipio, Long> {\n	Optional<Municipio> findByNomeIgnoreCaseAndUf_Id(String nome, Long ufId);\n\n	List<Municipio> findTop10ByUfIdAndNomeFiltroStartingWithIgnoreCaseOrderByNome(\n			@Param(""ufId"") Long ufId,\n			@Param(""nomeFiltro"") String nomeFiltro\n	);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.repository;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\npublic interface UfRepository extends JpaRepository<Uf, Long> {\n	List<Uf> findByOrderByNome();\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Pais;\n\n@Repository\npublic interface PaisRepository extends JpaRepository<Pais, Long> {\n	@Query(""""""\n			  SELECT pais\n			  FROM Pais pais\n			  WHERE pais.nome\n			  LIKE upper(concat('%', :nome, '%'))\n			"""""")\n	Optional<Pais> findByNome(@Param(""nome"") String nome);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.v1.dto;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Data\npublic class V1MunicipioDto {\n	private String nome;\n\n	private UfEnum uf;\n\n	private String codigoIbge;\n\n	private String numeroCep;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.auditoria.model;\n\nimport java.time.LocalDateTime;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_AUDITORIA_EVENTO"")\npublic class AuditoriaEvento {\n	private static final String SEQUENCE_NAME = ""SQ_AUDITEVENTO_COSEQAUDITEVENT"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_AUDITORIA_EVENTO"")\n	private Long id;\n\n	@Column(name = ""NO_SESSAO"")\n	private String nomeSessao;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_DOCUMENTO"")\n	private Documento documento;\n\n	@Column(name = ""DT_CRIACAO"")\n	private LocalDateTime dataCriacao;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_TIPO_AUDITORIA_EVENTO"")\n	private TipoAuditoriaEvento tipoAuditoriaEvento;\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.auditoria.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Entity\n@Table(name = ""TB_TIPO_AUDITORIA_EVENTO"")\n@Data\npublic class TipoAuditoriaEvento {\n	@Id\n	@Column(name = ""CO_TIPO_EVENTO"")\n	private Long id;\n\n	@Column(name = ""NO_TIPO_EVENTO"")\n	private String nome;\n}"
not_service,"package br.ufsc.bridge.pecassinador.auditoria.enums;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\n@Getter\n@RequiredArgsConstructor\npublic enum AuditoriaEventoEnum {\n	VALIDAR_ASSINATURA(1L),\n	ACESSO_PRESCRICAO(2L),\n	INVALIDAR_PRESCRICAO(3L);\n\n	private final Long id;\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.auditoria.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.auditoria.model.AuditoriaEvento;\n\n@Repository\npublic interface AuditoriaEventoRepository extends JpaRepository<AuditoriaEvento, Long> {\n}"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.latest.dto;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.cidadao.common.enums.SexoEnum;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\n\n@Data\n@Metafy\n@TypeScriptModel\npublic class CidadaoDto {\n	private Long id;\n\n	private String cpf;\n\n	private String cns;\n\n	private String nome;\n\n	private String nomeSocial;\n\n	private String nomeMae;\n\n	private LocalDate dataNascimento;\n\n	private SexoEnum sexo;\n\n	private String paisNascimento;\n\n	private MunicipioDto municipioNascimento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.latest.validator;\n\nimport static br.ufsc.bridge.pecassinador.cidadao.latest.dto.MCidadaoDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.cns;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.cpf;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.localidade.latest.validator.MunicipioDtoValidator;\n\n@Component\n@RequiredArgsConstructor\npublic class CidadaoDtoValidator implements DtoValidator<CidadaoDto> {\n	private final MunicipioDtoValidator municipioDtoValidator;\n	private static final String BRASIL = ""BRASIL"";\n\n	public Validator<CidadaoDto> validate(\n			CidadaoDto cidadaoDto\n	) {\n		val validator = Validator.of(cidadaoDto);\n\n		validator\n				.check(meta.cpf, cpf)\n				.check(meta.cns, cns)\n				.check(meta.nome, required)\n				.check(meta.dataNascimento, required)\n				.check(meta.sexo, required);\n\n		if (BRASIL.equalsIgnoreCase(cidadaoDto.getPaisNascimento())) {\n			validator.check(meta.municipioNascimento(), required);\n			if (validator.isValid()) {\n				validator.formError(meta.municipioNascimento(), municipioDtoValidator.validate(cidadaoDto.getMunicipioNascimento()));\n			}\n		}\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.latest.mapper;\n\nimport java.util.Optional;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.cidadao.common.mapper.SexoMapper;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Cidadao;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Sexo;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.MunicipioRepository;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.PaisRepository;\nimport br.ufsc.bridge.pecassinador.localidade.latest.mapper.MunicipioMapper;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\n@Mapper(\n		componentModel = ""spring"",\n		uses = {\n				MunicipioMapper.class,\n				SexoMapper.class\n		}\n)\n@RequiredArgsConstructor\npublic abstract class CidadaoMapper implements DataMapper<CidadaoDto, Cidadao> {\n	@PersistenceContext\n	private EntityManager entityManager;\n\n	@Autowired\n	private PaisRepository paisRepository;\n\n	@Autowired\n	private MunicipioRepository municipioRepository;\n\n	@Mapping(target = ""id"", ignore = true)\n	@Mapping(target = ""paisNascimento"", ignore = true)\n	@Mapping(target = ""municipioNascimento"", ignore = true)\n	public abstract Cidadao toEntity(CidadaoDto cidadaoDto);\n\n	@Mapping(target = ""paisNascimento"", ignore = true)\n	public abstract CidadaoDto toDto(Cidadao cidadao);\n\n	@AfterMapping\n	void afterEntityMapping(\n			@MappingTarget Cidadao cidadao, CidadaoDto dto\n	) {\n		Optional.ofNullable(dto.getSexo()).ifPresent(sexo -> cidadao.setSexo(this.entityManager.getReference(Sexo.class, sexo.getId())));\n		Optional.ofNullable(dto.getPaisNascimento()).ifPresent(pais -> cidadao.setPaisNascimento(this.paisRepository.findByNome(pais).orElse(null)));\n		Optional.ofNullable(dto.getMunicipioNascimento()).ifPresent(municipio -> cidadao.setMunicipioNascimento(\n				this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(\n						municipio.getNome(),\n						municipio.getUf().getId()\n				).orElse(null)\n		));\n	}\n\n	@AfterMapping\n	void afterDtoMapping(\n			@MappingTarget CidadaoDto dto,\n			Cidadao cidadao\n	) {\n		Optional.ofNullable(cidadao.getPaisNascimento()).ifPresent(pais -> dto.setPaisNascimento(pais.getNome()));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.latest.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Cidadao;\n\n@Repository\npublic interface CidadaoRepository extends JpaRepository<Cidadao, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.common.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_SEXO"")\npublic class Sexo implements DomainEntityDefault {\n	@Id\n	@Column(name = ""CO_SEXO"")\n	private Long id;\n\n	@Column(name = ""DS_SEXO"")\n	private String descricao;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.common.model;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Pais;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_CIDADAO"")\npublic class Cidadao {\n\n	private static final String SEQUENCE_NAME = ""SQ_CIDADAO_COSEQCIDADAO"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_CIDADAO"")\n	private Long id;\n\n	@Column(name = ""NU_CPF"")\n	private String cpf;\n\n	@Column(name = ""NU_CNS"")\n	private String cns;\n\n	@Column(name = ""NO_CIDADAO"")\n	private String nome;\n\n	@Column(name = ""NO_SOCIAL"")\n	private String nomeSocial;\n\n	@Column(name = ""NO_MAE"")\n	private String nomeMae;\n\n	@Column(name = ""DT_NASCIMENTO"")\n	private LocalDate dataNascimento;\n\n	@JoinColumn(name = ""CO_SEXO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Sexo sexo;\n\n	@JoinColumn(name = ""CO_PAIS_NASCIMENTO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Pais paisNascimento;\n\n	@JoinColumn(name = ""CO_MUNICIPIO_NASCIMENTO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Municipio municipioNascimento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.common.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@RequiredArgsConstructor\n@Getter\npublic enum SexoEnum implements DomainEntityDefault {\n\n	MASCULINO(1L, ""Masculino""),\n	FEMININO(2L, ""Feminino""),\n	AMBOS(3L, ""Ambos""),\n	NAO_INFORMADO(4L, ""Não Informado""),\n	IGNORADO(5L, ""Ignorado""),\n	INDETERMINADO(6L, ""Indeterminado"");\n\n	private static final Map<Long, SexoEnum> map = Arrays\n			.stream(SexoEnum.values())\n			.collect(toMap(SexoEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String descricao;\n\n	public static SexoEnum getById(Long id) {\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.common.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.cidadao.common.enums.SexoEnum;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Sexo;\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\n\n@Mapper(componentModel = ""spring"")\npublic class SexoMapper extends DomainEntityDefaultMapper<SexoEnum, Sexo> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.v1.dto;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.cidadao.common.enums.SexoEnum;\nimport br.ufsc.bridge.pecassinador.localidade.v1.dto.V1MunicipioDto;\n\n@Data\npublic class V1CidadaoDto {\n	private Long id;\n\n	private String cpf;\n\n	private String cns;\n\n	private String nome;\n\n	private String nomeSocial;\n\n	private String nomeMae;\n\n	private LocalDate dataNascimento;\n\n	private SexoEnum sexo;\n\n	private String paisNascimento;\n\n	private V1MunicipioDto municipioNascimento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.web;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class IndexController {\n\n	private static final String INDEX_HTML = ""/index.html"";\n\n	@GetMapping(value = ""/"")\n	public String index() {\n		return INDEX_HTML;\n	}\n\n	@GetMapping(value = ""/{dummy:(?!api|assets|oauth2)[a-zA-Z0-9-]+$}/**"")\n	public String frontendRoute() {\n		return INDEX_HTML;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.termo.model;\n\nimport java.time.LocalDateTime;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_CONFIRMACAO_TERMO"")\npublic class ConfirmacaoTermo {\n	private static final String SEQUENCE_NAME = ""SQ_CONFIRMTERMO_COSEQCONFRMTRM"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_CONFIRMACAO_TERMO"")\n	private Long id;\n\n	@Column(name = ""NU_CPF"")\n	private String cpf;\n\n	@Column(name = ""DT_CONFIRMACAO_TERMO"")\n	private LocalDateTime dataConfirmacaoTermo = LocalDateTime.now();\n\n}"
not_service,"package br.ufsc.bridge.pecassinador.termo.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\nimport br.ufsc.bridge.pecassinador.termo.service.ConfirmacaoTermoGetService;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(""/api/confirmacao-termo/aceito"")\n@Secured(GOVBR)\npublic class ConfirmacaoTermoGetController {\n	private final ConfirmacaoTermoGetService confirmacaoTermoGetService;\n\n	@GetMapping\n	public ResponseEntity<Boolean> accept(\n			SecuredContext securedContext\n	) {\n		return ResponseEntity.ok(this.confirmacaoTermoGetService.getConfirmacaoTermo(securedContext.getName()));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.termo.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\nimport br.ufsc.bridge.pecassinador.termo.service.ConfirmacaoTermoAcceptService;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(""/api/confirmacao-termo/aceitar"")\n@Secured(GOVBR)\npublic class ConfirmacaoTermoAcceptController {\n	private final ConfirmacaoTermoAcceptService confirmacaoTermoAcceptService;\n\n	@PostMapping\n	public ResponseEntity<Void> accept(\n			SecuredContext securedContext\n	) {\n		this.confirmacaoTermoAcceptService.accept(securedContext.getName());\n		return ResponseEntity.ok().build();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.termo.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.termo.model.ConfirmacaoTermo;\n\n@Repository\npublic interface ConfirmacaoTermoRepository extends JpaRepository<ConfirmacaoTermo, Long> {\n	boolean existsByCpfAndDataConfirmacaoTermoNotNull(String cpf);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.atestado.validator;\n\nimport static br.ufsc.bridge.pecassinador.documento.latest.dto.MDocumentoTemporarioCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\n\n@Component\n@RequiredArgsConstructor\npublic class AtestadoValidator implements DtoValidator<DocumentoTemporarioCreateDto> {\n	public Validator<DocumentoTemporarioCreateDto> validate(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n		// TODO: (Legacy) Rever regras quando issue de validação de atestados for criada\n		val validator = Validator.of(documentoTemporarioCreateDto);\n\n		validator\n				.check(meta.prescritor(), required)\n				.check(meta.cidadao(), required);\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.atestado.controller;\n\nimport static br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum.ATESTADO;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SERVICE;\nimport static org.springframework.http.HttpStatus.CREATED;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestPart;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport br.ufsc.bridge.pecassinador.atestado.validator.AtestadoValidator;\nimport br.ufsc.bridge.pecassinador.common.util.DocumentoUtils;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateResponseDto;\nimport br.ufsc.bridge.pecassinador.documento.latest.service.DocumentoTemporarioCreateService;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.validation.Valid;\n\n@RequestMapping(""/api/v1/atestados"")\n@RestController\n@RequiredArgsConstructor\n@Secured(SERVICE)\npublic class AtestadoCreateController {\n	private final DocumentoTemporarioCreateService documentoTemporarioCreateService;\n	private final AtestadoValidator validator;\n\n	@PostMapping\n	public ResponseEntity<DocumentoTemporarioCreateResponseDto> createAtestado(\n			@Valid @RequestPart(""atestado"") DocumentoTemporarioCreateDto documentoTemporarioCreateDto,\n			@RequestPart MultipartFile pdf,\n			SecuredContext securedContext\n	) throws IOException {\n		validator.validate(documentoTemporarioCreateDto).throwIfInvalid();\n		DocumentoTemporarioCreateDto documentoTempCreateDto = DocumentoUtils.buildDocumentoTemporarioCreateDto(documentoTemporarioCreateDto, pdf, securedContext, ATESTADO);\n\n		return ResponseEntity\n				.status(CREATED)\n				.body(this.documentoTemporarioCreateService.create(documentoTempCreateDto));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.atestado.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SERVICE;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.atestado.service.AtestadoEmitService;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\n@RequestMapping(""/api/v1/atestados/{codigoAcesso}/emitir"")\n@RestController\n@RequiredArgsConstructor\n@Secured(SERVICE)\npublic class AtestadoEmitController {\n	private final AtestadoEmitService atestadoEmitService;\n\n	@PostMapping\n	public ResponseEntity<ByteArrayResource> emit(@PathVariable String codigoAcesso, SecuredContext securedContext) throws IOException {\n		val contaServicoId = (Long) securedContext.getAttributes().get(""id"");\n		return this.atestadoEmitService.emit(codigoAcesso, contaServicoId);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.atestado.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.QUALIFIED_SIGN;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.assinatura.service.DocumentoSignService;\nimport br.ufsc.bridge.pecassinador.documento.common.dto.DocumentoSignDto;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.servlet.http.HttpServletResponse;\n\n@RequestMapping(""/api/v1/atestados/{documentoId}/assinar"")\n@RestController\n@RequiredArgsConstructor\n@Secured(QUALIFIED_SIGN)\npublic class AtestadoSignController {\n	private final DocumentoSignService documentoSignService;\n\n	@GetMapping\n	public void signAtestado(\n			@PathVariable Long documentoId,\n			@RequestParam String clientId,\n			@RequestParam String cpf,\n			SecuredContext securedContext,\n			HttpServletResponse response\n	) throws IOException {\n		val documentoSignRequestDto = new DocumentoSignDto(documentoId, securedContext.getCredentials());\n		val redirectUri = this.documentoSignService.sign(documentoSignRequestDto);\n\n		response.setStatus(HttpStatus.FOUND.value());\n		response.sendRedirect(redirectUri);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.exception;\n\npublic class AuthorizationException extends RuntimeException {\n\n	public AuthorizationException() {\n		super();\n	}\n\n	public AuthorizationException(String message) {\n		super(message);\n	}\n\n	public AuthorizationException(String message, Throwable cause) {\n		super(message, cause);\n	}\n\n	public AuthorizationException(Throwable cause) {\n		super(cause);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.exception;\n\nimport java.io.Serial;\n\nimport br.ufsc.bridge.platform.validation.form.errors.FormError;\n\npublic class ValidationException extends RuntimeException {\n	@Serial\n	private static final long serialVersionUID = -317364489175895546L;\n	private final FormError errors;\n\n	public ValidationException(FormError errors) {\n		super(errors.getErrors().toString());\n		this.errors = errors;\n	}\n\n	public FormError getErrors() {\n		return this.errors;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.exception;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n\nimport jakarta.persistence.EntityNotFoundException;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler extends ResponseEntityExceptionHandler {\n\n	@ExceptionHandler({ EntityNotFoundException.class })\n	protected ResponseEntity<Object> handleHttpNotFoundExceptions(Exception ex, WebRequest request) {\n		return handleExceptionInternal(ex, ex.getMessage(), new HttpHeaders(), HttpStatus.NOT_FOUND, request);\n	}\n\n	@ExceptionHandler({ AccessException.class })\n	protected ResponseEntity<Object> handleHttpAccessExceptions(Exception ex, WebRequest request) {\n		return handleExceptionInternal(ex, ex.getMessage(), new HttpHeaders(), HttpStatus.FORBIDDEN, request);\n	}\n\n	@ExceptionHandler({ AuthorizationException.class })\n	protected ResponseEntity<Object> handleHttpAuthorizationExceptions(Exception ex, WebRequest request) {\n		return handleExceptionInternal(ex, ex.getMessage(), new HttpHeaders(), HttpStatus.UNAUTHORIZED, request);\n	}\n\n	@ExceptionHandler({ ValidationException.class })\n	protected ResponseEntity<Object> handleValidationException(Exception ex, WebRequest request) {\n		return handleExceptionInternal(ex, ex.getMessage(), new HttpHeaders(), HttpStatus.UNPROCESSABLE_ENTITY, request);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.exception;\n\npublic class AccessException extends RuntimeException {\n\n	public AccessException() {\n		super();\n	}\n\n	public AccessException(String message) {\n		super(message);\n	}\n\n	public AccessException(String message, Throwable cause) {\n		super(message, cause);\n	}\n\n	public AccessException(Throwable cause) {\n		super(cause);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation;\n\npublic interface DtoValidator<DTO> {\n	Validator<DTO> validate(DTO dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation;\n\nimport java.io.Serial;\n\nimport lombok.AllArgsConstructor;\nimport lombok.experimental.Delegate;\n\nimport br.ufsc.bridge.pecassinador.common.exception.ValidationException;\nimport br.ufsc.bridge.platform.validation.form.errors.FormError;\nimport br.ufsc.bridge.platform.validation.form.errors.FormErrorImpl;\n\n@AllArgsConstructor\npublic class Validator<T> implements FormError<T> {\n\n	@Serial\n	private static final long serialVersionUID = -7891235899595337345L;\n\n	@Delegate\n	private FormError<T> errors;\n\n	public static <T> Validator<T> of(T value) {\n		return new Validator<>(new FormErrorImpl(value));\n	}\n\n	public void throwIfInvalid() {\n		if (!this.isValid()) {\n			throw new ValidationException(this.errors);\n		}\n	}\n}"
not_service,"package br.ufsc.bridge.pecassinador.common.validation;\n\nimport br.ufsc.bridge.pecassinador.common.validation.rules.AfterEqualTodayRule;\nimport br.ufsc.bridge.pecassinador.common.validation.rules.IsEqualRule;\nimport br.ufsc.bridge.pecassinador.common.validation.rules.NotBlankRule;\nimport br.ufsc.bridge.pecassinador.common.validation.rules.NumericRule;\n\npublic class Rules {\n	public static NumericRule numeric = new NumericRule();\n\n	public static NotBlankRule notBlank = new NotBlankRule();\n\n	public static AfterEqualTodayRule afterEqualToday = new AfterEqualTodayRule();\n\n	public static IsEqualRule isEqualTo(Object compareTo) {\n		return new IsEqualRule(compareTo);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation;\n\npublic interface OpcionalDtoValidator<DTO> extends DtoValidator<DTO> {\n\n	Validator<DTO> validateOpcional(DTO dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation.rules;\n\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.platform.validation.engine.Rule;\nimport br.ufsc.bridge.platform.validation.rules.MatchRule;\n\n@NoArgsConstructor\npublic class NumericRule implements Rule<String> {\n	private MatchRule match = new MatchRule(""^[0-9]+$"");\n\n	public String validate(String value) {\n		return this.match.validate(value);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation.rules;\n\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.platform.validation.engine.Rule;\n\n@NoArgsConstructor\npublic class NotBlankRule implements Rule<String> {\n\n	@Override\n	public String validate(String value) {\n		if (value != null && value.isBlank()) {\n			return ""Este campo não pode estar em branco"";\n		}\n		return null;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation.rules;\n\nimport br.ufsc.bridge.platform.validation.engine.Rule;\nimport br.ufsc.bridge.platform.validation.util.Util;\n\npublic class IsEqualRule<T> implements Rule<T> {\n\n	private final Object compareTo;\n\n	public IsEqualRule(T compareTo) {\n		this.compareTo = compareTo;\n	}\n\n	@Override\n	public String validate(T value) {\n		if (!Util.isEmpty(value) && !value.equals(compareTo)) {\n			return ""Deve ser igual a "" + compareTo;\n		}\n		return null;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation.rules;\n\nimport java.time.LocalDate;\n\nimport br.ufsc.bridge.platform.validation.engine.Rule;\nimport br.ufsc.bridge.platform.validation.util.Util;\n\npublic class AfterEqualTodayRule implements Rule<LocalDate> {\n	@Override\n	public String validate(LocalDate value) {\n		if (!Util.isEmpty(value) && value.isBefore(LocalDate.now())) {\n			return ""Não deve ser anterior à data atual"";\n		}\n		return null;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport lombok.val;\n\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.http.ContentDisposition;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\n\npublic class ResponseUtils {\n	public static ResponseEntity<ByteArrayResource> downloadPdf(byte[] pdfBytes, String filename) {\n		val resource = new ByteArrayResource(pdfBytes);\n		val headers = new HttpHeaders();\n		val contentDisposition = ContentDisposition\n				.builder(""inline"")\n				.filename(filename)\n				.build();\n\n		headers.setContentDisposition(contentDisposition);\n\n		return ResponseEntity.ok()\n				.headers(headers)\n				.contentLength(resource.contentLength())\n				.contentType(MediaType.APPLICATION_PDF)\n				.body(resource);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.Date;\nimport java.util.Objects;\n\npublic class DateUtils {\n	public static LocalDate asLocalDate(Date date) {\n		if (Objects.nonNull(date)) {\n			return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n		}\n		return null;\n	}\n}"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.NoArgsConstructor;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.safety.Safelist;\n\n@NoArgsConstructor(access = PRIVATE)\npublic class StringUtils {\n	public static String removeHtml(String input) {\n		if (input == null) {\n			return null;\n		}\n		String html = Jsoup.clean(input, """", Safelist.none().addTags(""br""));\n		Document document = Jsoup.parse(html);\n		document.select(""br"").append("" "");\n		return document.text();\n	}\n\n	public static String replaceDuplicateWhitespaceCharsBySingleWhitespace(String input) {\n		if (input == null) {\n			return null;\n		}\n\n		String trimmedInput = input.trim();\n		return trimmedInput.replaceAll(""\\s+"", "" "");\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Rectangle2D;\nimport java.util.Optional;\n\nimport lombok.val;\n\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.PDResources;\nimport org.apache.pdfbox.pdmodel.common.PDRectangle;\nimport org.apache.pdfbox.pdmodel.common.PDStream;\nimport org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;\nimport org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;\nimport org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;\nimport org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;\nimport org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class PdfLabelUtils {\n\n	public static float getPageHeight(PDPage page) {\n		val pageOrientation = page.getRotation();\n\n		return switch (pageOrientation) {\n			case 90, 270 -> page.getMediaBox().getWidth();\n			default -> page.getMediaBox().getHeight();\n		};\n	}\n\n	public static float getPageWidth(PDPage page) {\n		val pageOrientation = page.getRotation();\n\n		return switch (pageOrientation) {\n			case 90, 270 -> page.getMediaBox().getHeight();\n			default -> page.getMediaBox().getWidth();\n		};\n	}\n\n	public static PDRectangle createVisualRectangle(\n			PDPage page,\n			Rectangle2D referenceRect,\n			Integer pageOrientation\n	) {\n		val x = (float) referenceRect.getX();\n		val y = (float) referenceRect.getY();\n		val width = (float) referenceRect.getWidth();\n		val height = (float) referenceRect.getHeight();\n\n		val pageCropBox = page.getCropBox();\n		val pdRect = new PDRectangle();\n\n		switch (pageOrientation) {\n			case 90 -> {\n				pdRect.setLowerLeftY(x);\n				pdRect.setUpperRightY(x + width);\n				pdRect.setLowerLeftX(y);\n				pdRect.setUpperRightX(y + height);\n			}\n			case 180 -> {\n				pdRect.setLowerLeftY(y);\n				pdRect.setUpperRightY(y + height);\n				pdRect.setLowerLeftX(pageCropBox.getWidth() - x - width);\n				pdRect.setUpperRightX(pageCropBox.getWidth() - x);\n			}\n			case 270 -> {\n				pdRect.setLowerLeftY(pageCropBox.getHeight() - x - width);\n				pdRect.setUpperRightY(pageCropBox.getUpperRightY() - x);\n				pdRect.setLowerLeftX(pageCropBox.getWidth() - y - height);\n				pdRect.setUpperRightX(pageCropBox.getWidth() - y);\n			}\n			default -> {\n				pdRect.setLowerLeftY(pageCropBox.getHeight() - y - height);\n				pdRect.setUpperRightY(pageCropBox.getHeight() - y);\n				pdRect.setLowerLeftX(x);\n				pdRect.setUpperRightX(x + width);\n			}\n		}\n\n		return pdRect;\n	}\n\n	public static PDAcroForm setAcroForm(PDDocument doc) {\n		val acroForm = new PDAcroForm(doc);\n		doc.getDocumentCatalog().setAcroForm(acroForm);\n		acroForm.setSignaturesExist(true);\n		acroForm.setAppendOnly(true);\n		acroForm.getCOSObject().setDirect(true);\n\n		return acroForm;\n	}\n\n	public static PDFormXObject setFormXObject(\n			PDDocument doc,\n			PDRectangle signatureLabel\n	) {\n		val docStream = new PDStream(doc);\n		val form = new PDFormXObject(docStream);\n\n		form.setResources(new PDResources());\n		form.setFormType(1);\n		form.setBBox(new PDRectangle(\n				signatureLabel.getWidth(),\n				signatureLabel.getHeight()\n		));\n\n		return form;\n	}\n\n	public static PDAppearanceDictionary setWidgetAppearance(\n			PDFormXObject formXObject,\n			PDAnnotationWidget widget\n	) {\n		val appearance = new PDAppearanceDictionary();\n		val appearanceStream = new PDAppearanceStream(formXObject.getCOSObject());\n\n		appearance.getCOSObject().setDirect(true);\n		appearance.setNormalAppearance(appearanceStream);\n		widget.setAppearance(appearance);\n\n		return appearance;\n	}\n\n	public static Optional<Matrix> setScaleMatrix(\n			PDFormXObject formXObject,\n			Integer pageOrientation\n	) {\n		Matrix matrix = null;\n		val x = formXObject.getBBox().getWidth() / formXObject.getBBox().getHeight();\n		val y = formXObject.getBBox().getHeight() / formXObject.getBBox().getWidth();\n\n		switch (pageOrientation) {\n			case 90 -> {\n				formXObject.setMatrix(AffineTransform.getQuadrantRotateInstance(1));\n				matrix = Matrix.getScaleInstance(x, y);\n			}\n			case 180 -> formXObject.setMatrix(AffineTransform.getQuadrantRotateInstance(2));\n			case 270 -> {\n				formXObject.setMatrix(AffineTransform.getQuadrantRotateInstance(3));\n				matrix = Matrix.getScaleInstance(x, y);\n			}\n			default -> {\n			}\n		}\n\n		return Optional.ofNullable(matrix);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport br.ufsc.bridge.platform.validation.util.Util;\n\npublic class ValidationUtils {\n\n	public static boolean isEmpty(Object value) {\n		return Util.isEmpty(value);\n	}\n}\n"
not_service#L141"">org.apache.pdfbox.examples.signature.SigUtils</a>\n	 *\n	 * @param doc               O documento.\n	 * @param signature         O objeto da assinatura.\n	 * @param accessPermissions Entrada do enum representativa do dado de permissão de acesso.\n	 * @throws IOException se uma assinatura já existe.\n	 */\n	public static void setMDPPermission(PDDocument doc, PDSignature signature, MDPAccessPermissionEnum accessPermissions)\n			throws IOException {\n		for (PDSignature sig : doc.getSignatureDictionaries()) {\n			if (COSName.DOC_TIME_STAMP.equals(sig.getCOSObject().getItem(COSName.TYPE))) {\n				continue;\n			}\n			if (sig.getCOSObject().containsKey(COSName.CONTENTS)) {\n				throw new IOException(""DocMDP transform method not allowed if an approval signature exists"");\n			}\n		}\n\n		COSDictionary sigDict = signature.getCOSObject();\n\n		COSDictionary transformParameters = new COSDictionary();\n		transformParameters.setItem(COSName.TYPE, COSName.TRANSFORM_PARAMS);\n		transformParameters.setInt(COSName.P, accessPermissions.getId());\n		transformParameters.setName(COSName.V, ""1.2"");\n		transformParameters.setNeedToBeUpdated(true);\n\n		COSDictionary referenceDict = new COSDictionary();\n		referenceDict.setItem(COSName.TYPE, COSName.SIG_REF);\n		referenceDict.setItem(COSName.TRANSFORM_METHOD, COSName.DOCMDP);\n		referenceDict.setItem(COSName.DIGEST_METHOD, COSName.getPDFName(""SHA1""));\n		referenceDict.setItem(COSName.TRANSFORM_PARAMS, transformParameters);\n		referenceDict.setNeedToBeUpdated(true);\n\n		COSArray referenceArray = new COSArray();\n		referenceArray.add(referenceDict);\n		sigDict.setItem(COSName.REFERENCE, referenceArray);\n		referenceArray.setNeedToBeUpdated(true);\n\n		COSDictionary catalogDict = doc.getDocumentCatalog().getCOSObject();\n		COSDictionary permsDict = new COSDictionary();\n		catalogDict.setItem(COSName.PERMS, permsDict);\n		permsDict.setItem(COSName.DOCMDP, signature);\n		catalogDict.setNeedToBeUpdated(true);\n		permsDict.setNeedToBeUpdated(true);\n	}\n\n	private static <T> T get(final Supplier<T> it) {\n		try {\n			return it.get();\n		} catch (final NullPointerException e) {\n			return null;\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Annotation used to generate typescript interfaces using cz.habarta.typescript-generator\n */\n@Target({ ElementType.TYPE })\n@Retention(RetentionPolicy.CLASS)\npublic @interface TypeScriptModel {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport java.io.IOException;\n\nimport org.springframework.web.multipart.MultipartFile;\n\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.documento.v1.dto.V1DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\npublic class DocumentoUtils {\n\n	public static DocumentoTemporarioCreateDto buildDocumentoTemporarioCreateDto(DocumentoTemporarioCreateDto documentoTemporarioCreateDto, MultipartFile pdf,\n			SecuredContext securedContext,\n			TipoDocumentoEnum tipoDocumento) throws IOException {\n\n		return DocumentoTemporarioCreateDto.builder()\n				.prescritor(documentoTemporarioCreateDto.getPrescritor())\n				.cidadao(documentoTemporarioCreateDto.getCidadao())\n				.contaServicoId((Long) securedContext.getAttributes().get(""id""))\n				.contaServicoName(securedContext.getName())\n				.pdf(pdf.getBytes())\n				.receituario(documentoTemporarioCreateDto.getReceituario())\n				.tipoDocumento(tipoDocumento)\n				.dataInicioAtendimento(documentoTemporarioCreateDto.getDataInicioAtendimento())\n				.build();\n	}\n\n	public static V1DocumentoTemporarioCreateDto buildV1DocumentoTemporarioCreateDto(V1DocumentoTemporarioCreateDto documentoTemporarioCreateDto, MultipartFile pdf,\n			SecuredContext securedContext,\n			TipoDocumentoEnum tipoDocumento) throws IOException {\n\n		return V1DocumentoTemporarioCreateDto.builder()\n				.prescritor(documentoTemporarioCreateDto.getPrescritor())\n				.cidadao(documentoTemporarioCreateDto.getCidadao())\n				.contaServicoId((Long) securedContext.getAttributes().get(""id""))\n				.contaServicoName(securedContext.getName())\n				.pdf(pdf.getBytes())\n				.receituario(documentoTemporarioCreateDto.getReceituario())\n				.tipoDocumento(tipoDocumento)\n				.build();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.web;\n\nimport java.io.IOException;\n\nimport br.ufsc.bridge.pecassinador.common.util.StringUtils;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonDeserializer;\n\npublic class RemoveDuplicateSpacesStringDeserializer extends JsonDeserializer<String> {\n\n	@Override\n	public String deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n		String text = parser.getText();\n		return StringUtils.replaceDuplicateWhitespaceCharsBySingleWhitespace(text);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\nimport java.util.List;\n\npublic interface DataMapper<DTO, ENTITY> {\n	ENTITY toEntity(DTO dto);\n\n	DTO toDto(ENTITY entity);\n\n	List<ENTITY> toEntity(List<DTO> dtoList);\n\n	List<DTO> toDto(List<ENTITY> entityList);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\npublic interface EntityCreateService<TDto> {\n	Long create(TDto dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\npublic interface EntityUpdateService<TDto> {\n	Long update(Long id, TDto dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\npublic abstract class DomainEntityDefaultMapper<TEnum extends Enum<TEnum> & DomainEntity<Long>, TEntity extends DomainEntity<Long>>\n		extends DomainEntityMapper<Long, TEnum, TEntity> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\npublic interface EntityGetOrCreateService<TDto> {\n	Long getOrCreate(TDto dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\nimport java.util.Arrays;\nimport java.util.function.Predicate;\n\nimport org.mapstruct.TargetType;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\npublic abstract class DomainEntityMapper<TID, TEnum extends Enum<TEnum> & DomainEntity<TID>, TEntity extends DomainEntity<TID>> {\n\n	@PersistenceContext\n	private EntityManager em;\n\n	public TEnum toEnum(TEntity entity, @TargetType Class<TEnum> type) {\n		if (entity == null || entity.getId() == null) {\n			return null;\n		}\n		return getEnumByAttribute(entity.getId(), type);\n	}\n\n	public TEntity toEntity(TEnum domainObject, @TargetType Class<TEntity> type) {\n		if (domainObject == null || domainObject.getId() == null) {\n			return null;\n		}\n\n		return this.em.getReference(type, domainObject.getId());\n	}\n\n	private TEnum getEnumByAttribute(TID id, Class<TEnum> type) {\n		return Arrays.stream(type.getEnumConstants())\n				.filter(getIdPredicate(id))\n				.findFirst()\n				.orElse(null);\n	}\n\n	private Predicate<TEnum> getIdPredicate(TID id) {\n		return e -> e.getId().equals(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\nimport static java.lang.Boolean.TRUE;\n\nimport jakarta.persistence.AttributeConverter;\nimport jakarta.persistence.Converter;\n\n@Converter\npublic class SimNaoBooleanConverter implements AttributeConverter<Boolean, String> {\n	private static final String SIM = ""S"";\n	private static final String NAO = ""N"";\n\n	@Override\n	public String convertToDatabaseColumn(Boolean attribute) {\n		if (attribute == null) {\n			return null;\n		}\n\n		return TRUE.equals(attribute) ? SIM : NAO;\n	}\n\n	@Override\n	public Boolean convertToEntityAttribute(String dbData) {\n		if (dbData == null) {\n			return null;\n		}\n\n		return SIM.equals(dbData) ? TRUE : Boolean.FALSE;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\npublic interface DomainEntity<T> {\n	T getId();\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.data;\n\npublic interface DomainEntityDefault extends DomainEntity<Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.config;\n\nimport lombok.Getter;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@Getter\npublic class RuntimeConstants {\n\n	@Value(""${public-uri}"")\n	private String publicUri;\n\n	@Value(""${iti.base-uri}"")\n	private String itiBaseUri;\n\n	@Value(""${storage.root}"")\n	private String storageRoot;\n\n}"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento;\n\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic class FornecimentoConstants {\n	public static final int NUM_DIGITOS_CNES = 7;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.common.web.RemoveDuplicateSpacesStringDeserializer;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\n@Data\n@Metafy\n@TypeScriptModel\n@AllArgsConstructor\npublic final class EnderecoCreateDto {\n	@Nullable\n	private UfEnum uf;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String nomeMunicipio;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String bairro;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String endereco;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String numero;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String complemento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\npublic record UnidadeMedidaDto(\n		Long id,\n		String descricao\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.OrigemProdutoEnum;\n\npublic record ProdutoDto(\n		Long id,\n		String codigoObm,\n		String registroSanitario,\n		String nome,\n		Long quantidadeEmbalagem,\n		OrigemProdutoEnum origem,\n		UnidadeMedidaDto unidadeMedida\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\npublic record EstabelecimentoDto(\n		String nome,\n		String cnpj,\n		String cnes,\n		EnderecoDto endereco\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.common.web.RemoveDuplicateSpacesStringDeserializer;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\n@Data\n@Metafy\n@TypeScriptModel\n@AllArgsConstructor\npublic final class EstabelecimentoCreateDto {\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String nome;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String cnpjOrCnes;\n\n	@Nullable\n	private EnderecoCreateDto endereco;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.common.web.RemoveDuplicateSpacesStringDeserializer;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\n@Data\n@Metafy\n@TypeScriptModel\n@AllArgsConstructor\npublic final class CompradorCreateDto {\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String nome;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String cpfOrPassaporte;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String telefone;\n\n	private Boolean estrangeiro;\n\n	@Nullable\n	private EnderecoCreateDto endereco;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport java.time.LocalDate;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\n\npublic record FornecimentoReceitaDto(\n		ReceitaMedicamentoDto receitaMedicamento,\n		Long quantidadeFornecida,\n		String observacao,\n		ProdutoDto produto,\n		FormaFornecimentoEnum formaFornecimento,\n		Long totalFornecido,\n		String lote,\n		LocalDate dataValidade\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@TypeScriptModel\npublic record FornecimentoDto(\n		Long id,\n		String nomeResponsavel,\n		String crfResponsavel,\n		UfEnum ufConselhoClasseResponsavel,\n		CompradorDto comprador,\n		FarmaceuticoDto farmaceuticoResponsavel,\n		EstabelecimentoDto estabelecimento,\n		LocalDateTime dataCriacao,\n		List<FornecimentoReceitaDto> receitasFornecidas\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\npublic record CompradorDto(\n		String nome,\n		String cpf,\n		String passaporte,\n		String telefone,\n		Boolean estrangeiro,\n		EnderecoDto endereco\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Fornecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\n\npublic record FornecimentoQueryDto(\n		Fornecimento fornecimento,\n		FornecimentoReceita fornecimentoReceita\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport lombok.Data;\n\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.common.web.RemoveDuplicateSpacesStringDeserializer;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\n@Data\n@Metafy\n@TypeScriptModel\npublic class ProdutoCreateDto {\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String codigoObm;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String registroSanitario;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String nome;\n\n	private Long quantidadeEmbalagem;\n\n	private Boolean produtoNaoEncontrado;\n\n	@Nullable\n	private Long unidadeMedidaId;    // TODO: #388: revisar tipo de dados no recebimento\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.common.web.RemoveDuplicateSpacesStringDeserializer;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\n@Metafy\n@Data\n@TypeScriptModel\npublic class FornecimentoReceitaCreateDto {\n	private Long receitaMedicamentoId;\n\n	@Nullable\n	private Long quantidadeFornecida;\n\n	@Nullable\n	private String observacao;\n\n	@Nullable\n	private ProdutoCreateDto produto;\n\n	@Nullable\n	private FormaFornecimentoEnum formaFornecimento;\n\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String lote;\n\n	@Nullable\n	private LocalDate dataValidade;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport java.util.List;\n\nimport lombok.Data;\n\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoCreateDto;\n\n@Metafy\n@Data\n@TypeScriptModel\npublic class FornecimentoCreateDto {\n	@Nullable\n	private CompradorCreateDto comprador;\n\n	@Nullable\n	private EstabelecimentoCreateDto estabelecimento;\n\n	@Nullable\n	private FarmaceuticoCreateDto farmaceutico;\n\n	private List<FornecimentoReceitaCreateDto> receitas;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\n\npublic record EnderecoDto(\n		MunicipioDto municipio,\n		String bairro,\n		String endereco,\n		String numero,\n		String complemento\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_FORMA_FORNECIMENTO"")\npublic class FormaFornecimento implements DomainEntityDefault {\n	@Id\n	@Column(name = ""CO_FORMA_FORNECIMENTO"")\n	private Long id;\n\n	@Column(name = ""DS_FORMA_FORNECIMENTO"")\n	private String descricao;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_PRODUTO"")\npublic class Produto {\n	private static final String SEQUENCE_NAME = ""SQ_PRODUTO_COSEQPRODUTO"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_PRODUTO"")\n	private Long id;\n\n	@Column(name = ""CO_AMPP_OBM"")\n	private String codigoObm;\n\n	@Column(name = ""NU_REGISTRO_SANITARIO"")\n	private String registroSanitario;\n\n	@Column(name = ""NO_PRODUTO"")\n	private String nome;\n\n	@Column(name = ""QT_EMBALAGEM"")\n	private Long quantidadeEmbalagem;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_ORIGEM"")\n	private OrigemProduto origem;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_UNIDADE_MEDIDA"")\n	private UnidadeMedida unidadeMedida;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_ESTABELECIMENTO"")\npublic class Estabelecimento {\n	private static final String SEQUENCE_NAME = ""SQ_ESTABELECIMENTO_CSQSTBLCMNT"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_ESTABELECIMENTO"")\n	private Long id;\n\n	@Column(name = ""NO_ESTABELECIMENTO"")\n	private String nome;\n\n	@Column(name = ""NU_CNPJ"")\n	private String cnpj;\n\n	@Column(name = ""NU_CNES"")\n	private String cnes;\n\n	@OneToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_ENDERECO"")\n	private Endereco endereco;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\nimport lombok.Data;\n\n@Data\n@Entity\n@Table(name = ""TB_ENDERECO"")\npublic class Endereco {\n	private static final String SEQUENCE_NAME = ""SQ_ENDERECO_COSEQENDERECO"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_ENDERECO"")\n	private Long id;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_MUNICIPIO"")\n	private Municipio municipio;\n\n	@Column(name = ""NO_BAIRRO"")\n	private String bairro;\n\n	@Column(name = ""DS_ENDERECO"")\n	private String endereco;\n\n	@Column(name = ""NU_ENDERECO"")\n	private String numero;\n\n	@Column(name = ""DS_COMPLEMENTO"")\n	private String complemento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_UNIDADE_MEDIDA"")\npublic class UnidadeMedida {\n	@Id\n	@Column(name = ""CO_UNIDADE_MEDIDA"")\n	private Long id;\n\n	@Column(name = ""CO_UNIDADE_MEDIDA_OBM"", length = 18)\n	private String codigoObm;\n\n	@Column(name = ""DS_UNIDADE_MEDIDA"", length = 500)\n	private String descricao;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.SimNaoBooleanConverter;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Convert;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_COMPRADOR"")\npublic class Comprador {\n	private static final String SEQUENCE_NAME = ""SQ_COMPRADOR_COSEQCOMPRADOR"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_COMPRADOR"")\n	private Long id;\n\n	@Column(name = ""NO_COMPRADOR"")\n	private String nome;\n\n	@Column(name = ""NU_CPF"")\n	private String cpf;\n\n	@Column(name = ""NU_PASSAPORTE"")\n	private String passaporte;\n\n	@Column(name = ""NU_TELEFONE"")\n	private String telefone;\n\n	@Column(name = ""ST_ESTRANGEIRO"")\n	@Convert(converter = SimNaoBooleanConverter.class)\n	private Boolean estrangeiro;\n\n	@OneToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_ENDERECO"")\n	private Endereco endereco;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport java.time.LocalDateTime;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.farmaceutico.model.Farmaceutico;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.OneToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Table(name = ""TB_FORNECIMENTO"")\npublic class Fornecimento {\n	private static final String SEQUENCE_NAME = ""SQ_FORNECIMENTO_COSEQFORNECMNT"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_FORNECIMENTO"")\n	private Long id;\n\n	@Column(name = ""DT_CRIACAO"")\n	private LocalDateTime dataCriacao = LocalDateTime.now();\n\n	@Column(name = ""NO_RESPONSAVEL"")\n	private String nomeResponsavel;\n\n	@Column(name = ""NU_CRF_RESPONSAVEL"")\n	private String crfResponsavel;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_UF_CONSELHO_RESPONSAVEL"")\n	private Uf ufConselhoClasseResponsavel;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_RESPONSAVEL"")\n	private Farmaceutico responsavel;\n\n	@OneToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_COMPRADOR"")\n	private Comprador comprador;\n\n	@OneToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_ESTABELECIMENTO"")\n	private Estabelecimento estabelecimento;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_DOCUMENTO"")\n	private Documento documento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport java.time.LocalDate;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Table(name = ""RL_FORNECIMENTO_RECEITAMED"")\npublic class FornecimentoReceita {\n	private static final String SEQUENCE_NAME = ""SQ_FORNRECMED_COSEQFORNRECMED"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_FORNECIMENTO_RECEITAMED"")\n	private Long id;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_FORNECIMENTO"")\n	private Fornecimento fornecimento;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_RECEITA_MEDICAMENTO"")\n	private ReceitaMedicamento receitaMedicamento;\n\n	@Column(name = ""QT_FORNECIDA"")\n	private Long quantidadeFornecida;\n\n	@Column(name = ""DS_OBSERVACAO"")\n	private String observacao;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_PRODUTO"")\n	private Produto produto;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_FORMA_FORNECIMENTO"")\n	private FormaFornecimento formaFornecimento;\n\n	@Column(name = ""QT_TOTAL_FORNECIDO"")\n	private Long totalFornecido;\n\n	@Column(name = ""NU_LOTE"")\n	private String lote;\n\n	@Column(name = ""DT_VALIDADE"")\n	private LocalDate dataValidade;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_ORIGEM_PRODUTO"")\npublic class OrigemProduto implements DomainEntityDefault {\n	@Id\n	@Column(name = ""CO_ORIGEM_PRODUTO"")\n	private Long id;\n\n	@Column(name = ""NO_ORIGEM_PRODUTO"")\n	private String nome;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_AMPP"")\npublic class Ampp {\n	@Id\n	@Column(name = ""CO_AMPP"")\n	private Long id;\n\n	@Column(name = ""CO_AMPP_OBM"", length = 18)\n	private String codigoObm;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_VMPP"")\n	private Vmpp vmpp;\n\n	@Column(name = ""NU_REGISTRO_SANITARIO"", length = 13)\n	private String registroSanitario;\n\n	@Column(name = ""NO_AMPP"", length = 774)\n	private String nome;\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.model;\n\nimport java.math.BigDecimal;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_VMPP"")\npublic class Vmpp {\n	@Id\n	@Column(name = ""CO_VMPP"")\n	private Long id;\n\n	@Column(name = ""CO_VMPP_OBM"", length = 18)\n	private String codigoObm;\n\n	@Column(name = ""QT_EMBALAGEM"")\n	private BigDecimal quantidadeEmbalagem;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_UNIDADE_MEDIDA"")\n	private UnidadeMedida unidadeMedida;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.notBlank;\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.numeric;\nimport static br.ufsc.bridge.pecassinador.fornecimento.dto.MCompradorCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.cpf;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.empty;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.maxLength;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.minLength;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.phone;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\nimport static java.lang.Boolean.FALSE;\nimport static java.lang.Boolean.TRUE;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.OpcionalDtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorCreateDto;\n\n@Component\n@RequiredArgsConstructor\npublic class CompradorCreateDtoValidator implements OpcionalDtoValidator<CompradorCreateDto> {\n\n	private final EnderecoCreateDtoValidator enderecoCreateDtoValidator;\n\n	@Override\n	public Validator<CompradorCreateDto> validate(CompradorCreateDto compradorDto) {\n		val validator = Validator.of(compradorDto);\n\n		validator\n				.check(meta.nome, required)\n				.check(meta.cpfOrPassaporte, required);\n\n		validateFields(compradorDto, validator);\n\n		if (FALSE.equals(compradorDto.getEstrangeiro())) {\n			validator\n					.check(meta.telefone, required)\n					.check(meta.endereco(), required);\n\n			if (validator.isValid()) {\n				validator.formError(meta.endereco(), enderecoCreateDtoValidator.validate(compradorDto.getEndereco()));\n			}\n		}\n\n		return validator;\n	}\n\n	@Override\n	public Validator<CompradorCreateDto> validateOpcional(CompradorCreateDto compradorCreateDto) {\n		val validator = Validator.of(compradorCreateDto);\n		validateFields(compradorCreateDto, validator);\n		if (FALSE.equals(compradorCreateDto.getEstrangeiro()) && validator.isValid() && compradorCreateDto.getEndereco() != null) {\n			validator.formError(meta.endereco(), enderecoCreateDtoValidator.validateOpcional(compradorCreateDto.getEndereco()));\n		}\n		return validator;\n	}\n\n	private void validateFields(CompradorCreateDto compradorDto, Validator<CompradorCreateDto> validator) {\n		validator.check(meta.nome, minLength(5))\n				.check(meta.nome, maxLength(70))\n				.check(meta.nome, notBlank)\n				.check(meta.cpfOrPassaporte, notBlank)\n				.check(meta.telefone, notBlank)\n				.check(meta.estrangeiro, required);\n\n		if (FALSE.equals(compradorDto.getEstrangeiro())) {\n			validator\n					.check(meta.cpfOrPassaporte, cpf)\n					.check(meta.telefone, phone);\n		} else if (TRUE.equals(compradorDto.getEstrangeiro())) {\n			validator\n					.check(meta.cpfOrPassaporte, maxLength(20))\n					.check(meta.telefone, maxLength(15))\n					.check(meta.telefone, numeric)\n					.check(meta.endereco(), empty);\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.dto.MFornecimentoCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.farmaceutico.validator.FarmaceuticoCreateDtoValidator;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoCreateDto;\n\n@Component\n@RequiredArgsConstructor\npublic class FornecimentoComumCreateDtoValidator implements DtoValidator<FornecimentoCreateDto> {\n\n	private final CompradorCreateDtoValidator compradorCreateDtoValidator;\n\n	private final EstabelecimentoCreateDtoValidator estabelecimentoCreateDtoValidator;\n\n	private final FarmaceuticoCreateDtoValidator farmaceuticoCreateDtoValidator;\n\n	private final FornecimentoReceitaComumCreateDtoValidator fornecimentoReceitaComumCreateDtoValidator;\n\n	@Override\n	public Validator<FornecimentoCreateDto> validate(FornecimentoCreateDto fornecimentoCreateDto) {\n		val validator = Validator.of(fornecimentoCreateDto);\n\n		validator.check(meta.receitas, required);\n\n		if (validator.isValid()) {\n			if (fornecimentoCreateDto.getComprador() != null) {\n				validator.formError(meta.comprador(), compradorCreateDtoValidator.validateOpcional(fornecimentoCreateDto.getComprador()));\n			}\n			if (fornecimentoCreateDto.getEstabelecimento() != null) {\n				validator.formError(meta.estabelecimento(), estabelecimentoCreateDtoValidator.validateOpcional(fornecimentoCreateDto.getEstabelecimento()));\n			}\n			if (fornecimentoCreateDto.getFarmaceutico() != null) {\n				validator.formError(meta.farmaceutico(), farmaceuticoCreateDtoValidator.validateOpcional(fornecimentoCreateDto.getFarmaceutico()));\n			}\n			validator.forEach(meta.receitas, fornecimentoReceitaComumCreateDtoValidator::validate);\n		}\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.numeric;\nimport static br.ufsc.bridge.pecassinador.fornecimento.dto.MProdutoCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.empty;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.length;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.range;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoCreateDto;\n\n@Component\n@RequiredArgsConstructor\npublic class ProdutoCreateDtoValidator implements DtoValidator<ProdutoCreateDto> {\n\n	@Override\n	public Validator<ProdutoCreateDto> validate(ProdutoCreateDto produtoCreateDto) {\n		val validator = validateCommonFields(produtoCreateDto);\n\n		if (validator.isValid()) {\n			if (produtoCreateDto.getProdutoNaoEncontrado()) {\n				validateRegistroManualFields(validator);\n			} else {\n				validateRegistroOBMFields(validator);\n			}\n		}\n\n		return validator;\n	}\n\n	private Validator<ProdutoCreateDto> validateCommonFields(ProdutoCreateDto produtoCreateDto) {\n		val validator = Validator.of(produtoCreateDto);\n\n		validator\n				.check(meta.unidadeMedidaId, required)\n				.check(meta.produtoNaoEncontrado, required)\n				.check(meta.quantidadeEmbalagem, required)\n				.check(meta.quantidadeEmbalagem, range(1L, 9999999999L));\n\n		return validator;\n	}\n\n	private void validateRegistroManualFields(Validator<ProdutoCreateDto> validator) {\n		validator\n				.check(meta.registroSanitario, required)\n				.check(meta.registroSanitario, numeric)\n				.check(meta.registroSanitario, length(13))\n				.check(meta.codigoObm, empty)\n				.check(meta.nome, empty);\n	}\n\n	private void validateRegistroOBMFields(Validator<ProdutoCreateDto> validator) {\n		validator\n				.check(meta.codigoObm, required)\n				.check(meta.nome, required)\n				.check(meta.registroSanitario, empty);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.notBlank;\nimport static br.ufsc.bridge.pecassinador.fornecimento.dto.MEnderecoCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.maxLength;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.OpcionalDtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\n\n@Component\n@RequiredArgsConstructor\npublic class EnderecoCreateDtoValidator implements OpcionalDtoValidator<EnderecoCreateDto> {\n\n	@Override\n	public Validator<EnderecoCreateDto> validate(EnderecoCreateDto enderecoCreateDto) {\n		val validator = Validator.of(enderecoCreateDto);\n\n		validator\n				.check(meta.uf, required)\n				.check(meta.nomeMunicipio, required)\n				.check(meta.bairro, required)\n				.check(meta.endereco, required);\n\n		validateFields(validator);\n\n		return validator;\n	}\n\n	@Override\n	public Validator<EnderecoCreateDto> validateOpcional(EnderecoCreateDto enderecoCreateDto) {\n		val validator = Validator.of(enderecoCreateDto);\n		validateFields(validator);\n		return validator;\n	}\n\n	private static void validateFields(Validator<EnderecoCreateDto> validator) {\n		validator\n				.check(meta.bairro, maxLength(72))\n				.check(meta.endereco, maxLength(250))\n				.check(meta.numero, maxLength(7))\n				.check(meta.complemento, maxLength(250))\n				.check(meta.nomeMunicipio, notBlank)\n				.check(meta.bairro, notBlank)\n				.check(meta.endereco, notBlank)\n				.check(meta.numero, notBlank)\n				.check(meta.complemento, notBlank);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.notBlank;\nimport static br.ufsc.bridge.pecassinador.fornecimento.dto.MFornecimentoReceitaCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.empty;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.maxLength;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.platform.validation.form.errors.FormError;\n\n@Component\n@RequiredArgsConstructor\npublic class FornecimentoReceitaComumCreateDtoValidator implements DtoValidator<FornecimentoReceitaCreateDto> {\n\n	@Override\n	public Validator<FornecimentoReceitaCreateDto> validate(FornecimentoReceitaCreateDto fornecimentoReceitaCreateDto) {\n		val validator = Validator.of(fornecimentoReceitaCreateDto);\n\n		this.validate(fornecimentoReceitaCreateDto, validator);\n\n		return validator;\n	}\n\n	public void validate(FornecimentoReceitaCreateDto fornecimentoReceitaCreateDto, FormError<FornecimentoReceitaCreateDto> validator) {\n		validator\n				.check(meta.receitaMedicamentoId, required)\n				.check(meta.observacao, notBlank)\n				.check(meta.observacao, maxLength(200))\n				.check(meta.produto(), empty)\n				.check(meta.formaFornecimento, empty)\n				.check(meta.lote, empty)\n				.check(meta.dataValidade, empty);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.notBlank;\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.numeric;\nimport static br.ufsc.bridge.pecassinador.fornecimento.FornecimentoConstants.NUM_DIGITOS_CNES;\nimport static br.ufsc.bridge.pecassinador.fornecimento.dto.MEstabelecimentoCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.cnpj;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.length;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.maxLength;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.util.ValidationUtils;\nimport br.ufsc.bridge.pecassinador.common.validation.OpcionalDtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoCreateDto;\n\n@Component\n@RequiredArgsConstructor\npublic class EstabelecimentoCreateDtoValidator implements OpcionalDtoValidator<EstabelecimentoCreateDto> {\n\n	private final EnderecoCreateDtoValidator enderecoCreateDtoValidator;\n\n	@Override\n	public Validator<EstabelecimentoCreateDto> validate(EstabelecimentoCreateDto estabelecimentoCreateDto) {\n		val validator = Validator.of(estabelecimentoCreateDto);\n\n		validator\n				.check(meta.nome, required)\n				.check(meta.endereco(), required);\n\n		validateFields(estabelecimentoCreateDto, validator);\n\n		if (validator.isValid()) {\n			validator.formError(meta.endereco(), enderecoCreateDtoValidator.validate(estabelecimentoCreateDto.getEndereco()));\n		}\n\n		return validator;\n	}\n\n	@Override\n	public Validator<EstabelecimentoCreateDto> validateOpcional(EstabelecimentoCreateDto estabelecimentoCreateDto) {\n		val validator = Validator.of(estabelecimentoCreateDto);\n\n		validateFields(estabelecimentoCreateDto, validator);\n\n		if (validator.isValid()) {\n			validator.formError(meta.endereco(), enderecoCreateDtoValidator.validateOpcional(estabelecimentoCreateDto.getEndereco()));\n		}\n\n		return validator;\n	}\n\n	private static void validateFields(EstabelecimentoCreateDto estabelecimentoCreateDto, Validator<EstabelecimentoCreateDto> validator) {\n		validator\n				.check(meta.nome, maxLength(100))\n				.check(meta.nome, notBlank)\n				.check(meta.cnpjOrCnes, notBlank);\n\n		if (!ValidationUtils.isEmpty(estabelecimentoCreateDto.getCnpjOrCnes())) {\n			if (estabelecimentoCreateDto.getCnpjOrCnes().length() > NUM_DIGITOS_CNES) {\n				validator.check(meta.cnpjOrCnes, cnpj);\n			} else {\n				validator\n						.check(meta.cnpjOrCnes, length(7))\n						.check(meta.cnpjOrCnes, numeric);\n			}\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.afterEqualToday;\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.notBlank;\nimport static br.ufsc.bridge.pecassinador.fornecimento.dto.MFornecimentoReceitaCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.maxLength;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.range;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.platform.validation.form.errors.FormError;\n\n@Component\n@RequiredArgsConstructor\npublic class FornecimentoReceitaControladaCreateDtoValidator implements DtoValidator<FornecimentoReceitaCreateDto> {\n\n	private final ProdutoCreateDtoValidator produtoCreateDtoValidator;\n\n	@Override\n	public Validator<FornecimentoReceitaCreateDto> validate(FornecimentoReceitaCreateDto fornecimentoReceitaCreateDto) {\n		val validator = Validator.of(fornecimentoReceitaCreateDto);\n\n		this.validate(fornecimentoReceitaCreateDto, validator);\n\n		return validator;\n	}\n\n	public void validate(FornecimentoReceitaCreateDto fornecimentoReceitaCreateDto, FormError<FornecimentoReceitaCreateDto> validator) {\n\n		validator\n				.check(meta.receitaMedicamentoId, required)\n				.check(meta.observacao, notBlank)\n				.check(meta.observacao, maxLength(200))\n				.check(meta.quantidadeFornecida, required)\n				.check(meta.quantidadeFornecida, range(1, 9999))\n				.check(meta.produto(), required)\n				.check(meta.formaFornecimento, required)\n				.check(meta.lote, notBlank)\n				.check(meta.lote, maxLength(30))\n				.check(meta.dataValidade, afterEqualToday);\n\n		if (validator.isValid()) {\n			validator.formError(\n					meta.produto(),\n					produtoCreateDtoValidator.validate(fornecimentoReceitaCreateDto.getProduto())\n			);\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.dto.MFornecimentoCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.farmaceutico.validator.FarmaceuticoCreateDtoValidator;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoCreateDto;\n\n@Component\n@RequiredArgsConstructor\npublic class FornecimentoControladoCreateDtoValidator implements DtoValidator<FornecimentoCreateDto> {\n\n	private final CompradorCreateDtoValidator compradorCreateDtoValidator;\n\n	private final EstabelecimentoCreateDtoValidator estabelecimentoCreateDtoValidator;\n\n	private final FarmaceuticoCreateDtoValidator farmaceuticoCreateDtoValidator;\n\n	private final FornecimentoReceitaControladaCreateDtoValidator fornecimentoReceitaControladaCreateDtoValidator;\n\n	@Override\n	public Validator<FornecimentoCreateDto> validate(FornecimentoCreateDto fornecimentoCreateDto) {\n		val validator = Validator.of(fornecimentoCreateDto);\n\n		validator\n				.check(meta.comprador(), required)\n				.check(meta.estabelecimento(), required)\n				.check(meta.farmaceutico(), required)\n				.check(meta.receitas, required);\n\n		if (validator.isValid()) {\n			validator.formError(meta.comprador(), compradorCreateDtoValidator.validate(fornecimentoCreateDto.getComprador()));\n			validator.formError(meta.estabelecimento(), estabelecimentoCreateDtoValidator.validate(fornecimentoCreateDto.getEstabelecimento()));\n			validator.formError(meta.farmaceutico(), farmaceuticoCreateDtoValidator.validate(fornecimentoCreateDto.getFarmaceutico()));\n			validator.forEach(meta.receitas, fornecimentoReceitaControladaCreateDtoValidator::validate);\n		}\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@Getter\n@RequiredArgsConstructor\npublic enum OrigemProdutoEnum implements DomainEntityDefault {\n	OBM(1L, ""OBM""),\n	REGISTRO_MANUAL(2L, ""REGISTRO MANUAL"");\n\n	private static final Map<Long, OrigemProdutoEnum> map = Arrays\n			.stream(OrigemProdutoEnum.values())\n			.collect(toMap(OrigemProdutoEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String nome;\n\n	public static OrigemProdutoEnum getById(Long id) {\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@Getter\n@RequiredArgsConstructor\npublic enum FormaFornecimentoEnum implements DomainEntityDefault {\n	UNIDADE(1L, ""UNIDADE""),\n	EMBALAGEM_COMPLETA(2L, ""EMBALAGEM COMPLETA"");\n\n	private static final Map<Long, FormaFornecimentoEnum> map = Arrays\n			.stream(FormaFornecimentoEnum.values())\n			.collect(toMap(FormaFornecimentoEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String descricao;\n\n	public static FormaFornecimentoEnum getById(Long id) {\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.OrigemProdutoEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.OrigemProduto;\n\n@Mapper(componentModel = ""spring"")\npublic class OrigemProdutoMapper extends DomainEntityDefaultMapper<OrigemProdutoEnum, OrigemProduto> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Produto;\n\n@Mapper(\n		componentModel = ""spring"",\n		uses = {\n				OrigemProdutoMapper.class\n		}\n)\npublic abstract class ProdutoMapper implements DataMapper<ProdutoDto, Produto> {\n	public abstract Produto toEntity(ProdutoDto dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FormaFornecimento;\n\n@Mapper(componentModel = ""spring"")\npublic class FormaFornecimentoMapper extends DomainEntityDefaultMapper<FormaFornecimentoEnum, FormaFornecimento> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.OrigemProdutoEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.OrigemProduto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Produto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.UnidadeMedida;\nimport br.ufsc.bridge.pecassinador.fornecimento.repository.UnidadeMedidaRepository;\n\n@Mapper(componentModel = ""spring"")\npublic abstract class ProdutoCreateDtoMapper {\n	@Autowired\n	private UnidadeMedidaRepository unidadeMedidaRepository;\n\n	@Autowired\n	private OrigemProdutoMapper origemProdutoMapper;\n\n	@Mapping(target = ""unidadeMedida"", source = ""unidadeMedidaId"")\n	@Mapping(target = ""origem"", source = ""produtoNaoEncontrado"")\n	public abstract Produto toEntity(ProdutoCreateDto produtoCreateDto);\n\n	public OrigemProduto map(Boolean value) {\n		return origemProdutoMapper\n				.toEntity(value\n								? OrigemProdutoEnum.REGISTRO_MANUAL\n								: OrigemProdutoEnum.OBM,\n						OrigemProduto.class\n				);\n	}\n\n	public UnidadeMedida map(Long value) {\n		// TODO: #388 - Rever tratamento de nulos e ""registros inválidos"" após definição; aqui não dispara exceção pra não quebrar até lá\n		return unidadeMedidaRepository.findById(value).orElse(null);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport java.util.List;\n\nimport org.mapstruct.Mapper;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.farmaceutico.mapper.FarmaceuticoMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Fornecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.mapper.UfMapper;\n\n@Mapper(componentModel = ""spring"")\npublic abstract class FornecimentoMapper {\n\n	@Autowired\n	private FarmaceuticoMapper farmaceuticoMapper;\n\n	@Autowired\n	private CompradorMapper compradorMapper;\n\n	@Autowired\n	private UfMapper ufMapper;\n\n	@Autowired\n	private EstabelecimentoMapper estabelecimentoMapper;\n\n	@Autowired\n	private FornecimentoReceitaMapper fornecimentoReceitaMapper;\n\n	public FornecimentoDto toFornecimentoDto(Fornecimento fornecimento, List<FornecimentoReceita> medicamentosFornecidos) {\n		return new FornecimentoDto(\n				fornecimento.getId(),\n				fornecimento.getNomeResponsavel(),\n				fornecimento.getCrfResponsavel(),\n				ufMapper.toEnum(fornecimento.getUfConselhoClasseResponsavel(), UfEnum.class),\n				compradorMapper.toDto(fornecimento.getComprador()),\n				farmaceuticoMapper.toDto(fornecimento.getResponsavel()),\n				estabelecimentoMapper.toDto(fornecimento.getEstabelecimento()),\n				fornecimento.getDataCriacao(),\n				fornecimentoReceitaMapper.toDto(medicamentosFornecidos)\n		);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport java.util.Optional;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.MunicipioRepository;\nimport br.ufsc.bridge.pecassinador.localidade.latest.mapper.MunicipioMapper;\n\n@Mapper(componentModel = ""spring"",\n		uses = {\n				MunicipioMapper.class\n		}\n)\n@RequiredArgsConstructor\npublic abstract class EnderecoMapper implements DataMapper<EnderecoDto, Endereco> {\n\n	@Autowired\n	private MunicipioRepository municipioRepository;\n\n	@Mapping(target = ""municipio"", ignore = true)\n	public abstract Endereco toEntity(EnderecoDto dto);\n\n	@AfterMapping\n	public void afterEntityMapping(@MappingTarget Endereco endereco, EnderecoDto dto) {\n		Optional.ofNullable(dto.municipio()).ifPresent(municipioDto -> {\n			Municipio municipio = this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(municipioDto.getNome(), municipioDto.getUf().getId()).orElse(null);\n			endereco.setMunicipio(municipio);\n		});\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\nimport br.ufsc.bridge.pecassinador.fornecimento.repository.FormaFornecimentoRepository;\n\n@Mapper(componentModel = ""spring"", uses = { FormaFornecimentoMapper.class })\npublic abstract class FornecimentoReceitaCreateDtoMapper {\n	@Autowired\n	private FormaFornecimentoRepository formaFornecimentoRepository;\n\n	@Mapping(target = ""receitaMedicamento"", ignore = true)\n	@Mapping(target = ""fornecimento"", ignore = true)\n	@Mapping(target = ""produto"", ignore = true)\n	@Mapping(target = ""totalFornecido"", ignore = true)\n	public abstract FornecimentoReceita toEntity(FornecimentoReceitaCreateDto dto);\n\n	@AfterMapping\n	void afterEntityMapping(\n			@MappingTarget FornecimentoReceita fornecimentoReceita,\n			FornecimentoReceitaCreateDto dto\n	) {\n		Long quantidadeEmbalagem = dto.getProduto() != null ? dto.getProduto().getQuantidadeEmbalagem() : null;\n		Long quantidadeFornecida = dto.getQuantidadeFornecida();\n		FormaFornecimentoEnum formaFornecimentoEnum = dto.getFormaFornecimento();\n\n		fornecimentoReceita.setTotalFornecido(calculateTotalFornecido(quantidadeEmbalagem, quantidadeFornecida, formaFornecimentoEnum));\n	}\n\n	private Long calculateTotalFornecido(Long quantidadeEmbalagem, Long quantidadeFornecida, FormaFornecimentoEnum formaFornecimentoEnum) {\n		if (quantidadeEmbalagem != null && quantidadeFornecida != null && formaFornecimentoEnum != null) {\n			if (FormaFornecimentoEnum.EMBALAGEM_COMPLETA.equals(formaFornecimentoEnum)) {\n				return quantidadeFornecida * quantidadeEmbalagem;\n			} else {\n				return quantidadeFornecida;\n			}\n		} else {\n			return null;\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Comprador;\n\n@Mapper(componentModel = ""spring"",\n		uses = {\n				EnderecoMapper.class\n		}\n)\npublic interface CompradorMapper extends DataMapper<CompradorDto, Comprador> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.MunicipioRepository;\n\nimport jakarta.persistence.EntityNotFoundException;\n\n@Mapper(componentModel = ""spring"")\n@RequiredArgsConstructor\npublic abstract class EnderecoCreateDtoMapper implements DataMapper<EnderecoCreateDto, Endereco> {\n\n	@Autowired\n	private MunicipioRepository municipioRepository;\n\n	@Mapping(target = ""municipio"", ignore = true)\n	public abstract Endereco toEntity(EnderecoCreateDto dto);\n\n	@AfterMapping\n	public void afterEntityMapping(@MappingTarget Endereco endereco, EnderecoCreateDto dto) {\n		endereco.setMunicipio(this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(dto.getNomeMunicipio(), dto.getUf().getId()).orElseThrow(EntityNotFoundException::new));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper.ReceitaMedicamentoMapper;\n\n@Mapper(componentModel = ""spring"", uses = { ReceitaMedicamentoMapper.class, ProdutoMapper.class, FormaFornecimentoMapper.class })\npublic abstract class FornecimentoReceitaMapper implements DataMapper<FornecimentoReceitaDto, FornecimentoReceita> {\n	@Mapping(target = ""receitaMedicamento"", ignore = true)\n	@Mapping(target = ""produto"", ignore = true)\n	public abstract FornecimentoReceita toEntity(FornecimentoReceitaDto dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.FornecimentoConstants.NUM_DIGITOS_CNES;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Estabelecimento;\n\n@Mapper(componentModel = ""spring"")\npublic abstract class EstabelecimentoCreateDtoMapper implements DataMapper<EstabelecimentoCreateDto, Estabelecimento> {\n	@Mapping(target = ""endereco"", ignore = true)\n	@Mapping(target = ""cnpj"", ignore = true)\n	@Mapping(target = ""cnes"", ignore = true)\n	public abstract Estabelecimento toEntity(EstabelecimentoCreateDto dto);\n\n	@AfterMapping\n	void afterEntityMapping(\n			@MappingTarget Estabelecimento estabelecimento,\n			EstabelecimentoCreateDto dto\n	) {\n		if (dto.getCnpjOrCnes() != null) {\n			if (dto.getCnpjOrCnes().length() > NUM_DIGITOS_CNES) {\n				estabelecimento.setCnpj(dto.getCnpjOrCnes());\n			} else {\n				estabelecimento.setCnes(dto.getCnpjOrCnes());\n			}\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Comprador;\n\n@Mapper(componentModel = ""spring"")\npublic abstract class CompradorCreateDtoMapper implements DataMapper<CompradorCreateDto, Comprador> {\n	@Mapping(target = ""endereco"", ignore = true)\n	@Mapping(target = ""cpf"", ignore = true)\n	@Mapping(target = ""passaporte"", ignore = true)\n	public abstract Comprador toEntity(CompradorCreateDto dto);\n\n	@AfterMapping\n	void afterEntityMapping(\n			@MappingTarget Comprador comprador,\n			CompradorCreateDto dto\n	) {\n		if (dto.getEstrangeiro()) {\n			comprador.setPassaporte(dto.getCpfOrPassaporte());\n		} else {\n			comprador.setCpf(dto.getCpfOrPassaporte());\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Estabelecimento;\n\n@Mapper(componentModel = ""spring"",\n		uses = {\n				EnderecoMapper.class\n		}\n)\npublic abstract class EstabelecimentoMapper implements DataMapper<EstabelecimentoDto, Estabelecimento> {\n\n	@Mapping(target = ""endereco"", ignore = true)\n	public abstract Estabelecimento toEntity(EstabelecimentoDto dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.common.exception.AccessException;\nimport br.ufsc.bridge.pecassinador.documento.common.service.TipoDocumentoGetService;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.service.FornecimentoCreateService;\nimport br.ufsc.bridge.pecassinador.fornecimento.validator.FornecimentoComumCreateDtoValidator;\nimport br.ufsc.bridge.pecassinador.fornecimento.validator.FornecimentoControladoCreateDtoValidator;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(""/api/prescricoes/{codigoAcesso}/fornecimentos"")\n@Secured(GOVBR)\npublic class FornecimentoCreateController {\n	private final FornecimentoCreateService fornecimentoCreateService;\n	private final TipoDocumentoGetService tipoDocumentoGetService;\n	private final FornecimentoControladoCreateDtoValidator fornecimentoControladoCreateDtoValidator;\n	private final FornecimentoComumCreateDtoValidator fornecimentoComumCreateDtoValidator;\n\n	@PostMapping\n	public ResponseEntity<Void> createFornecimento(\n			@PathVariable String codigoAcesso,\n			@RequestBody FornecimentoCreateDto fornecimentoCreateDto,\n			SecuredContext securedContext\n	) {\n		this.validate(codigoAcesso, fornecimentoCreateDto);\n		this.fornecimentoCreateService.create(fornecimentoCreateDto, codigoAcesso, securedContext.getName(), securedContext.getUsername());\n		return ResponseEntity.ok().build();\n	}\n\n	private void validate(String codigoAcesso, FornecimentoCreateDto fornecimentoCreateDto) {\n		switch (this.tipoDocumentoGetService.get(codigoAcesso)) {\n			case PRESCRICAO_COMUM:\n				this.fornecimentoComumCreateDtoValidator.validate(fornecimentoCreateDto).throwIfInvalid();\n				break;\n			case ATESTADO:\n				throw new AccessException(""Atestado não pode ser fornecido."");\n			case PRESCRICAO_CONTROLADA:\n				this.fornecimentoControladoCreateDtoValidator.validate(fornecimentoCreateDto).throwIfInvalid();\n				break;\n			default:\n				throw new AccessException(""Tipo de documento não permitido."");\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.documento.common.service.FornecimentoExistsService;\n\n@RestController\n@RequestMapping(""/api/prescricoes/{codigoAcesso}/fornecimentos/{fornecimentoId}"")\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class FornecimentoExistsController {\n	private final FornecimentoExistsService service;\n\n	@GetMapping(""/exists"")\n	public ResponseEntity<Boolean> checkFornecimentoExists(\n			@PathVariable String codigoAcesso,\n			@PathVariable Long fornecimentoId\n	) {\n		return ResponseEntity.ok(this.service.exists(codigoAcesso, fornecimentoId));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.service.FornecimentoListService;\n\n@RestController\n@RequestMapping(""/api/prescricoes/{codigoAcesso}/fornecimentos"")\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class FornecimentoListController {\n	private final FornecimentoListService service;\n\n	@GetMapping\n	public ResponseEntity<List<FornecimentoDto>> listFornecimentos(@PathVariable String codigoAcesso) {\n		return ResponseEntity.ok(service.getFornecimentos(codigoAcesso));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.service.FornecimentoGetService;\n\n@RestController\n@RequestMapping(""/api/prescricoes/{codigoAcesso}/fornecimentos/{fornecimentoId}"")\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class FornecimentoGetController {\n	private final FornecimentoGetService service;\n\n	@GetMapping\n	public ResponseEntity<FornecimentoDto> getFornecimento(\n			@PathVariable String codigoAcesso,\n			@PathVariable Long fornecimentoId\n	) {\n		return ResponseEntity.ok(service.getFornecimento(codigoAcesso, fornecimentoId));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.UnidadeMedida;\n\n@Repository\npublic interface UnidadeMedidaRepository extends JpaRepository<UnidadeMedida, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Comprador;\n\n@Repository\npublic interface CompradorRepository extends JpaRepository<Comprador, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\n\n@Repository\npublic interface EnderecoRepository extends JpaRepository<Endereco, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FormaFornecimento;\n\n@Repository\npublic interface FormaFornecimentoRepository extends JpaRepository<FormaFornecimento, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Produto;\n\n@Repository\npublic interface ProdutoRepository extends JpaRepository<Produto, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoQueryDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Fornecimento;\n\n@Repository\npublic interface FornecimentoRepository extends JpaRepository<Fornecimento, Long> {\n	@Query(""""""\n			SELECT new br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoQueryDto(fornecimento, fornecimentoReceita)\n			FROM Fornecimento fornecimento\n			JOIN fornecimento.documento documento\n			JOIN fornecimento.responsavel farmaceutico\n			LEFT JOIN FornecimentoReceita fornecimentoReceita ON fornecimentoReceita.fornecimento.id = fornecimento.id\n			LEFT JOIN fornecimento.comprador comprador\n			LEFT JOIN fornecimento.estabelecimento estabelecimento\n			WHERE documento.tipoDocumento.id IN (1, 3)\n			AND documento.codigoAcesso = :codigoAcesso\n			ORDER BY fornecimento.dataCriacao DESC\n			"""""")\n	List<FornecimentoQueryDto> findAllByCodigoAcessoDocumento(@Param(""codigoAcesso"") String codigoAcesso);\n\n	@Query(""""""\n			SELECT new br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoQueryDto(fornecimento, fornecimentoReceita)\n			FROM Fornecimento fornecimento\n			JOIN fornecimento.documento documento\n			JOIN fornecimento.responsavel farmaceutico\n			LEFT JOIN FETCH FornecimentoReceita fornecimentoReceita ON fornecimentoReceita.fornecimento.id = fornecimento.id\n			LEFT JOIN FETCH fornecimento.comprador comprador\n			LEFT JOIN FETCH fornecimento.estabelecimento estabelecimento\n			WHERE documento.tipoDocumento.id IN (1, 3)\n			AND documento.codigoAcesso = :codigoAcesso\n			AND fornecimento.id = :fornecimentoId\n			"""""")\n	List<FornecimentoQueryDto> getByCodigoAcessoAndId(\n			@Param(""codigoAcesso"") String codigoAcesso,\n			@Param(""fornecimentoId"") Long fornecimentoId\n	);\n\n	@Query(""""""\n			SELECT CASE WHEN (\n				SELECT 1\n				FROM Fornecimento fornecimento\n				JOIN Documento documento on documento.id = fornecimento.documento.id\n				WHERE documento.tipoDocumento.id IN (1, 3)\n				AND documento.codigoAcesso = :codigoAcesso\n				AND fornecimento.id = :fornecimentoId\n			) > 0 THEN TRUE ELSE FALSE END\n			"""""")\n	boolean existsByCodigoAcessoAndId(@Param(""codigoAcesso"") String codigoAcesso, @Param(""fornecimentoId"") Long fornecimentoId);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Estabelecimento;\n\n@Repository\npublic interface EstabelecimentoRepository extends JpaRepository<Estabelecimento, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\n\n@Repository\npublic interface FornecimentoReceitaRepository extends JpaRepository<FornecimentoReceita, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.model.OrigemProduto;\n\n@Repository\npublic interface OrigemProdutoRepository extends JpaRepository<OrigemProduto, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.assinatura.exception;\n\nimport lombok.Getter;\n\nimport br.ufsc.bridge.pecassinador.assinatura.enums.SignatureErrorEnum;\n\n@Getter\npublic class SignatureException extends Exception {\n	private final int code;\n\n	public SignatureException(SignatureErrorEnum signatureErrorEnum) {\n		super(signatureErrorEnum.getMessage());\n		this.code = signatureErrorEnum.getId();\n	}\n\n	public SignatureException(SignatureErrorEnum signatureErrorEnum, Throwable cause) {\n		super(signatureErrorEnum.getMessage(), cause);\n		this.code = signatureErrorEnum.getId();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.assinatura.dto;\n\npublic record ValidaItiResponseDto(\n		VerifierReportDto verifierReport\n) {\n\n	public record VerifierReportDto(ReportDto report) {\n	}\n\n	public record ReportDto(String generalStatus, SignaturesDto signatures) {\n	}\n\n	public record SignaturesDto(SignatureDto signature) {\n	}\n\n	public record SignatureDto(CertificationDto certification, String signingTime) {\n	}\n\n	public record CertificationDto(SignerDto signer) {\n	}\n\n	public record SignerDto(ExtensionsDto extensions, String subjectName) {\n	}\n\n	public record ExtensionsDto(SubjectAlternativeNamesDto subjectAlternativeNames) {\n	}\n\n	public record SubjectAlternativeNamesDto(GeneralNameDto generalName) {\n	}\n\n	public record GeneralNameDto(String value) {\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.assinatura.dto;\n\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.security.authorization.dto.CredentialsDto;\n\npublic record PdfSignerDto(byte[] data, String codigoAcesso, EmissorSignatureDto emissor, CredentialsDto credentials,\n						   TipoDocumentoEnum tipoDocumento) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.assinatura.dto;\n\nimport java.time.LocalDateTime;\n\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\n\n@TypeScriptModel\npublic record SignatureValidateResponseDto(\n		Boolean valido,\n		String cpfAssinador,\n		String nomeAssinador,\n		LocalDateTime dataAssinatura\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.assinatura.dto;\n\nimport java.io.InputStream;\n\nimport br.ufsc.bridge.pecassinador.security.authorization.dto.CredentialsDto;\n\npublic record ExternalSignerDto(InputStream content, String signerCpf, CredentialsDto credentials) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.assinatura.dto;\n\npublic record EmissorSignatureDto(\n		String cpf,\n		String nome,\n		String nuConselhoClasse,\n		String ufConselhoClasse,\n		String siglaConselhoClasse\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.assinatura.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n/**\n * “MDP” significa ""modification detection & prevention"" (detecção e prevenção de mudanças).\n * As assinaturas de certificação que usam o método de transformação DocMDP permitem a detecção de\n * alterações não permitidas especificadas pelo autor. Além disso, as alterações não permitidas\n * também podem ser evitadas através do dado de permissão de acesso no dicionário de DocMDP.\n * <br/>\n * <br/>\n * Valores válidos para o dado de permissão de acessos são:\n * <br/>\n * <br/>\n * 1 - [FINAL] - Alterações ao documento não serão permitidas; quaisquer mudanças ao documento invalidarão a assinatura.\n * <p>\n * 2 - [APENAS_ASSINATURAS] - Alterações permitidas incluem o preenchimento de formulários e realização de assinaturas.\n * <p>\n * 3 - [ASSINATURAS_E_ANOTACOES] - Alterações permitidas incluem o preenchimento de formulários, realização de assinaturas e manipulação de anotações.\n */\n@Getter\n@AllArgsConstructor\npublic enum MDPAccessPermissionEnum {\n	FINAL(1, ""Alterações ao documento não serão permitidas; quaisquer mudanças ao documento invalidarão a assinatura""),\n	APENAS_ASSINATURAS(2, ""Alterações permitidas incluem o preenchimento de formulários e realização de assinaturas""),\n	ASSINATURAS_E_ANOTACOES(3, ""Alterações permitidas incluem o preenchimento de formulários, realização de assinaturas e manipulação de anotações"");\n\n	private static final Map<Integer, MDPAccessPermissionEnum> map = Arrays\n			.stream(MDPAccessPermissionEnum.values())\n			.collect(toMap(MDPAccessPermissionEnum::getId, Function.identity()));\n\n	private final int id;\n	private final String descricao;\n\n	public static MDPAccessPermissionEnum getById(int id) {\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.assinatura.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n@Getter\n@AllArgsConstructor\npublic enum SignatureErrorEnum {\n	FALHA_OBTER_ASSINATURA(1, ""Não foi possível obter a assinatura.""),\n	CONTA_NIVEL_INSUFICIENTE(2, ""Cidadão não possui a conta gov.br prata ou ouro, que é necessária para uso da assinatura digital.""),\n	CPFS_DIFERENTES(3, ""O CPF do emissor não condiz com o CPF da assinatura.""),\n	DOCUMENTO_JA_ASSINADO(4, ""O documento já foi assinado previamente.""),\n	PROFISSIONAL_SEM_CONSELHO(5, ""É necessário possuir um conselho de classe cadastrado para realizar uma assinatura digital."");\n\n	private static final Map<Integer, SignatureErrorEnum> map = Arrays\n			.stream(SignatureErrorEnum.values())\n			.collect(toMap(SignatureErrorEnum::getId, Function.identity()));\n\n	private final int id;\n	private final String message;\n\n	public static SignatureErrorEnum getById(int id) {\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@TypeScriptModel\npublic class FarmaceuticoDto {\n	private String nome;\n\n	private String cpf;\n\n	private String crf;\n\n	private UfEnum ufConselhoClasse;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.dto;\n\nimport lombok.Data;\n\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.common.web.RemoveDuplicateSpacesStringDeserializer;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\n@Metafy\n@Data\n@TypeScriptModel\npublic class FarmaceuticoCreateDto {\n	@Nullable\n	@JsonDeserialize(using = RemoveDuplicateSpacesStringDeserializer.class)\n	private String crf;\n\n	@Nullable\n	private UfEnum ufConselhoClasse;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_FARMACEUTICO"")\npublic class Farmaceutico {\n	private static final String SEQUENCE_NAME = ""SQ_FARMACEUTICO_COSEQFRMCTC"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_FARMACEUTICO"")\n	private Long id;\n\n	@Column(name = ""NO_FARMACEUTICO"")\n	private String nome;\n\n	@Column(name = ""NU_CPF"")\n	private String cpf;\n\n	@Column(name = ""NU_CRF"")\n	private String crf;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_UF_CONSELHO"")\n	private Uf ufConselhoClasse;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.validator;\n\nimport static br.ufsc.bridge.pecassinador.common.validation.Rules.notBlank;\nimport static br.ufsc.bridge.pecassinador.farmaceutico.dto.MFarmaceuticoCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.maxLength;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.util.ValidationUtils;\nimport br.ufsc.bridge.pecassinador.common.validation.OpcionalDtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoCreateDto;\n\n@Component\n@RequiredArgsConstructor\npublic class FarmaceuticoCreateDtoValidator implements OpcionalDtoValidator<FarmaceuticoCreateDto> {\n\n	@Override\n	public Validator<FarmaceuticoCreateDto> validate(FarmaceuticoCreateDto farmaceuticoCreateDto) {\n		val validator = Validator.of(farmaceuticoCreateDto);\n\n		validator\n				.check(meta.crf, required)\n				.check(meta.ufConselhoClasse, required);\n		validateCrf(validator);\n\n		return validator;\n	}\n\n	@Override\n	public Validator<FarmaceuticoCreateDto> validateOpcional(FarmaceuticoCreateDto farmaceuticoCreateDto) {\n		val validator = Validator.of(farmaceuticoCreateDto);\n\n		if (!ValidationUtils.isEmpty(farmaceuticoCreateDto.getCrf()) || !ValidationUtils.isEmpty(farmaceuticoCreateDto.getUfConselhoClasse())) {\n			validator\n					.check(meta.crf, required)\n					.check(meta.ufConselhoClasse, required);\n\n			validateCrf(validator);\n		}\n\n		return validator;\n	}\n\n	private void validateCrf(Validator<FarmaceuticoCreateDto> validator) {\n		validator\n				.check(meta.crf, maxLength(10))\n				.check(meta.crf, notBlank);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.mapper;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoDto;\nimport br.ufsc.bridge.pecassinador.farmaceutico.model.Farmaceutico;\nimport br.ufsc.bridge.pecassinador.localidade.common.mapper.UfMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.UfRepository;\n\n@Mapper(componentModel = ""spring"", uses = { UfMapper.class })\npublic abstract class FarmaceuticoMapper {\n\n	@Autowired\n	private UfRepository ufRepository;\n\n	public abstract FarmaceuticoDto toDto(Farmaceutico farmaceutico);\n\n	@Mapping(target = ""id"", ignore = true)\n	public abstract Farmaceutico toEntity(FarmaceuticoDto dto);\n\n	@Mapping(target = ""id"", ignore = true)\n	@Mapping(target = ""cpf"", ignore = true)\n	public abstract Farmaceutico update(FarmaceuticoDto dto, @MappingTarget Farmaceutico farmaceutico);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoDto;\nimport br.ufsc.bridge.pecassinador.farmaceutico.service.FarmaceuticoGetService;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\n@RequestMapping(""/api/farmaceuticos/me"")\n@RestController\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class LoggedInFarmaceuticoGetController {\n\n	private final FarmaceuticoGetService farmaceuticoGetService;\n\n	@GetMapping\n	public ResponseEntity<FarmaceuticoDto> getLoggedInFarmaceutico(\n			SecuredContext securedContext\n	) {\n		FarmaceuticoDto farmaceuticoDto = farmaceuticoGetService.getFarmaceutico(securedContext.getName());\n		return ResponseEntity.ok(farmaceuticoDto);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.farmaceutico.model.Farmaceutico;\n\n@Repository\npublic interface FarmaceuticoRepository extends JpaRepository<Farmaceutico, Long> {\n	Optional<Farmaceutico> findByCpf(String cpf);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.latest.dto;\n\npublic record DocumentoTemporarioCreateResponseDto(String urlAssinarDocumento) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.latest.dto;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\n@Data\n@Builder\n@Metafy\n@NoArgsConstructor\n@AllArgsConstructor\npublic class DocumentoTemporarioCreateDto {\n	private EmissorDto prescritor;    // TODO: (Legacy) #194\n\n	private CidadaoDto cidadao;\n\n	@JsonIgnore\n	private Long contaServicoId;\n\n	@JsonIgnore\n	private String contaServicoName;\n\n	@JsonIgnore\n	private byte[] pdf;\n\n	@JsonIgnore\n	private TipoDocumentoEnum tipoDocumento;\n\n	// HACK: Tem que deixar o inicializador do ArrayList aqui se não o metafy não gera o MetaList do campo...\n	private List<ReceitaMedicamentoDto> receituario = new ArrayList<>();\n\n	private LocalDate dataInicioAtendimento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.latest.mapper;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport lombok.val;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.mapstruct.ReportingPolicy;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.cidadao.common.mapper.SexoMapper;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport br.ufsc.bridge.pecassinador.documento.common.mapper.TipoDocumentoMapper;\nimport br.ufsc.bridge.pecassinador.documento.common.model.DocumentoTemporario;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.MunicipioRepository;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.PaisRepository;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\n@Slf4j\n@Mapper(\n		componentModel = ""spring"",\n		unmappedTargetPolicy = ReportingPolicy.IGNORE,\n		uses = { SexoMapper.class, TipoDocumentoMapper.class }\n)\n@RequiredArgsConstructor\npublic abstract class DocumentoTemporarioMapper {\n	private final ObjectMapper objectMapper = new ObjectMapper()\n			.registerModule(new JavaTimeModule())\n			.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n\n	@PersistenceContext\n	private EntityManager entityManager;\n	@Autowired\n	private PaisRepository paisRepository;\n	@Autowired\n	private MunicipioRepository municipioRepository;\n\n	@Mapping(target = ""signatarioNome"", source = ""prescritor.nome"")\n	@Mapping(target = ""signatarioCpf"", source = ""prescritor.cpf"")\n	@Mapping(target = ""signatarioDescricaoCbo"", source = ""prescritor.cbo.descricao"")\n	@Mapping(target = ""signatarioCodigoCbo2002"", source = ""prescritor.cbo.codigoCbo2002"")\n	@Mapping(target = ""cidadaoNome"", source = ""cidadao.nome"")\n	@Mapping(target = ""cidadaoCpf"", source = ""cidadao.cpf"")\n	@Mapping(target = ""cidadaoCns"", source = ""cidadao.cns"")\n	@Mapping(target = ""cidadaoNomeSocial"", source = ""cidadao.nomeSocial"")\n	@Mapping(target = ""cidadaoNomeMae"", source = ""cidadao.nomeMae"")\n	@Mapping(target = ""cidadaoDataNascimento"", source = ""cidadao.dataNascimento"")\n	@Mapping(target = ""cidadaoSexo"", source = ""cidadao.sexo"")\n	@Mapping(target = ""cidadaoPaisNascimento"", ignore = true)\n	@Mapping(target = ""cidadaoMunicipioNascimento"", ignore = true)\n	@Mapping(target = ""receituario"", ignore = true)\n	public abstract DocumentoTemporario documentoTemporarioCreateDtoToEntity(DocumentoTemporarioCreateDto dto);\n\n	@AfterMapping\n	void afterDocumentoTemporarioMapping(\n			@MappingTarget DocumentoTemporario documentoTemporario,\n			DocumentoTemporarioCreateDto dto\n	) {\n		val cidadaoDto = dto.getCidadao();\n		val prescritorDto = dto.getPrescritor();\n		val conselhoClasse = String.format(""%s-%s %s"",\n				prescritorDto.getSiglaConselhoClasse(),\n				prescritorDto.getUfEmissoraConselhoClasse(),\n				prescritorDto.getNumeroConselhoClasse());\n\n		documentoTemporario.setSignatarioConselhoClasse(conselhoClasse);\n		documentoTemporario.setContaServico(this.entityManager.getReference(ContaServico.class, dto.getContaServicoId()));\n\n		Optional.ofNullable(cidadaoDto.getPaisNascimento())\n				.ifPresent(pais -> documentoTemporario.setCidadaoPaisNascimento(this.paisRepository.findByNome(pais).orElse(null)));\n		Optional.ofNullable(cidadaoDto.getMunicipioNascimento()).ifPresent(municipio -> documentoTemporario.setCidadaoMunicipioNascimento(\n				this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(\n						dto.getCidadao().getMunicipioNascimento().getNome(),\n						dto.getCidadao().getMunicipioNascimento().getUf().getId()\n				).orElse(null)\n		));\n\n		try {\n			documentoTemporario.setReceituario(objectMapper.writeValueAsString(dto.getReceituario()));\n		} catch (JsonProcessingException e) {\n			log.error(""Erro ao desserializar receituário: %s"", e.getMessage());\n		}\n	}\n\n	@Mapping(target = ""cpf"", source = ""signatarioCpf"")\n	@Mapping(target = ""nome"", source = ""signatarioNome"")\n	@Mapping(target = ""cbo"", ignore = true)\n	public abstract EmissorDto toEmissorDto(DocumentoTemporario documentoTemporario);\n\n	@Mapping(target = ""cpf"", source = ""cidadaoCpf"")\n	@Mapping(target = ""nome"", source = ""cidadaoNome"")\n	@Mapping(target = ""cns"", source = ""cidadaoCns"")\n	@Mapping(target = ""nomeSocial"", source = ""cidadaoNomeSocial"")\n	@Mapping(target = ""nomeMae"", source = ""cidadaoNomeMae"")\n	@Mapping(target = ""dataNascimento"", source = ""cidadaoDataNascimento"")\n	@Mapping(target = ""sexo"", source = ""cidadaoSexo"")\n	@Mapping(target = ""paisNascimento"", ignore = true)\n	@Mapping(target = ""municipioNascimento"", ignore = true)\n	public abstract CidadaoDto toCidadaoDto(DocumentoTemporario documentoTemporario);\n\n	public List<ReceitaMedicamentoDto> toReceituario(DocumentoTemporario documentoTemporario) {\n		try {\n			return this.objectMapper.readValue(\n					documentoTemporario.getReceituario(),\n					new TypeReference<List<ReceitaMedicamentoDto>>() {\n					}\n			);\n		} catch (JsonProcessingException e) {\n			log.error(""Erro ao desserializar receituário: %s"", e.getMessage());\n			return null;\n		}\n	}\n\n	@AfterMapping\n	void afterEmissorDtoMapping(@MappingTarget EmissorDto emissorDto, DocumentoTemporario documentoTemporario) {\n		val conselhoClasseParts = documentoTemporario.getSignatarioConselhoClasse().split(""[ -]"");\n\n		emissorDto.setSiglaConselhoClasse(conselhoClasseParts[0]);\n		emissorDto.setUfEmissoraConselhoClasse(conselhoClasseParts[1]);\n		emissorDto.setNumeroConselhoClasse(conselhoClasseParts[2]);\n\n		Optional.ofNullable(documentoTemporario.getSignatarioCodigoCbo2002()).ifPresent(nomeCbo -> {\n			val cboDto = new CboDto(\n					documentoTemporario.getSignatarioDescricaoCbo(),\n					documentoTemporario.getSignatarioCodigoCbo2002()\n			);\n			emissorDto.setCbo(cboDto);\n		});\n	}\n\n	@AfterMapping\n	void afterCidadaoDtoMapping(\n			@MappingTarget CidadaoDto cidadaoDto,\n			DocumentoTemporario documentoTemporario\n	) {\n		Optional.ofNullable(documentoTemporario.getCidadaoPaisNascimento()).ifPresent(pais -> cidadaoDto.setPaisNascimento(pais.getNome()));\n		Optional.ofNullable(documentoTemporario.getCidadaoMunicipioNascimento()).ifPresent(municipio -> {\n			val municipioDto = new MunicipioDto();\n			municipioDto.setNome(municipio.getNome());\n			municipioDto.setUf(UfEnum.getById(municipio.getUf().getId()));\n			municipioDto.setCodigoIbge(municipio.getCodigoIbge());\n			municipioDto.setNumeroCep(municipio.getNumeroCep());\n			cidadaoDto.setMunicipioNascimento(municipioDto);\n		});\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.security.authorization.dto.CredentialsDto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\n@Data\n@AllArgsConstructor\npublic class DocumentoSignDto {\n	@JsonIgnore\n	private Long id;\n	@JsonIgnore\n	private CredentialsDto credentials;\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.model;\n\nimport static java.time.LocalDateTime.now;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\n\nimport lombok.Data;\n\nimport org.hibernate.annotations.JdbcTypeCode;\nimport org.hibernate.type.SqlTypes;\n\nimport br.ufsc.bridge.pecassinador.arquivo.model.Arquivo;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Sexo;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Pais;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Table(name = ""TM_DOCUMENTO"")\n@Entity\n@Data\npublic class DocumentoTemporario {\n\n	private static final String SEQUENCE_NAME = ""SQ_TMDOCUMENTO_COSEQDOCUMENTO"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_DOCUMENTO"")\n	private Long id;\n\n	@Column(name = ""NO_SIGNATARIO"")\n	private String signatarioNome;\n\n	@Column(name = ""NU_CPF_SIGNATARIO"")\n	private String signatarioCpf;\n\n	@Column(name = ""DS_CONSELHO_CLASSE_SIGNATARIO"")\n	private String signatarioConselhoClasse;\n\n	@Column(name = ""DS_CBO_SIGNATARIO"")\n	private String signatarioDescricaoCbo;\n\n	@Column(name = ""CO_CBO_2002_SIGNATARIO"")\n	private String signatarioCodigoCbo2002;\n\n	@Column(name = ""NO_CIDADAO"")\n	private String cidadaoNome;\n\n	@Column(name = ""NU_CPF_CIDADAO"")\n	private String cidadaoCpf;\n\n	@Column(name = ""NU_CNS_CIDADAO"")\n	private String cidadaoCns;\n\n	@Column(name = ""NO_SOCIAL_CIDADAO"")\n	private String cidadaoNomeSocial;\n\n	@Column(name = ""NO_MAE_CIDADAO"")\n	private String cidadaoNomeMae;\n\n	@Column(name = ""DT_NASCIMENTO_CIDADAO"")\n	private LocalDate cidadaoDataNascimento;\n\n	@JoinColumn(name = ""CO_SEXO_CIDADAO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Sexo cidadaoSexo;\n\n	@JoinColumn(name = ""CO_PAIS_NASCIMENTO_CIDADAO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Pais cidadaoPaisNascimento;\n\n	@JoinColumn(name = ""CO_MUNICIPIO_NASCIMENTO_CIDADA"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Municipio cidadaoMunicipioNascimento;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_TIPO_DOCUMENTO"")\n	private TipoDocumento tipoDocumento;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_CONTA_SERVICO"")\n	private ContaServico contaServico;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_ARQUIVO"")\n	private Arquivo arquivo;\n\n	@Column(name = ""CO_ACESSO"")\n	private String codigoAcesso;\n\n	@Column(name = ""DT_CRIACAO"")\n	private LocalDateTime dataCriacao = now();\n\n	@Column(name = ""DT_ASSINATURA"")\n	private LocalDateTime dataAssinatura;\n\n	@JdbcTypeCode(SqlTypes.JSON)\n	@Column(name = ""DS_RECEITUARIO"")\n	private String receituario;\n\n	@Column(name = ""DT_INICIO_ATENDIMENTO"")\n	private LocalDate dataInicioAtendimento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.model;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\n\nimport lombok.Data;\n\nimport org.hibernate.annotations.SQLDelete;\nimport org.hibernate.annotations.Where;\n\nimport br.ufsc.bridge.pecassinador.arquivo.model.Arquivo;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Cidadao;\nimport br.ufsc.bridge.pecassinador.common.data.SimNaoBooleanConverter;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Emissor;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Convert;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_DOCUMENTO"")\n@Where(clause = ""ST_REGISTRO_ATIVO='S'"")\n@SQLDelete(sql = ""UPDATE TB_DOCUMENTO SET ST_REGISTRO_ATIVO = 'N' WHERE CO_SEQ_DOCUMENTO=?"")\npublic class Documento {\n\n	private static final String SEQUENCE_NAME = ""SQ_DOCUMENTO_COSEQDOCUMENTO"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_DOCUMENTO"")\n	private Long id;\n\n	@Column(name = ""CO_ACESSO"")\n	private String codigoAcesso;\n\n	@Column(name = ""DT_CRIACAO"")\n	private LocalDateTime dataCriacao = LocalDateTime.now();\n\n	@Column(name = ""DT_ASSINATURA"")\n	private LocalDateTime dataAssinatura;\n\n	@Column(name = ""DT_EMISSAO"")\n	private LocalDateTime dataEmissao;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_CIDADAO"")\n	private Cidadao cidadao;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_EMISSOR"")\n	private Emissor emissor;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_CONTA_SERVICO"")\n	private ContaServico contaServico;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_ARQUIVO"")\n	private Arquivo arquivo;\n\n	@ManyToOne(fetch = FetchType.LAZY)\n	@JoinColumn(name = ""CO_TIPO_DOCUMENTO"")\n	private TipoDocumento tipoDocumento;\n\n	@Column(name = ""ST_REGISTRO_ATIVO"")\n	@Convert(converter = SimNaoBooleanConverter.class)\n	private Boolean registroAtivo = true;\n\n	@Column(name = ""DT_INICIO_ATENDIMENTO"")\n	private LocalDate dataInicioAtendimento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Entity\n@Table(name = ""TB_TIPO_DOCUMENTO"")\n@Data\npublic class TipoDocumento implements DomainEntityDefault {\n	@Id\n	@Column(name = ""CO_TIPO_DOCUMENTO"")\n	private Long id;\n\n	@Column(name = ""NO_TIPO_DOCUMENTO"")\n	private String nome;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@RequiredArgsConstructor\n@Getter\npublic enum TipoDocumentoEnum implements DomainEntityDefault {\n	PRESCRICAO_COMUM(1L, ""Prescrição Médica Comum""),\n	ATESTADO(2L, ""Atestado Médico""),\n	PRESCRICAO_CONTROLADA(3L, ""Prescrição Médica Controlada"");\n\n	private static final Map<Long, TipoDocumentoEnum> map = Arrays\n			.stream(TipoDocumentoEnum.values())\n			.collect(toMap(TipoDocumentoEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String nome;\n\n	public static TipoDocumentoEnum getById(Long id) {\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.documento.common.model.TipoDocumento;\n\n@Mapper(componentModel = ""spring"")\npublic class TipoDocumentoMapper extends DomainEntityDefaultMapper<TipoDocumentoEnum, TipoDocumento> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.repository;\n\nimport java.time.LocalDateTime;\nimport java.util.Optional;\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.EntityGraph;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.documento.common.model.DocumentoTemporario;\n\n@Repository\npublic interface DocumentoTemporarioRepository extends JpaRepository<DocumentoTemporario, Long> {\n	@EntityGraph(attributePaths = { ""arquivo"" })\n	@Query(""""""\n			select documentoTemporario \n			from DocumentoTemporario documentoTemporario \n			where documentoTemporario.dataCriacao < :timeLimit\n			"""""")\n	Page<DocumentoTemporario> findAllPendingDeletion(@Param(""timeLimit"") LocalDateTime timeLimit, Pageable pageable);\n\n	Optional<DocumentoTemporario> findByCodigoAcesso(String codigoAcesso);\n\n	@Query(""""""\n			    SELECT documentoTemporario\n			    FROM DocumentoTemporario documentoTemporario\n			    WHERE documentoTemporario.codigoAcesso = :codigoAcesso\n			    AND documentoTemporario.contaServico.id = :contaServicoId\n			    AND documentoTemporario.dataAssinatura IS NOT NULL\n			"""""")\n	Optional<DocumentoTemporario> findByCodigoAcessoAndContaServicoIdWithDataAssinatura(@Param(""codigoAcesso"") String codigoAcesso, Long contaServicoId);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.arquivo.model.Arquivo;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\n\n@Repository\npublic interface DocumentoRepository extends JpaRepository<Documento, Long> {\n	@Query(""""""\n			SELECT documento\n			FROM Documento documento \n			WHERE documento.tipoDocumento.id IN (1, 3)\n			AND documento.codigoAcesso = :codigoAcesso\n			"""""")\n	Optional<Documento> findByCodigoAcesso(@Param(""codigoAcesso"") String codigoAcesso);\n\n	@Query(""""""\n			SELECT contaServico.nome FROM Documento documento\n			JOIN documento.contaServico contaServico\n			WHERE documento.tipoDocumento.id IN (1, 3)\n			AND documento.codigoAcesso = :codigoAcesso\n			"""""")\n	Optional<String> getNomeContaServicoByCodigoAcesso(@Param(""codigoAcesso"") String codigoAcesso);\n\n	@Query(""""""\n			SELECT CASE WHEN COUNT(documento)> 0 THEN TRUE ELSE FALSE END\n			FROM Documento documento\n			WHERE documento.tipoDocumento.id IN (1, 3)\n			AND documento.codigoAcesso = :codigoAcesso\n			"""""")\n	boolean existsByCodigoAcesso(@Param(""codigoAcesso"") String codigoAcesso);\n\n	@Query(""""""\n			SELECT documento.arquivo\n			FROM Documento documento\n			WHERE documento.tipoDocumento.id IN (1, 3)\n			AND documento.codigoAcesso = :codigoAcesso\n			 """""")\n	Optional<Arquivo> findArquivoByCodigoAcesso(@Param(""codigoAcesso"") String codigoAcesso);\n\n	@Modifying\n	@Query(""""""\n			UPDATE Documento documento\n			SET documento.registroAtivo = false\n			WHERE documento.tipoDocumento.id IN (1, 3)\n			AND documento.codigoAcesso = :codigoAcesso\n			""""""\n	)\n	void deleteByCodigoAcesso(@Param(""codigoAcesso"") String codigoAcesso);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.v1.dto;\n\nimport java.util.List;\n\nimport lombok.Builder;\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.cidadao.v1.dto.V1CidadaoDto;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.emissor.v1.dto.V1EmissorDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.v1.dto.V1ReceitaMedicamentoDto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotNull;\n\n@Data\n@Builder\npublic class V1DocumentoTemporarioCreateDto {\n	@Valid\n	@NotNull\n	private V1EmissorDto prescritor;\n\n	@Valid\n	@NotNull\n	private V1CidadaoDto cidadao;\n\n	@JsonIgnore\n	private Long contaServicoId;\n\n	@JsonIgnore\n	private String contaServicoName;\n\n	@JsonIgnore\n	private byte[] pdf;\n\n	@JsonIgnore\n	private TipoDocumentoEnum tipoDocumento;\n\n	@Valid\n	private List<V1ReceitaMedicamentoDto> receituario;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.v1.dto;\n\npublic record V1DocumentoTemporarioCreateResponseDto(String urlAssinarDocumento) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.v1.mapper;\n\nimport java.util.Optional;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport lombok.val;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.mapstruct.ReportingPolicy;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Sexo;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport br.ufsc.bridge.pecassinador.documento.common.model.DocumentoTemporario;\nimport br.ufsc.bridge.pecassinador.documento.common.model.TipoDocumento;\nimport br.ufsc.bridge.pecassinador.documento.v1.dto.V1DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.MunicipioRepository;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.PaisRepository;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\n@Slf4j\n@Mapper(\n		componentModel = ""spring"",\n		unmappedTargetPolicy = ReportingPolicy.IGNORE\n)\n@RequiredArgsConstructor\npublic abstract class V1DocumentoTemporarioMapper {\n	private final ObjectMapper objectMapper = new ObjectMapper()\n			.registerModule(new JavaTimeModule())\n			.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n\n	@PersistenceContext\n	private EntityManager entityManager;\n	@Autowired\n	private PaisRepository paisRepository;\n	@Autowired\n	private MunicipioRepository municipioRepository;\n\n	@Mapping(target = ""signatarioNome"", source = ""prescritor.nome"")\n	@Mapping(target = ""signatarioCpf"", source = ""prescritor.cpf"")\n	@Mapping(target = ""signatarioDescricaoCbo"", source = ""prescritor.cbo.descricao"")\n	@Mapping(target = ""signatarioCodigoCbo2002"", source = ""prescritor.cbo.codigoCbo2002"")\n	@Mapping(target = ""cidadaoNome"", source = ""cidadao.nome"")\n	@Mapping(target = ""cidadaoCpf"", source = ""cidadao.cpf"")\n	@Mapping(target = ""cidadaoCns"", source = ""cidadao.cns"")\n	@Mapping(target = ""cidadaoNomeSocial"", source = ""cidadao.nomeSocial"")\n	@Mapping(target = ""cidadaoNomeMae"", source = ""cidadao.nomeMae"")\n	@Mapping(target = ""cidadaoDataNascimento"", source = ""cidadao.dataNascimento"")\n	@Mapping(target = ""cidadaoSexo"", ignore = true)\n	@Mapping(target = ""cidadaoPaisNascimento"", ignore = true)\n	@Mapping(target = ""cidadaoMunicipioNascimento"", ignore = true)\n	@Mapping(target = ""receituario"", ignore = true)\n	public abstract DocumentoTemporario documentoTemporarioCreateDtoToEntity(V1DocumentoTemporarioCreateDto dto);\n\n	@AfterMapping\n	void afterDocumentoTemporarioMapping(\n			@MappingTarget DocumentoTemporario documentoTemporario,\n			V1DocumentoTemporarioCreateDto dto\n	) {\n		val cidadaoDto = dto.getCidadao();\n		val prescritorDto = dto.getPrescritor();\n		val conselhoClasse = String.format(""%s-%s %s"",\n				prescritorDto.getSiglaConselhoClasse(),\n				prescritorDto.getUfEmissoraConselhoClasse(),\n				prescritorDto.getNumeroConselhoClasse());\n\n		documentoTemporario.setSignatarioConselhoClasse(conselhoClasse);\n		documentoTemporario.setTipoDocumento(this.entityManager.getReference(TipoDocumento.class, dto.getTipoDocumento().getId()));\n		documentoTemporario.setContaServico(this.entityManager.getReference(ContaServico.class, dto.getContaServicoId()));\n\n		Optional.ofNullable(prescritorDto.getCbo()).ifPresent(cbo -> {\n			documentoTemporario.setSignatarioDescricaoCbo(cbo.getDescricao());\n			documentoTemporario.setSignatarioCodigoCbo2002(cbo.getCodigoCbo2002());\n		});\n\n		Optional.ofNullable(cidadaoDto.getSexo()).ifPresent(sexo -> documentoTemporario.setCidadaoSexo(this.entityManager.getReference(Sexo.class, sexo.getId())));\n\n		Optional.ofNullable(cidadaoDto.getPaisNascimento())\n				.ifPresent(pais -> documentoTemporario.setCidadaoPaisNascimento(this.paisRepository.findByNome(pais).orElse(null)));\n\n		Optional.ofNullable(cidadaoDto.getMunicipioNascimento()).ifPresent(municipio -> documentoTemporario.setCidadaoMunicipioNascimento(\n				this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(\n						dto.getCidadao().getMunicipioNascimento().getNome(),\n						dto.getCidadao().getMunicipioNascimento().getUf().getId()\n				).orElse(null)\n		));\n\n		try {\n			documentoTemporario.setReceituario(objectMapper.writeValueAsString(dto.getReceituario()));\n		} catch (JsonProcessingException e) {\n			log.error(""Erro ao desserializar receituário: %s"", e.getMessage());\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.CategoriaMedicamentoEnum;\n\n@Data\n@Metafy\npublic class MedicamentoDto {\n	private String principioAtivo;\n\n	private String unidadeFornecimento;\n\n	private String concentracao;\n\n	private String formaFarmaceutica;\n\n	private CategoriaMedicamentoEnum categoriaMedicamento;\n\n	private String codigoCatMat;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoFrequenciaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoReceitaEnum;\n\n@Data\n@NoArgsConstructor\n@TypeScriptModel\n@Metafy\npublic class ReceitaMedicamentoDto {\n	private Long id;\n\n	private String posologia;\n\n	private Long quantidadeReceitada;\n\n	private String viaAdministracao;\n\n	private Boolean usoContinuo;\n\n	private MedicamentoDto medicamento;\n\n	private LocalDate dataInicioTratamento;\n\n	private LocalDate dataFimTratamento;\n\n	private String duracaoTratamento;\n\n	private String dose;\n\n	private TipoFrequenciaEnum tipoFrequencia;\n\n	private String frequenciaDose;\n\n	private Boolean doseUnica;\n\n	private String recomendacao;\n\n	private TipoReceitaEnum tipoReceita;\n\n	private Boolean fornecidaAnteriormente;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.validator;\n\nimport static br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MMedicamentoDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MedicamentoDto;\n\n@Component\n@RequiredArgsConstructor\npublic class MedicamentoDtoValidator implements DtoValidator<MedicamentoDto> {\n	public Validator<MedicamentoDto> validate(\n			MedicamentoDto medicamentoDto\n	) {\n		val validator = Validator.of(medicamentoDto);\n\n		validator\n				.check(meta.principioAtivo, required)\n				.check(meta.unidadeFornecimento, required)\n				.check(meta.formaFarmaceutica, required);\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.validator;\n\nimport static br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MReceitaMedicamentoDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.empty;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport br.ufsc.bridge.platform.validation.form.errors.FormError;\n\n@Component\n@RequiredArgsConstructor\npublic class ReceitaMedicamentoDtoValidator implements DtoValidator<ReceitaMedicamentoDto> {\n	private final MedicamentoDtoValidator medicamentoDtoValidator;\n\n	public Validator<ReceitaMedicamentoDto> validate(\n			ReceitaMedicamentoDto receitaMedicamentoDto\n	) {\n		val validator = Validator.of(receitaMedicamentoDto);\n		this.validate(receitaMedicamentoDto, validator);\n		return validator;\n	}\n\n	public void validate(\n			ReceitaMedicamentoDto receitaMedicamentoDto,\n			FormError<ReceitaMedicamentoDto> validator\n	) {\n		validator\n				.check(meta.usoContinuo, required)\n				.check(meta.medicamento(), required)\n				.check(meta.doseUnica, required)\n				.check(meta.tipoReceita, required)\n				.check(meta.dose, required)\n				.check(meta.posologia, required)\n				.check(meta.quantidadeReceitada, required)\n				.check(meta.duracaoTratamento, required)\n				.check(meta.dataInicioTratamento, required)\n				.check(meta.viaAdministracao, required);\n\n		if (validator.isValid()) {\n			validateRelacaoDoseUnicaTipoFrequencia(receitaMedicamentoDto, validator);\n			validator.formError(meta.medicamento(), medicamentoDtoValidator.validate(receitaMedicamentoDto.getMedicamento()));\n		}\n	}\n\n	private void validateRelacaoDoseUnicaTipoFrequencia(ReceitaMedicamentoDto receitaMedicamentoDto, FormError<ReceitaMedicamentoDto> validator) {\n		if (!receitaMedicamentoDto.getDoseUnica()) {\n			validator.check(meta.tipoFrequencia, required)\n					.check(meta.frequenciaDose, required);\n		} else {\n			validator.check(meta.tipoFrequencia, empty)\n					.check(meta.frequenciaDose, empty);\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper.CategoriaMedicamentoMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.Medicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MedicamentoDto;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\n@Mapper(\n		componentModel = ""spring"",\n		uses = {\n				CategoriaMedicamentoMapper.class\n		}\n)\npublic abstract class MedicamentoMapper implements DataMapper<MedicamentoDto, Medicamento> {\n\n	@PersistenceContext\n	private EntityManager entityManager;\n\n	public abstract Medicamento toEntity(MedicamentoDto dto);\n\n	public abstract MedicamentoDto toDto(Medicamento dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper;\n\nimport static br.ufsc.bridge.pecassinador.common.util.StringUtils.removeHtml;\n\nimport java.util.List;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper.TipoFrequenciaMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper.TipoReceitaMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\n@Mapper(\n		componentModel = ""spring"",\n		uses = {\n				MedicamentoMapper.class,\n				TipoFrequenciaMapper.class,\n				TipoReceitaMapper.class\n		}\n)\npublic abstract class ReceitaMedicamentoMapper {\n\n	@PersistenceContext\n	private EntityManager entityManager;\n\n	public abstract ReceitaMedicamentoDto toDto(ReceitaMedicamento receitaMedicamentos);\n\n	public abstract List<ReceitaMedicamentoDto> toDto(List<ReceitaMedicamento> receitaMedicamentos);\n\n	@Mapping(target = ""medicamento"", ignore = true)\n	@Mapping(target = ""posologia"", ignore = true)\n	public abstract ReceitaMedicamento toEntity(ReceitaMedicamentoDto dto);\n\n	@AfterMapping\n	void afterEntityMapping(\n			@MappingTarget ReceitaMedicamento receitaMedicamento,\n			ReceitaMedicamentoDto receitaMedicamentoDto\n	) {\n		receitaMedicamento.setPosologia(removeHtml(receitaMedicamentoDto.getPosologia()));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.repository;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.dto.ReceitaMedicamentoQueryDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\n\n@Repository\npublic interface ReceitaMedicamentoRepository extends JpaRepository<ReceitaMedicamento, Long> {\n	@Query(""""""\n			SELECT new br.ufsc.bridge.pecassinador.receitamedicamento.common.dto.ReceitaMedicamentoQueryDto(receitaMedicamento, (COUNT(fornecimentoReceita) > 0))\n			FROM ReceitaMedicamento receitaMedicamento\n			JOIN FETCH Medicamento medicamento ON receitaMedicamento.medicamento.id = medicamento.id\n			LEFT JOIN FornecimentoReceita fornecimentoReceita ON fornecimentoReceita.receitaMedicamento.id = receitaMedicamento.id\n			JOIN receitaMedicamento.documento documento\n			WHERE documento.codigoAcesso = :codigoAcesso\n			GROUP BY receitaMedicamento.id\n			"""""")\n	List<ReceitaMedicamentoQueryDto> findAllByCodigoAcessoDocumento(@Param(""codigoAcesso"") String codigoAcesso);\n\n	@Query(""""""\n			SELECT receitaMedicamento\n			FROM ReceitaMedicamento receitaMedicamento\n			JOIN FETCH receitaMedicamento.medicamento medicamento\n			JOIN receitaMedicamento.documento documento\n			WHERE receitaMedicamento.id = :receitaId\n			"""""")\n	Optional<ReceitaMedicamento> findByReceitaId(\n			@Param(""receitaId"") Long receitaId\n	);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.Medicamento;\n\npublic interface MedicamentoRepository extends JpaRepository<Medicamento, Long> {\n\n	@Query(""""""\n			SELECT medicamento\n			FROM Medicamento medicamento\n			WHERE medicamento.principioAtivo = :principioAtivo\n			AND medicamento.concentracao = :concentracao\n			AND medicamento.formaFarmaceutica = :formaFarmaceutica\n			AND medicamento.unidadeFornecimento = :unidadeFornecimento\n			AND (medicamento.categoriaMedicamento.id = :categoriaMedicamentoId OR medicamento.categoriaMedicamento IS NULL AND :categoriaMedicamentoId IS NULL)\n			AND (medicamento.codigoCatMat = :codigoCatMat OR medicamento.codigoCatMat IS NULL AND :codigoCatMat IS NULL)\n			"""""")\n	Optional<Medicamento> findMedicamento(\n			String principioAtivo,\n			String concentracao,\n			String formaFarmaceutica,\n			String unidadeFornecimento,\n			Long categoriaMedicamentoId,\n			String codigoCatMat\n	);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.dto;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\n\npublic record ReceitaMedicamentoQueryDto(\n		ReceitaMedicamento receitaMedicamento,\n		boolean fornecidaAnteriormente\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.model;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.SimNaoBooleanConverter;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Convert;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_RECEITA_MEDICAMENTO"")\npublic class ReceitaMedicamento {\n\n	private static final String SEQUENCE_NAME = ""SQ_RECEITAMEDCMNT_CSQRCTMDCMNT"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_RECEITA_MEDICAMENTO"")\n	private Long id;\n\n	@Column(name = ""DS_POSOLOGIA"")\n	private String posologia;\n\n	@Column(name = ""QT_RECEITADA"")\n	private Long quantidadeReceitada;\n\n	@Column(name = ""DS_VIA_ADMINISTRACAO"")\n	private String viaAdministracao;\n\n	@Column(name = ""ST_USO_CONTINUO"")\n	@Convert(converter = SimNaoBooleanConverter.class)\n	private Boolean usoContinuo;\n\n	@JoinColumn(name = ""CO_MEDICAMENTO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Medicamento medicamento;\n\n	@Column(name = ""DT_INICIO_TRATAMENTO"")\n	private LocalDate dataInicioTratamento;\n\n	@Column(name = ""DT_FIM_TRATAMENTO"")\n	private LocalDate dataFimTratamento;\n\n	@Column(name = ""DS_DURACAO_TRATAMENTO"")\n	private String duracaoTratamento;\n\n	@Column(name = ""DS_DOSE"")\n	private String dose;\n\n	@JoinColumn(name = ""TP_FREQUENCIA_DOSE"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private TipoFrequencia tipoFrequencia;\n\n	@Column(name = ""DS_FREQUENCIA_DOSE"")\n	private String frequenciaDose;\n\n	@Column(name = ""ST_DOSE_UNICA"")\n	@Convert(converter = SimNaoBooleanConverter.class)\n	private Boolean doseUnica;\n\n	@Column(name = ""DS_RECOMENDACAO"")\n	private String recomendacao;\n\n	@JoinColumn(name = ""TP_RECEITA"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private TipoReceita tipoReceita;\n\n	@JoinColumn(name = ""CO_DOCUMENTO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Documento documento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_TIPO_FREQUENCIA"")\npublic class TipoFrequencia implements DomainEntityDefault {\n	@Id\n	@Column(name = ""CO_TIPO_FREQUENCIA"")\n	private Long id;\n\n	@Column(name = ""DS_TIPO_FREQUENCIA"")\n	private String descricao;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_CATEGORIA_MEDICAMENTO"")\npublic class CategoriaMedicamento implements DomainEntityDefault {\n	@Id\n	@Column(name = ""CO_CATEGORIA_MEDICAMENTO"")\n	private Long id;\n\n	@Column(name = ""NO_CATEGORIA_MEDICAMENTO"")\n	private String nome;\n\n	@Column(name = ""DS_CATEGORIA_MEDICAMENTO"")\n	private String descricao;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_MEDICAMENTO"")\npublic class Medicamento {\n	private static final String SEQUENCE_NAME = ""SQ_MEDICAMENTO_COSEQMEDICAMENT"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_MEDICAMENTO"")\n	private Long id;\n\n	@Column(name = ""DS_PRINCIPIO_ATIVO"")\n	private String principioAtivo;\n\n	@Column(name = ""DS_CONCENTRACAO"")\n	private String concentracao;\n\n	@Column(name = ""DS_FORMA_FARMACEUTICA"")\n	private String formaFarmaceutica;\n\n	@Column(name = ""DS_UNIDADE_FORNECIMENTO"")\n	private String unidadeFornecimento;\n\n	@JoinColumn(name = ""CO_CATEGORIA_MEDICAMENTO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private CategoriaMedicamento categoriaMedicamento;\n\n	@Column(name = ""CO_CATMAT"")\n	private String codigoCatMat;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_TIPO_RECEITA"")\npublic class TipoReceita implements DomainEntityDefault {\n	@Id\n	@Column(name = ""CO_TIPO_RECEITA"")\n	private Long id;\n\n	@Column(name = ""DS_TIPO_RECEITA"")\n	private String descricao;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@RequiredArgsConstructor\n@Getter\npublic enum CategoriaMedicamentoEnum implements DomainEntityDefault {\n\n	A1(1L, ""A1"", ""ENTORPECENTES""),\n	A2(2L, ""A2"", ""ENTORPECENTES""),\n	A3(3L, ""A3"", ""PSICOTRÓPICOS""),\n	B1(4L, ""B1"", ""PSICOTRÓPICOS""),\n	B2(5L, ""B2"", ""PSICOTRÓPICOS ANOREXÍGENOS""),\n	C1(6L, ""C1"", ""PSICOATIVOS""),\n	C2(7L, ""C2"", ""RETINÓIDES DE USO SISTÊMICO""),\n	C3(8L, ""C3"", ""IMUNOSSUPRESSORES""),\n	C4(9L, ""C4"", ""ANTI-RETROVIRAIS""),\n	C5(10L, ""C5"", ""ANABOLIZANTES""),\n	D1(11L, ""D1"", ""PRECURSORES""),\n	D2(12L, ""D2"", ""ENTORPECENTES E/OU PSICOTRÓPICOS""),\n	ANTIMICROBIANOS(13L, ""ANTIMICROBIANOS"", null),\n	COMUNS(14L, ""COMUNS"", null);\n\n	private static final Map<Long, CategoriaMedicamentoEnum> map = Arrays\n			.stream(CategoriaMedicamentoEnum.values())\n			.collect(toMap(CategoriaMedicamentoEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String nome;\n	private final String descricao;\n\n	public static CategoriaMedicamentoEnum getById(Long id) {\n		if (id == null) {\n			return null;\n		}\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@RequiredArgsConstructor\n@Getter\npublic enum TipoFrequenciaEnum implements DomainEntityDefault {\n\n	TURNO(1L, ""TURNO""),\n	FREQUENCIA(2L, ""FREQUÊNCIA""),\n	INTERVALO(3L, ""INTERVALO""),\n	FRACIONADO(4L, ""FRACIONADO"");\n\n	private static final Map<Long, TipoFrequenciaEnum> map = Arrays\n			.stream(TipoFrequenciaEnum.values())\n			.collect(toMap(TipoFrequenciaEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String descricao;\n\n	public static TipoFrequenciaEnum getById(Long id) {\n		return map.get(id);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@RequiredArgsConstructor\n@Getter\npublic enum TipoReceitaEnum implements DomainEntityDefault {\n\n	COMUM(1L, ""COMUM""),\n	ESPECIAL(2L, ""ESPECIAL""),\n	ESPECIAL_BRANCA(3L, ""ESPECIAL - NOTIFICAÇÃO BRANCA""),\n	ESPECIAL_AZUL(4L, ""ESPECIAL - NOTIFICAÇÃO AZUL""),\n	ESPECIAL_AMARELA(5L, ""ESPECIAL - NOTIFICAÇÃO AMARELA"");\n\n	private static final Map<Long, TipoReceitaEnum> map = Arrays\n			.stream(TipoReceitaEnum.values())\n			.collect(toMap(TipoReceitaEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String descricao;\n\n	public static TipoReceitaEnum getById(Long id) {\n		return map.get(id);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoReceitaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoReceita;\n\n@Mapper(componentModel = ""spring"")\npublic class TipoReceitaMapper extends DomainEntityDefaultMapper<TipoReceitaEnum, TipoReceita> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoFrequenciaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoFrequencia;\n\n@Mapper(componentModel = ""spring"")\npublic class TipoFrequenciaMapper extends DomainEntityDefaultMapper<TipoFrequenciaEnum, TipoFrequencia> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.dto.ReceitaMedicamentoQueryDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper.MedicamentoMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper.ReceitaMedicamentoMapper;\n\n@Mapper(\n		componentModel = ""spring"",\n		uses = {\n				ReceitaMedicamentoMapper.class,\n				MedicamentoMapper.class,\n				TipoReceitaMapper.class,\n				TipoFrequenciaMapper.class\n		}\n)\npublic interface ReceitaMedicamentoQueryDtoMapper extends DataMapper<ReceitaMedicamentoDto, ReceitaMedicamentoQueryDto> {\n	@Mapping(target = ""."", source = ""receitaMedicamento"")\n	@Mapping(target = ""fornecidaAnteriormente"", source = ""fornecidaAnteriormente"")\n	ReceitaMedicamentoDto toDto(ReceitaMedicamentoQueryDto dto);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.CategoriaMedicamentoEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.CategoriaMedicamento;\n\n@Mapper(componentModel = ""spring"")\npublic class CategoriaMedicamentoMapper extends DomainEntityDefaultMapper<CategoriaMedicamentoEnum, CategoriaMedicamento> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.service.ReceitaMedicamentoListService;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\n\n@RequestMapping(""/api/prescricoes/{codigoAcesso}/receitas"")\n@RestController\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class ReceitaMedicamentoListController {\n	private final ReceitaMedicamentoListService receitaMedicamentoListService;\n\n	@GetMapping\n	public ResponseEntity<List<ReceitaMedicamentoDto>> listReceitaMedicamento(\n			@PathVariable String codigoAcesso\n	) {\n\n		return ResponseEntity.ok(this.receitaMedicamentoListService.getReceitaMedicamentos(codigoAcesso));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.v1.dto;\n\nimport jakarta.validation.constraints.NotBlank;\n\npublic record V1MedicamentoDto(\n		@NotBlank\n		String principioAtivo,\n\n		@NotBlank\n		String unidadeFornecimento,\n\n		String concentracao,\n\n		String formaFarmaceutica\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.v1.dto;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoFrequenciaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoReceitaEnum;\n\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\n\n@Data\npublic class V1ReceitaMedicamentoDto {\n\n	private String posologia;\n\n	private Long quantidadeReceitada;\n\n	private String viaAdministracao;\n\n	@NotNull\n	private Boolean usoContinuo;\n\n	@NotNull\n	private V1MedicamentoDto medicamento;\n\n	private LocalDate dataInicioTratamento;\n\n	private LocalDate dataFimTratamento;\n\n	private String duracaoTratamento;\n\n	@NotBlank\n	private String dose;\n\n	private TipoFrequenciaEnum tipoFrequencia;\n\n	private String frequenciaDose;\n\n	@NotNull\n	private Boolean doseUnica;\n\n	private String recomendacao;\n\n	private TipoReceitaEnum tipoReceita;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\nimport org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\nimport org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.security.web.context.DelegatingSecurityContextRepository;\nimport org.springframework.security.web.context.HttpSessionSecurityContextRepository;\nimport org.springframework.security.web.context.RequestAttributeSecurityContextRepository;\nimport org.springframework.security.web.context.SecurityContextRepository;\nimport org.springframework.security.web.savedrequest.HttpSessionRequestCache;\nimport org.springframework.security.web.savedrequest.RequestCache;\nimport org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter;\n\nimport br.ufsc.bridge.pecassinador.security.contaservico.ContaServicoAuthenticationProvider;\nimport br.ufsc.bridge.pecassinador.security.contaservico.ContaServicoAuthorizationFilter;\nimport br.ufsc.bridge.pecassinador.security.integraicp.service.IntegraIcpAuthenticationProvider;\nimport br.ufsc.bridge.pecassinador.security.oauth.CustomAuthenticationEntryPoint;\nimport br.ufsc.bridge.pecassinador.security.oauth.CustomAuthenticationFailureHandler;\nimport br.ufsc.bridge.pecassinador.security.oauth.CustomOAuth2SuccessHandler;\nimport br.ufsc.bridge.pecassinador.security.oauth.RequestWrapperFilter;\n\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity(securedEnabled = true)\n@RequiredArgsConstructor\npublic class SecurityConfiguration {\n	private final CustomAuthenticationFailureHandler customAuthenticationFailureHandler;\n	private final CustomAuthenticationEntryPoint customAuthenticationEntryPoint;\n	private final ClientRegistrationRepository clientRegistrationRepository;\n	private final ContaServicoAuthorizationFilter contaServicoAuthorizationFilter;\n	private final ContaServicoAuthenticationProvider contaServicoAuthenticationProvider;\n	private final IntegraIcpAuthenticationProvider integraIcpAuthenticationProvider;\n\n	@Bean\n	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n		http.csrf()\n				.disable()\n				.headers()\n				.frameOptions()\n				.sameOrigin()\n				.and()\n				.addFilterBefore(new RequestWrapperFilter(), OAuth2LoginAuthenticationFilter.class)\n				.addFilterBefore(this.contaServicoAuthorizationFilter, SecurityContextHolderAwareRequestFilter.class)\n				.requestCache()\n				.requestCache(this.requestCache())\n				.and()\n				.exceptionHandling()\n				.authenticationEntryPoint(this.customAuthenticationEntryPoint)\n				.and()\n				.securityContext()\n				.requireExplicitSave(false) //pra autenticar ""manualmente"" o usuário sem precisar manipular o SecurityContextRepository (mudança recente do Spring Security)\n				.and()\n				.oauth2Login(oauth2 -> oauth2\n						.successHandler(this.successHandler())\n						.clientRegistrationRepository(this.clientRegistrationRepository)\n						.redirectionEndpoint()\n						.baseUri(""/api/oauth2/callback/*"")\n						.and()\n						.authorizationEndpoint()\n						.baseUri(""/api/oauth2/authorization"")\n						.and()\n						.failureHandler(this.customAuthenticationFailureHandler)\n				);\n\n		return http.build();\n	}\n\n	private AuthenticationSuccessHandler successHandler() {\n		return new CustomOAuth2SuccessHandler();\n	}\n\n	@Bean\n	public SecurityContextRepository securityContextRepository() {\n		return new DelegatingSecurityContextRepository(\n				new RequestAttributeSecurityContextRepository(),\n				new HttpSessionSecurityContextRepository()\n		);\n	}\n\n	@Bean\n	public RequestCache requestCache() {\n		return new HttpSessionRequestCache();\n	}\n\n	@Bean\n	public OAuth2AuthorizedClientRepository authorizedClientRepository(OAuth2AuthorizedClientService authorizedClientService) {\n		return new AuthenticatedPrincipalOAuth2AuthorizedClientRepository(authorizedClientService);\n	}\n\n	@Bean\n	public AuthenticationManager authenticationManager() {\n		return new ProviderManager(List.of(this.integraIcpAuthenticationProvider, this.contaServicoAuthenticationProvider));\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.secured;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport lombok.val;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.annotation.RequestScope;\n\nimport br.ufsc.bridge.pecassinador.security.authorization.dto.CredentialsDto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\n@RequestScope\n@Component\npublic class SecuredContext {\n	public static final String CREDENTIALS_ATTRIBUTE = ""credentials"";\n	private final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n\n	public Collection<String> getScopes() {\n		return this.authentication != null ? this.authentication.getAuthorities()\n				.stream()\n				.filter(grantedAuthority -> grantedAuthority instanceof SimpleGrantedAuthority)\n				.map(GrantedAuthority::getAuthority)\n				.toList() : null;\n	}\n\n	public String getName() {\n		return this.authentication.getName();\n	}\n\n	public String getUsername() {\n		val attributes = this.getAttributes();\n		return (String) attributes.get(""name"");\n	}\n\n	@JsonIgnore\n	public Map<String, Object> getAttributes() {\n		if (this.authentication.getPrincipal() instanceof OAuth2User principal) {\n			return principal.getAttributes();\n		}\n\n		return Map.of();\n	}\n\n	@JsonIgnore\n	public CredentialsDto getCredentials() {\n		val attributes = this.getAttributes();\n\n		return (CredentialsDto) attributes.get(CREDENTIALS_ATTRIBUTE);\n\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.secured;\n\npublic class SecuredScope {\n	public static final String SIGN = ""SCOPE_SIGN"";\n	public static final String GOVBR = ""SCOPE_GOVBR"";\n	public static final String SERVICE = ""SCOPE_SERVICE"";\n	public static final String ADMIN = ""SCOPE_ADMIN"";\n	public static final String QUALIFIED_SIGN = ""SCOPE_QUALIFIED_SIGN"";\n}"
not_service,"package br.ufsc.bridge.pecassinador.security.authorization.dto;\n\npublic record CredentialsDto(String code, String verifier, String encodedX509) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.authorization.dto;\n\npublic record AuthorizationProviderDto(\n		String name,\n		String endpoint\n) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.authorization.controller;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.security.authorization.service.AuthorizationUnauthorizeService;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@RestController\n@RequestMapping(""/api/unauthorize"")\n@RequiredArgsConstructor\npublic class AuthorizationUnauthorizeController {\n	private final AuthorizationUnauthorizeService unauthorizeService;\n\n	@GetMapping\n	public void unauthorize(HttpServletRequest request, HttpServletResponse response, SecuredContext securedContext) throws IOException {\n		this.unauthorizeService.unauthorize(request, response, securedContext);\n	}\n}"
not_service,"package br.ufsc.bridge.pecassinador.security.authorization.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.security.authorization.dto.AuthorizationProviderDto;\nimport br.ufsc.bridge.pecassinador.security.authorization.service.AuthorizationListProvidersService;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n@RestController\n@RequestMapping(""/api/authorization/providers"")\n@RequiredArgsConstructor\npublic class AuthorizationListProvidersController {\n	private final AuthorizationListProvidersService authorizationListProvidersService;\n\n	@GetMapping\n	public ResponseEntity<List<AuthorizationProviderDto>> getProviders(@RequestParam(required = false, defaultValue = ""false"") Boolean isQualified,\n			HttpServletRequest request) {\n		return ResponseEntity.ok(this.authorizationListProvidersService.getProviders(isQualified, request));\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.authorization.controller;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\n@RestController\n@RequestMapping(""/api/authorization"")\n@RequiredArgsConstructor\npublic class AuthorizationGetController {\n	@GetMapping\n	public ResponseEntity<SecuredContext> getAuthorization(SecuredContext securedContext) {\n		return ResponseEntity.ok(securedContext);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport static org.springframework.security.oauth2.core.AuthorizationGrantType.AUTHORIZATION_CODE;\nimport static org.springframework.security.oauth2.core.ClientAuthenticationMethod.CLIENT_SECRET_BASIC;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n\n@Configuration\n@RequiredArgsConstructor\npublic class ClientRegistrationRepositoryConfig {\n\n	@Bean(""iti"")\n	public ClientRegistration buildItiRegistration(\n			@Value(""${iti.client-id}"") String clientId,\n			@Value(""${iti.client-secret}"") String clientSecret,\n			@Value(""${iti.base-uri}"") String baseUri,\n			@Value(""${public-uri}"") String publicUri) {\n		return ClientRegistration\n				.withRegistrationId(""iti"")\n				.clientId(clientId)\n				.clientSecret(clientSecret)\n				.scope(""sign"")\n				.authorizationGrantType(AUTHORIZATION_CODE)\n				.clientAuthenticationMethod(CLIENT_SECRET_BASIC)\n				.redirectUri(publicUri + ""/api/oauth2/callback/{registrationId}"")\n				.authorizationUri(baseUri + ""/authorize"")\n				.tokenUri(baseUri + ""/token"")\n				.build();\n	}\n\n	@Bean(""govbr"")\n	public ClientRegistration buildGovRegistration(\n			@Value(""${govbr.client-id}"") String clientId,\n			@Value(""${govbr.client-secret}"") String clientSecret,\n			@Value(""${govbr.base-uri}"") String baseUri,\n			@Value(""${public-uri}"") String publicUri) {\n\n		return ClientRegistration\n				.withRegistrationId(""govbr"")\n				.clientId(clientId)\n				.clientSecret(clientSecret)\n				.scope(""openid"", ""email"", ""phone"", ""profile"", ""govbr_confiabilidades"")\n				.authorizationGrantType(AUTHORIZATION_CODE)\n				.clientAuthenticationMethod(CLIENT_SECRET_BASIC)\n				.redirectUri(publicUri + ""/api/oauth2/callback/{registrationId}"")\n				.authorizationUri(baseUri + ""/authorize"")\n				.tokenUri(baseUri + ""/token"")\n				.jwkSetUri(baseUri + ""/jwk"")\n				.userNameAttributeName(""sub"")\n				.build();\n	}\n\n	@Bean()\n	public ClientRegistrationRepository clientRegistrationRepository(@Qualifier(""iti"") ClientRegistration itiRegistration, @Qualifier(""govbr"") ClientRegistration govRegistration) {\n		return new InMemoryClientRegistrationRepository(itiRegistration, govRegistration);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredContext.CREDENTIALS_ATTRIBUTE;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SIGN;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextImpl;\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\nimport org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.pecassinador.security.authorization.dto.CredentialsDto;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\n@Service\n@RequiredArgsConstructor\n//govbr não usa essa classe porque tem scope openid\npublic class CustomOAuth2UserService extends DefaultOAuth2UserService {\n	private final HttpServletRequest httpServletRequest;\n\n	@Override\n	public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {\n		val securedContext = (SecurityContextImpl) this.httpServletRequest.getSession(false).getAttribute(""SPRING_SECURITY_CONTEXT"");\n		val oldToken = (OAuth2AuthenticationToken) securedContext.getAuthentication();\n\n		val tokenBuilder = OAuth2AuthenticationTokenBuilder.fromToken(oldToken);\n		val credentials = new CredentialsDto(userRequest.getAccessToken().getTokenValue(), null, null);\n		tokenBuilder.putAttribute(CREDENTIALS_ATTRIBUTE, credentials);\n		tokenBuilder.putAuthorities(new SimpleGrantedAuthority(SIGN));\n\n		return tokenBuilder.build().getPrincipal();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.web.DefaultRedirectStrategy;\nimport org.springframework.security.web.RedirectStrategy;\nimport org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;\nimport org.springframework.security.web.savedrequest.DefaultSavedRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport br.ufsc.bridge.pecassinador.contaservico.repository.ContaServicoRepository;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@Component\n@RequiredArgsConstructor\n/*\n * Se a autenticação com o iti/govbr falhar, ele procura por um clientId na url que desencadeou o processo de autenticação e procura a url pra realizar o callback.\n */\npublic class CustomAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n	private final ContaServicoRepository contaServicoRepository;\n	private final RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();\n\n	private String getRedirectUri(String clientId) {\n		val baseRedirectUri = this.contaServicoRepository.getRedirectUriByNome(clientId).orElse(null);\n\n		if (baseRedirectUri == null) {\n			return null;\n		}\n\n		return UriComponentsBuilder\n				.fromUriString(baseRedirectUri)\n				.queryParam(""error"", true)\n				.build()\n				.toUriString();\n	}\n\n	private String getSavedClientId(HttpServletRequest request) {\n		val defaultSavedRequest = (DefaultSavedRequest) request.getSession().getAttribute(""SPRING_SECURITY_SAVED_REQUEST"");\n\n		if (defaultSavedRequest == null) {\n			return null;\n		}\n\n		val parameterValues = defaultSavedRequest.getParameterValues(""clientId"");\n\n		return parameterValues != null ? parameterValues[0] : null;\n	}\n\n	@Override\n	public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)\n			throws IOException, ServletException {\n\n		val clientId = this.getSavedClientId(request);\n		val redirectUri = clientId != null ? this.getRedirectUri(clientId) : null;\n\n		if (redirectUri == null) {\n			super.onAuthenticationFailure(request, response, exception);\n			return;\n		}\n\n		this.redirectStrategy.sendRedirect(request, response, this.getRedirectUri(clientId));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\nimport org.springframework.security.oauth2.core.user.DefaultOAuth2User;\n\n@RequiredArgsConstructor\npublic class OAuth2AuthenticationTokenBuilder {\n	private final Collection<GrantedAuthority> authorities;\n	private final Map<String, Object> attributes;\n	private final String authorizedClientRegistrationId;\n	private final String nameAttributeKey;\n\n	public static OAuth2AuthenticationTokenBuilder fromToken(OAuth2AuthenticationToken authenticationToken) {\n		return new OAuth2AuthenticationTokenBuilder(new HashSet<>(authenticationToken.getAuthorities()), new HashMap<>(authenticationToken.getPrincipal().getAttributes()),\n				authenticationToken.getAuthorizedClientRegistrationId(), ""sub"");\n	}\n\n	public OAuth2AuthenticationToken build() {\n		val user = new DefaultOAuth2User(this.authorities, this.attributes, this.nameAttributeKey);\n		return new OAuth2AuthenticationToken(user, this.authorities, this.authorizedClientRegistrationId);\n	}\n\n	public void putAttribute(String key, Object value) {\n		this.attributes.put(key, value);\n	}\n\n	public void removeAttribute(String key) {\n		this.attributes.remove(key);\n	}\n\n	public void putAuthorities(GrantedAuthority... authorities) {\n		this.authorities.addAll(List.of(authorities));\n	}\n\n	public void putAuthorities(Collection<GrantedAuthority> authorities) {\n		this.authorities.addAll(authorities);\n	}\n\n	public void setAuthorities(GrantedAuthority... authorities) {\n		this.authorities.clear();\n		this.putAuthorities(authorities);\n	}\n\n	public void removeAuthority(GrantedAuthority authority) {\n		this.authorities.remove(authority);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport static br.ufsc.bridge.pecassinador.security.oauth.AuthorizedClientRegistration.GOVBR_REGISTRATION_ID;\nimport static br.ufsc.bridge.pecassinador.security.oauth.AuthorizedClientRegistration.ITI_REGISTRATION_ID;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SIGN;\n\nimport java.io.IOException;\n\nimport lombok.val;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\nimport org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;\nimport org.springframework.security.web.savedrequest.HttpSessionRequestCache;\nimport org.springframework.security.web.savedrequest.RequestCache;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StringUtils;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n/*\n	Evita redireção quando login é feito pelo govbr\n */\n@Service\npublic class CustomOAuth2SuccessHandler extends SimpleUrlAuthenticationSuccessHandler {\n	public static final String AUTHORIZATION_REQUEST_SCOPE_ATTRIBUTE = ""ROLE_TARGET"";\n\n	private final RequestCache requestCache = new HttpSessionRequestCache();\n\n	@Override\n	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n			Authentication authentication) throws ServletException, IOException {\n\n		val isGovBr = request.getRequestURI().endsWith(""/api/oauth2/callback/"" + GOVBR_REGISTRATION_ID);\n		val session = request.getSession(false);\n		val requestScope = session.getAttribute(AUTHORIZATION_REQUEST_SCOPE_ATTRIBUTE);\n\n		if (isGovBr && authentication instanceof OAuth2AuthenticationToken token) {\n			val tokenBuilder = OAuth2AuthenticationTokenBuilder.fromToken(token);\n			tokenBuilder.setAuthorities(new SimpleGrantedAuthority(GOVBR));\n			SecurityContextHolder.getContext().setAuthentication(tokenBuilder.build());\n			val isItiRequired = SIGN.equals(requestScope);\n\n			if (isItiRequired) {\n				this.clearAuthenticationAttributes(request);\n				String targetUrl = ""/api/oauth2/authorization/"" + ITI_REGISTRATION_ID;\n				this.getRedirectStrategy().sendRedirect(request, response, targetUrl);\n				return;\n			}\n		}\n\n		val savedRequest = !isGovBr ? this.requestCache.getRequest(request, response) : null;\n\n		if (savedRequest == null) {\n			super.onAuthenticationSuccess(request, response, authentication);\n			return;\n		}\n\n		String targetUrlParameter = this.getTargetUrlParameter();\n\n		if (this.isAlwaysUseDefaultTargetUrl()\n				|| (targetUrlParameter != null && StringUtils.hasText(request.getParameter(targetUrlParameter)))) {\n			this.requestCache.removeRequest(request, response);\n			super.onAuthenticationSuccess(request, response, authentication);\n			return;\n		}\n\n		this.clearAuthenticationAttributes(request);\n		String targetUrl = savedRequest.getRedirectUrl();\n		this.getRedirectStrategy().sendRedirect(request, response, targetUrl);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\npublic class AuthorizedClientRegistration {\n	public static final String ITI_REGISTRATION_ID = ""iti"";\n	public static final String GOVBR_REGISTRATION_ID = ""govbr"";\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport static br.ufsc.bridge.pecassinador.security.oauth.AuthorizedClientRegistration.ITI_REGISTRATION_ID;\n\nimport java.io.IOException;\n\nimport lombok.val;\n\nimport org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizationRequestRepository;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport io.micrometer.common.util.StringUtils;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n/*\n    O ITI não devolve parâmetro state esperado pelo spring. Adicionamos o valor esperado pra que o spring consiga obter o access token / autenticar.\n*/\npublic class RequestWrapperFilter extends OncePerRequestFilter {\n	private static final String STATE_PARAMETER_NAME = ""state"";\n	private static final String DEFAULT_AUTHORIZATION_REQUEST_ATTR_NAME = HttpSessionOAuth2AuthorizationRequestRepository.class.getName() + "".AUTHORIZATION_REQUEST"";\n\n	@Override\n	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n		val session = request.getSession(false);\n		val authorizationRequest = session != null ? (OAuth2AuthorizationRequest) session.getAttribute(DEFAULT_AUTHORIZATION_REQUEST_ATTR_NAME) : null;\n		val isMissingState = StringUtils.isEmpty(request.getParameter(STATE_PARAMETER_NAME));\n\n		if (authorizationRequest != null && ITI_REGISTRATION_ID.equals(authorizationRequest.getAttribute(""registration_id"")) && isMissingState) {\n			val requestWrapper = new RequestWrapper(request);\n			requestWrapper.putParameter(STATE_PARAMETER_NAME, authorizationRequest.getState());\n			filterChain.doFilter(requestWrapper, response);\n			return;\n		}\n\n		filterChain.doFilter(request, response);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport static br.ufsc.bridge.pecassinador.security.oauth.CustomOAuth2SuccessHandler.AUTHORIZATION_REQUEST_SCOPE_ATTRIBUTE;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.QUALIFIED_SIGN;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.authentication.AnonymousAuthenticationToken;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.Http403ForbiddenEntryPoint;\nimport org.springframework.security.web.authentication.HttpStatusEntryPoint;\nimport org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@Component\n@RequiredArgsConstructor\npublic class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {\n	private final Http403ForbiddenEntryPoint forbiddenEntryPoint = new Http403ForbiddenEntryPoint();\n	private final HttpStatusEntryPoint unauthorizedEntryPoint = new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED);\n\n	@Override\n	public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n\n		AuthenticationEntryPoint authenticationEntryPoint = this.forbiddenEntryPoint;\n\n		val authentication = SecurityContextHolder.getContext().getAuthentication();\n\n		if (authException instanceof RequiresSignAuthenticationException) {\n			authenticationEntryPoint = this.buildSignAuthenticationEntryPoint(request);\n\n		} else if (authentication == null || authentication instanceof AnonymousAuthenticationToken) {\n			authenticationEntryPoint = this.unauthorizedEntryPoint;\n		}\n\n		authenticationEntryPoint.commence(request, response, authException);\n	}\n\n	private AuthenticationEntryPoint buildSignAuthenticationEntryPoint(HttpServletRequest request) {\n		val session = request.getSession();\n\n		val requestScope = session.getAttribute(AUTHORIZATION_REQUEST_SCOPE_ATTRIBUTE);\n\n		val urlBuilder = UriComponentsBuilder.fromUriString(""/autorizacao"");\n\n		if (QUALIFIED_SIGN.equals(requestScope)) {\n			urlBuilder.queryParam(""qualified"", true);\n		}\n\n		return new LoginUrlAuthenticationEntryPoint(urlBuilder.toUriString());\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport org.springframework.security.core.AuthenticationException;\n\npublic class RequiresSignAuthenticationException extends AuthenticationException {\n	public RequiresSignAuthenticationException(String msg) {\n		super(msg);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.oauth;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport lombok.val;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletRequestWrapper;\n\npublic class RequestWrapper extends HttpServletRequestWrapper {\n	private final Map<String, String[]> parameterMap = new LinkedHashMap<>();\n\n	public RequestWrapper(HttpServletRequest request) {\n		super(request);\n		this.parameterMap.putAll(super.getParameterMap());\n	}\n\n	@Override\n	public String getParameter(String name) {\n		val parameter = this.parameterMap.get(name);\n\n		return parameter != null && parameter.length > 0 ? parameter[0] : null;\n	}\n\n	@Override\n	public Map<String, String[]> getParameterMap() {\n		return this.parameterMap;\n	}\n\n	public void putParameter(String name, String value) {\n		this.parameterMap.put(name, new String[] { value });\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.interceptor;\n\nimport static br.ufsc.bridge.pecassinador.security.oauth.CustomOAuth2SuccessHandler.AUTHORIZATION_REQUEST_SCOPE_ATTRIBUTE;\n\nimport java.io.IOException;\nimport java.util.Arrays;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.jetbrains.annotations.NotNull;\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.savedrequest.RequestCache;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport br.ufsc.bridge.pecassinador.security.oauth.RequiresSignAuthenticationException;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@RequiredArgsConstructor\n@Scope(""prototype"")\n@Service\npublic class SecuredHandlerInterceptor implements HandlerInterceptor {\n	private final SecuredContext securedContext;\n	private final RequestCache requestCache;\n	private final AuthenticationEntryPoint authenticationEntryPoint;\n	private final String securedScope;\n\n	@Override\n	public boolean preHandle(@NotNull HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull Object handler) throws ServletException, IOException {\n		if (this.hasSecuredSignAnnotation(handler) && !this.securedContext.getScopes().contains(securedScope)) {\n			this.saveRequest(request, response);\n			this.authenticationEntryPoint.commence(request, response, new RequiresSignAuthenticationException(securedScope + "" scope required""));\n			return false;\n		}\n\n		return true;\n	}\n\n	@Override\n	public void postHandle(@NotNull HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull Object handler, ModelAndView modelAndView) {\n		if (this.hasSecuredSignAnnotation(handler) && this.securedContext.getScopes().contains(securedScope)) {\n			request.getSession(false).invalidate();\n		}\n	}\n\n	private boolean hasSecuredSignAnnotation(Object handler) {\n		if (handler instanceof HandlerMethod handlerMethod) {\n			val securedMethodAnnotation = handlerMethod.getMethodAnnotation(Secured.class);\n			val securedClassAnnotation = handlerMethod.getMethod().getDeclaringClass().getAnnotation(Secured.class);\n			val securedAnnotation = securedMethodAnnotation != null ? securedMethodAnnotation : securedClassAnnotation;\n			return securedAnnotation != null && Arrays.asList(securedAnnotation.value()).contains(securedScope);\n		}\n		return false;\n	}\n\n	private void saveRequest(HttpServletRequest request, HttpServletResponse response) {\n		request.getSession(true).setAttribute(AUTHORIZATION_REQUEST_SCOPE_ATTRIBUTE, securedScope);\n		this.requestCache.saveRequest(request, response);\n	}\n\n}"
not_service,"package br.ufsc.bridge.pecassinador.security.interceptor;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.QUALIFIED_SIGN;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SIGN;\n\nimport java.util.stream.Stream;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\n@RequiredArgsConstructor\npublic class InterceptorConfiguration implements WebMvcConfigurer {\n	private final SecuredHandlerInterceptorFactory securedHandlerInterceptorFactory;\n\n	@Override\n	public void addInterceptors(InterceptorRegistry registry) {\n		Stream.of(SIGN, QUALIFIED_SIGN)\n				.map(securedHandlerInterceptorFactory::create)\n				.forEach(registry::addInterceptor);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.interceptor;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.savedrequest.RequestCache;\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\n@Service\n@RequiredArgsConstructor\npublic class SecuredHandlerInterceptorFactory {\n	private final SecuredContext securedContext;\n	private final RequestCache requestCache;\n	private final AuthenticationEntryPoint authenticationEntryPoint;\n	private final ApplicationContext applicationContext;\n\n	public SecuredHandlerInterceptor create(String securedScope) {\n		return applicationContext.getBean(SecuredHandlerInterceptor.class, securedContext, requestCache, authenticationEntryPoint, securedScope);\n	}\n}"
not_service,"package br.ufsc.bridge.pecassinador.security.contaservico;\n\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n\npublic class ContaServicoAuthenticationToken extends UsernamePasswordAuthenticationToken {\n	public ContaServicoAuthenticationToken(Object principal, Object credentials) {\n		super(principal, credentials);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.contaservico;\n\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class ContaServicoPasswordEncoder extends BCryptPasswordEncoder {\n	public ContaServicoPasswordEncoder() {\n		super(12);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.contaservico;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.oauth2.core.user.DefaultOAuth2User;\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.pecassinador.contaservico.repository.ContaServicoRepository;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredScope;\n\n@Service\n@RequiredArgsConstructor\npublic class ContaServicoAuthenticationProvider implements AuthenticationProvider {\n	private final ContaServicoRepository contaServicoRepository;\n	private final ContaServicoPasswordEncoder passwordEncoder;\n\n	@Override\n	public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n		val name = authentication.getName();\n		val secret = authentication.getCredentials().toString();\n		val serviceAccount = this.contaServicoRepository\n				.findByNome(authentication.getName())\n				.orElseThrow(() -> new BadCredentialsException(""Bad credentials""));\n\n		val attributes = Map.of(""sub"", name, ""id"", (Object) serviceAccount.getId(), ""redirectUri"", serviceAccount.getRedirectUri());\n		val authorities = List.of(new SimpleGrantedAuthority(SecuredScope.SERVICE));\n		val principal = new DefaultOAuth2User(authorities, attributes, ""sub"");\n\n		if (this.passwordEncoder.matches(secret, serviceAccount.getSenha())) {\n			return new UsernamePasswordAuthenticationToken(principal, secret, authorities);\n		}\n\n		throw new BadCredentialsException(""Bad credentials"");\n	}\n\n	@Override\n	public boolean supports(Class<?> authentication) {\n		return authentication.equals(ContaServicoAuthenticationToken.class);\n	}\n}"
not_service,"package br.ufsc.bridge.pecassinador.security.contaservico;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoLoginRequestDto;\n\nimport jakarta.servlet.http.HttpServletResponse;\n\n@Service\n@RequiredArgsConstructor\npublic class ContaServicoLoginService {\n	private final ContaServicoJwtService contaServicoJwtService;\n	private final AuthenticationConfiguration authenticationConfiguration;\n\n	public void login(ContaServicoLoginRequestDto contaServicoLoginRequestDto, HttpServletResponse response) throws Exception {\n		val authentication = this.authenticationConfiguration\n				.getAuthenticationManager()\n				.authenticate(new ContaServicoAuthenticationToken(contaServicoLoginRequestDto.getClientId(), contaServicoLoginRequestDto.getSecret()));\n\n		val token = this.contaServicoJwtService.createToken((OAuth2User) authentication.getPrincipal());\n\n		response.setHeader(HttpHeaders.AUTHORIZATION, token);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.contaservico;\n\nimport java.time.Instant;\nimport java.time.temporal.ChronoUnit;\nimport java.util.List;\nimport java.util.Map;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.oauth2.core.user.DefaultOAuth2User;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.security.oauth2.jwt.JwtException;\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredScope;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.DecodedJWT;\n\n@Service\n@RequiredArgsConstructor\npublic class ContaServicoJwtService {\n	@Value(""${conta-servico.jwt-secret}"")\n	private String secret;\n	@Value(""${conta-servico.jwt-expiration-minutes}"")\n	private long expiration;\n\n	public String createToken(OAuth2User user) {\n		return JWT.create()\n				.withExpiresAt(Instant.now().plus(this.expiration, ChronoUnit.MINUTES))\n				.withClaim(""sub"", (String) user.getAttribute(""sub""))\n				.withClaim(""id"", (Long) user.getAttribute(""id""))\n				.withClaim(""redirectUri"", (String) user.getAttribute(""redirectUri""))\n				.withArrayClaim(""scopes"", new String[] { SecuredScope.SERVICE })\n				.sign(Algorithm.HMAC512(this.secret.getBytes()));\n	}\n\n	public OAuth2User decodeToken(String token) {\n		val payload = this.verifyToken(token);\n\n		if (payload == null) {\n			throw new JwtException(""JWT decoding error"");\n		}\n\n		val attributes = Map.of(\n				""sub"", payload.getClaim(""sub"").asString(),\n				""id"", (Object) payload.getClaim(""id"").asLong(),\n				""redirectUri"", payload.getClaim(""redirectUri"").asString());\n\n		val authorities = List.of(new SimpleGrantedAuthority(SecuredScope.SERVICE));\n		return new DefaultOAuth2User(authorities, attributes, ""sub"");\n	}\n\n	private DecodedJWT verifyToken(String token) {\n		return JWT\n				.require(Algorithm.HMAC512(this.secret.getBytes()))\n				.build()\n				.verify(token);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.contaservico;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@Component\n@RequiredArgsConstructor\npublic class ContaServicoAuthorizationFilter extends OncePerRequestFilter {\n	private static final String HEADER_STRING = ""Authorization"";\n	private static final String HEADER_PREFIX = ""Bearer "";\n	private final ContaServicoJwtService contaServicoJwtService;\n\n	@Override\n	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws ServletException, IOException {\n		val authorizationHeader = request.getHeader(HEADER_STRING);\n		val token = authorizationHeader != null && authorizationHeader.startsWith(HEADER_PREFIX) ? authorizationHeader.replaceFirst(HEADER_PREFIX, """") : null;\n\n		if (StringUtils.isNotEmpty(token)) {\n			try {\n				SecurityContextHolder.getContext().setAuthentication(this.authenticate(token));\n			} catch (Exception e) {\n				this.handleUnsuccessfulAuthentication(response);\n				return;\n			}\n		}\n\n		chain.doFilter(request, response);\n	}\n\n	private void handleUnsuccessfulAuthentication(HttpServletResponse response) {\n		SecurityContextHolder.getContext().setAuthentication(null);\n		response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n	}\n\n	private UsernamePasswordAuthenticationToken authenticate(String token) {\n		val principal = this.contaServicoJwtService.decodeToken(token);\n		return new UsernamePasswordAuthenticationToken(principal, null, principal.getAuthorities());\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.integraicp;\n\nimport java.time.Duration;\n\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic class IntegraIcpConstants {\n	public static final Duration PROVIDERS_REQUEST_TIMEOUT = Duration.ofSeconds(15);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.integraicp.dto;\n\nimport java.util.List;\n\npublic record IntegraIcpSignRequestDto(String credential, String codeVerifier, List<RequestDto> requests) {\n	public record RequestDto(String contentDigest, String contentDescription) {\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.integraicp.dto;\n\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n\npublic class IntegraIcpAuthenticationToken extends UsernamePasswordAuthenticationToken {\n	public IntegraIcpAuthenticationToken(Object principal, Object credentials) {\n		super(principal, credentials);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.integraicp.dto;\n\nimport java.util.List;\n\npublic record IntegraIcpAuthenticationsResponseDto(DataDto data) {\n	public record DataDto(\n			String requestId,\n			String channelName,\n			String channelDescription,\n			List<ClearanceDto> clearances) {\n	}\n\n	public record ClearanceDto(\n			String clearanceId,\n			String productName,\n			String clearanceEndpoint,\n			String clearanceType\n	) {\n	}\n}\n\n\n"
not_service,"package br.ufsc.bridge.pecassinador.security.integraicp.dto;\n\nimport java.util.List;\n\npublic record IntegraIcpSignResponseDto(DataDto data) {\n	public record DataDto(SubjectIdentificationDto subjectIdentification,\n						  CertificateInformationDto certificateInformation, List<SignatureDto> signatures) {\n\n	}\n\n	public record SubjectIdentificationDto(String identificationKey) {\n	}\n\n	public record CertificateInformationDto(String encodedX509) {\n	}\n\n	public record SignatureDto(byte[] signedContent) {\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.security.integraicp.dto;\n\npublic record IntegraIcpGetCredentialsResponseDto(CredentialDto data) {\n	public record CredentialDto(SubjectIdentificationDto subjectIdentification,\n								CertificateInformationDto certificateInformation) {\n	}\n\n	public record SubjectIdentificationDto(String identificationKey, String identificationType) {\n	}\n\n	public record CertificateInformationDto(String subjectName, String encodedX509) {\n	}\n\n}"
not_service,"package br.ufsc.bridge.pecassinador.security.integraicp.controller;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.security.integraicp.service.IntegraIcpAuthenticateService;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@RestController\n@RequestMapping(""/api/integraicp/callback"")\n@RequiredArgsConstructor\npublic class IntegraIcpCallbackController {\n	private final IntegraIcpAuthenticateService integraIcpAuthenticateService;\n\n	@GetMapping\n	public void authorize(@RequestParam String code, HttpServletRequest request, HttpServletResponse response) {\n		this.integraIcpAuthenticateService.authenticate(code, request, response);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.dto;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@Data\n@Metafy\n@TypeScriptModel\npublic class EmissorDto {\n	@JsonProperty(access = JsonProperty.Access.READ_ONLY)\n	private Long id;\n\n	private String cpf;\n\n	private String nome;\n\n	private String siglaConselhoClasse;\n\n	private String numeroConselhoClasse;\n\n	private String ufEmissoraConselhoClasse;\n\n	private CboDto cbo;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CboDto {\n	private String descricao;\n	private String codigoCbo2002;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.validator;\n\nimport static br.ufsc.bridge.pecassinador.emissor.latest.dto.MCboDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\n\n@Component\n@RequiredArgsConstructor\npublic class CboDtoValidator implements DtoValidator<CboDto> {\n	public Validator<CboDto> validate(\n			CboDto cboDto\n	) {\n		val validator = Validator.of(cboDto);\n		validator\n				.check(meta.codigoCbo2002, required)\n				.check(meta.descricao, required);\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.validator;\n\nimport static br.ufsc.bridge.pecassinador.emissor.latest.dto.MEmissorDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.cpf;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\n\n@Component\n@RequiredArgsConstructor\npublic class EmissorDtoValidator implements DtoValidator<EmissorDto> {\n	private final CboDtoValidator cboDtoValidator;\n\n	public Validator<EmissorDto> validate(\n			EmissorDto emissorDto\n	) {\n		val validator = Validator.of(emissorDto);\n\n		validator\n				.check(meta.cpf, cpf)\n				.check(meta.cpf, required)\n				.check(meta.siglaConselhoClasse, required)\n				.check(meta.numeroConselhoClasse, required)\n				.check(meta.ufEmissoraConselhoClasse, required)\n				.check(meta.cbo(), required)\n				.check(meta.nome, required);\n\n		if (validator.isValid()) {\n			validator.formError(\n					meta.cbo(),\n					cboDtoValidator.validate(emissorDto.getCbo())\n			);\n		}\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.mapper;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.emissor.common.enums.ConselhoClasseEnum;\nimport br.ufsc.bridge.pecassinador.emissor.common.mapper.ConselhoClasseMapper;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.ConselhoClasse;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Emissor;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.mapper.UfMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\n@Mapper(componentModel = ""spring"",\n		uses = {\n				CboMapper.class\n		}\n)\npublic abstract class EmissorMapper {\n	@PersistenceContext\n	private EntityManager entityManager;\n\n	@Autowired\n	private ConselhoClasseMapper conselhoClasseMapper;\n\n	@Autowired\n	private UfMapper ufMapper;\n\n	@Mapping(target = ""id"", ignore = true)\n	@Mapping(target = ""conselhoClasse"", ignore = true)\n	@Mapping(target = ""ufConselhoClasse"", ignore = true)\n	public abstract Emissor toEntity(EmissorDto dto);\n\n	@Mapping(target = ""id"", ignore = true)\n	public abstract EmissorDto toDto(Emissor emissor);\n\n	@AfterMapping\n	void afterDtoMapping(\n			@MappingTarget EmissorDto dto,\n			Emissor emissor\n	) {\n		dto.setSiglaConselhoClasse(emissor.getConselhoClasse().getSigla());\n		dto.setUfEmissoraConselhoClasse(emissor.getUfConselhoClasse().getSigla());\n	}\n\n	@AfterMapping\n	void afterEntityMapping(\n			@MappingTarget Emissor emissor,\n			EmissorDto dto\n	) {\n		emissor.setUfConselhoClasse(ufMapper.toEntity(UfEnum.valueOf(dto.getUfEmissoraConselhoClasse()), Uf.class));\n		emissor.setConselhoClasse(conselhoClasseMapper.toEntity(ConselhoClasseEnum.valueOf(dto.getSiglaConselhoClasse()), ConselhoClasse.class));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DataMapper;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Cbo;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\n\n@Mapper(componentModel = ""spring"")\npublic interface CboMapper extends DataMapper<CboDto, Cbo> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.repository;\n\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Emissor;\n\n@Repository\npublic interface EmissorRepository extends JpaRepository<Emissor, Long> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Cbo;\n\npublic interface CboRepository extends JpaRepository<Cbo, Long> {\n	Optional<Cbo> findByCodigoCbo2002(String codigoCbo);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.common.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\n\n@Entity\n@Table(name = ""TB_CONSELHO_CLASSE"")\n@Data\npublic class ConselhoClasse implements DomainEntityDefault {\n	@Id\n	@Column(name = ""CO_CONSELHO_CLASSE"")\n	private Long id;\n\n	@Column(name = ""SG_CONSELHO_CLASSE"")\n	private String sigla;\n\n	@Column(name = ""NO_CONSELHO_CLASSE"")\n	private String nome;\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.common.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_EMISSOR"")\npublic class Emissor {\n\n	private static final String SEQUENCE_NAME = ""SQ_EMISSOR_COSEQEMISSOR"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_EMISSOR"")\n	private Long id;\n\n	@Column(name = ""NU_CPF"")\n	private String cpf;\n\n	@Column(name = ""NO_EMISSOR"")\n	private String nome;\n\n	@JoinColumn(name = ""CO_CONSELHO_CLASSE"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private ConselhoClasse conselhoClasse;\n\n	@JoinColumn(name = ""CO_UF_CONSELHO_CLASSE"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Uf ufConselhoClasse;\n\n	@Column(name = ""NU_CONSELHO_CLASSE"")\n	private String numeroConselhoClasse;\n\n	@JoinColumn(name = ""CO_CBO"")\n	@ManyToOne(fetch = FetchType.LAZY)\n	private Cbo cbo;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.common.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_CBO"")\npublic class Cbo {\n	private static final String SEQUENCE_NAME = ""SQ_CBO_COSEQCBO"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_CBO"")\n	private Long id;\n\n	@Column(name = ""DS_CBO"")\n	private String descricao;\n\n	@Column(name = ""CO_CBO_2002"")\n	private String codigoCbo2002;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.common.enums;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefault;\n\n@RequiredArgsConstructor\n@Getter\npublic enum ConselhoClasseEnum implements DomainEntityDefault {\n	CRFA(1L, ""CONSELHO REGIONAL DE FONOAUDIOLOGIA""),\n	CREF(2L, ""CONSELHO REGIONAL DE EDUCAÇÃO FÍSICA""),\n	CRESS(3L, ""CONSELHO REGIONAL DE ASSISTÊNCIA SOCIAL""),\n	COREN(4L, ""CONSELHO REGIONAL DE ENFERMAGEM""),\n	CRF(5L, ""CONSELHO REGIONAL DE FARMÁCIA""),\n	CREFITO(6L, ""CONSELHO REGIONAL DE FISIOTERAPIA E TERAPIA OCUPACIONAL""),\n	CRM(7L, ""CONSELHO REGIONAL DE MEDICINA""),\n	CRMV(8L, ""CONSELHO REGIONAL DE MEDICINA VETERINÁRIA""),\n	CRN(9L, ""CONSELHO REGIONAL DE NUTRIÇÃO""),\n	CRO(10L, ""CONSELHO REGIONAL DE ODONTOLOGIA""),\n	CRP(11L, ""CONSELHO REGIONAL DE PSICOLOGIA"");\n\n	private final Long id;\n	private final String nome;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.common.mapper;\n\nimport org.mapstruct.Mapper;\n\nimport br.ufsc.bridge.pecassinador.common.data.DomainEntityDefaultMapper;\nimport br.ufsc.bridge.pecassinador.emissor.common.enums.ConselhoClasseEnum;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.ConselhoClasse;\n\n@Mapper(componentModel = ""spring"")\npublic class ConselhoClasseMapper extends DomainEntityDefaultMapper<ConselhoClasseEnum, ConselhoClasse> {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.v1.dto;\n\nimport lombok.Data;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@Data\npublic class V1EmissorDto {\n\n	@JsonProperty(access = JsonProperty.Access.READ_ONLY)\n	private Long id;\n\n	private String cpf;\n\n	private String nome;\n\n	private String siglaConselhoClasse;\n\n	private String numeroConselhoClasse;\n\n	private String ufEmissoraConselhoClasse;\n\n	private V1CboDto cbo;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.v1.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class V1CboDto {\n	private String descricao;\n	private String codigoCbo2002;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.dto;\n\npublic record PrescricaoEmitResponseDto(String urlAcessoPrescricao) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.validator;\n\nimport static br.ufsc.bridge.pecassinador.documento.latest.dto.MDocumentoTemporarioCreateDto.meta;\nimport static br.ufsc.bridge.platform.validation.rules.Rules.required;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.cidadao.latest.validator.CidadaoDtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.DtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.validator.EmissorDtoValidator;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.validator.ReceitaMedicamentoDtoValidator;\n\n@Component\n@RequiredArgsConstructor\npublic class PrescricaoValidator implements DtoValidator<DocumentoTemporarioCreateDto> {\n	private final EmissorDtoValidator emissorDtoValidator;\n\n	private final CidadaoDtoValidator cidadaoDtoValidator;\n\n	private final ReceitaMedicamentoDtoValidator receitaMedicamentoDtoValidator;\n\n	public Validator<DocumentoTemporarioCreateDto> validate(\n			DocumentoTemporarioCreateDto documentoTemporarioCreateDto\n	) {\n		val validator = Validator.of(documentoTemporarioCreateDto);\n\n		validator\n				.check(meta.prescritor(), required)\n				.check(meta.cidadao(), required)\n				.check(meta.dataInicioAtendimento, required);\n\n		if (validator.isValid()) {\n			validator.formError(\n					meta.prescritor(),\n					emissorDtoValidator.validate(documentoTemporarioCreateDto.getPrescritor())\n			);\n			validator.formError(\n					meta.cidadao(),\n					cidadaoDtoValidator.validate(documentoTemporarioCreateDto.getCidadao())\n			);\n		}\n\n		validator.forEach(meta.receituario, receitaMedicamentoDtoValidator::validate);\n\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.mapper;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.cidadao.latest.mapper.CidadaoMapper;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.repository.CidadaoRepository;\nimport br.ufsc.bridge.pecassinador.contaservico.repository.ContaServicoRepository;\nimport br.ufsc.bridge.pecassinador.documento.common.mapper.TipoDocumentoMapper;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.mapper.EmissorMapper;\nimport br.ufsc.bridge.pecassinador.emissor.latest.repository.EmissorRepository;\nimport br.ufsc.bridge.pecassinador.prescricao.common.dto.PrescricaoDto;\n\n@Mapper(\n		componentModel = ""spring"",\n		uses = {\n				EmissorMapper.class,\n				CidadaoMapper.class,\n				TipoDocumentoMapper.class\n		}\n)\n@RequiredArgsConstructor\npublic abstract class PrescricaoMapper {\n	@Autowired\n	private ContaServicoRepository contaServicoRepository;\n	@Autowired\n	private CidadaoRepository cidadaoRepository;\n	@Autowired\n	private EmissorRepository emissorRepository;\n\n	public abstract PrescricaoDto toDto(Documento documento);\n\n	@Mapping(target = ""id"", ignore = true)\n	@Mapping(target = ""codigoAcesso"", ignore = true)\n	@Mapping(target = ""dataAssinatura"", ignore = true)\n	@Mapping(target = ""dataEmissao"", ignore = true)\n	@Mapping(target = ""contaServico"", ignore = true)\n	@Mapping(target = ""arquivo"", ignore = true)\n	public abstract Documento toEntity(DocumentoTemporarioCreateDto dto);\n\n	@AfterMapping\n	void afterEntityMapping(\n			@MappingTarget Documento documento,\n			DocumentoTemporarioCreateDto dto\n	) {\n		documento.setContaServico(this.contaServicoRepository.getReferenceByNome(dto.getContaServicoName()));\n		documento.setCidadao(this.cidadaoRepository.getReferenceById(dto.getCidadao().getId()));\n		documento.setEmissor(this.emissorRepository.getReferenceById(dto.getPrescritor().getId()));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.controller;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.prescricao.latest.service.PrescricaoDownloadService;\n\n@RequestMapping(""/api/v1/prescricoes/{codigoAcesso}/download"")\n@RestController\n@RequiredArgsConstructor\npublic class PrescricaoDownloadController {\n	private final PrescricaoDownloadService prescricaoDownloadService;\n\n	@GetMapping\n	public ResponseEntity<ByteArrayResource> getPrescricao(\n			@PathVariable String codigoAcesso\n	) throws IOException {\n		return this.prescricaoDownloadService.download(codigoAcesso);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SERVICE;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.prescricao.latest.dto.PrescricaoEmitResponseDto;\nimport br.ufsc.bridge.pecassinador.prescricao.latest.service.PrescricaoEmitService;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\n@RequestMapping(""/api/v1/prescricoes/{codigoAcesso}/emitir"")\n@RestController\n@RequiredArgsConstructor\n@Secured(SERVICE)\npublic class PrescricaoEmitController {\n	private final PrescricaoEmitService prescricaoEmitService;\n\n	@PostMapping\n	public ResponseEntity<PrescricaoEmitResponseDto> emit(@PathVariable String codigoAcesso, SecuredContext securedContext) throws IOException {\n		val contaServicoId = (Long) securedContext.getAttributes().get(""id"");\n		return ResponseEntity.ok(this.prescricaoEmitService.emit(codigoAcesso, contaServicoId));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.QUALIFIED_SIGN;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.assinatura.service.DocumentoSignService;\nimport br.ufsc.bridge.pecassinador.documento.common.dto.DocumentoSignDto;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.servlet.http.HttpServletResponse;\n\n@RequestMapping(""/api/v1/prescricoes-controladas/{documentoId}/assinar"")\n@RestController\n@RequiredArgsConstructor\n@Secured(QUALIFIED_SIGN)\npublic class PrescricaoControladaSignController {\n	private final DocumentoSignService documentoSignService;\n\n	@GetMapping\n	public void signPrescricaoControlada(\n			@PathVariable Long documentoId,\n			@RequestParam String clientId,\n			@RequestParam String cpf,\n			SecuredContext securedContext,\n			HttpServletResponse response\n	) throws IOException {\n		val documentoSignRequestDto = new DocumentoSignDto(documentoId, securedContext.getCredentials());\n		val redirectUri = this.documentoSignService.sign(documentoSignRequestDto);\n\n		response.setStatus(HttpStatus.FOUND.value());\n		response.sendRedirect(redirectUri);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SIGN;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.assinatura.service.DocumentoSignService;\nimport br.ufsc.bridge.pecassinador.documento.common.dto.DocumentoSignDto;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.servlet.http.HttpServletResponse;\n\n@RequestMapping(""/api/v1/prescricoes/{documentoId}/assinar"")\n@RestController\n@RequiredArgsConstructor\n@Secured(SIGN)\npublic class PrescricaoSignController {\n	private final DocumentoSignService documentoSignService;\n\n	// clientId e cpf são capturados em outras partes do sistema (antes de entrar aqui). Não remover.\n	@GetMapping\n	public void signPrescricao(\n			@PathVariable Long documentoId,\n			@RequestParam String clientId,\n			@RequestParam String cpf,\n			SecuredContext securedContext,\n			HttpServletResponse response\n	) throws IOException {\n		val documentoSignRequestDto = new DocumentoSignDto(documentoId, securedContext.getCredentials());\n		val redirectUri = this.documentoSignService.sign(documentoSignRequestDto);\n\n		response.setStatus(HttpStatus.FOUND.value());\n		response.sendRedirect(redirectUri);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SERVICE;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.common.exception.AccessException;\nimport br.ufsc.bridge.pecassinador.prescricao.latest.service.PrescricaoDeleteService;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.persistence.EntityNotFoundException;\n\n@RestController\n@RequestMapping(""/api/v1/prescricoes/{codigoAcesso}"")\n@RequiredArgsConstructor\n@Secured(SERVICE)\npublic class PrescricaoDeleteController {\n\n	private final PrescricaoDeleteService service;\n\n	@DeleteMapping()\n	public ResponseEntity<Void> deletePrescricao(\n			@PathVariable String codigoAcesso,\n			SecuredContext securedContext\n	) throws EntityNotFoundException, AccessException {\n		this.service.delete(codigoAcesso, securedContext.getName());\n		return ResponseEntity.ok().build();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.controller;\n\nimport static br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum.PRESCRICAO_CONTROLADA;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SERVICE;\nimport static org.springframework.http.HttpStatus.CREATED;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestPart;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport br.ufsc.bridge.pecassinador.common.util.DocumentoUtils;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateResponseDto;\nimport br.ufsc.bridge.pecassinador.documento.latest.service.DocumentoTemporarioCreateService;\nimport br.ufsc.bridge.pecassinador.prescricao.latest.validator.PrescricaoValidator;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.validation.Valid;\n\n@RequestMapping(""/api/v1/prescricoes-controladas"")\n@RestController\n@RequiredArgsConstructor\n@Secured(SERVICE)\npublic class PrescricaoControladaCreateController {\n	private final DocumentoTemporarioCreateService documentoTemporarioCreateService;\n	private final PrescricaoValidator validator;\n\n	@PostMapping\n	public ResponseEntity<DocumentoTemporarioCreateResponseDto> createPrescricao(\n			@Valid @RequestPart(""prescricao-controlada"") DocumentoTemporarioCreateDto documentoTemporarioCreateDto,\n			@RequestPart MultipartFile pdf,\n			SecuredContext securedContext\n	) throws IOException {\n		validator.validate(documentoTemporarioCreateDto).throwIfInvalid();\n		DocumentoTemporarioCreateDto documentoTempCreateDto = DocumentoUtils.buildDocumentoTemporarioCreateDto(\n				documentoTemporarioCreateDto,\n				pdf,\n				securedContext,\n				PRESCRICAO_CONTROLADA\n		);\n\n		return ResponseEntity\n				.status(CREATED)\n				.body(this.documentoTemporarioCreateService.create(documentoTempCreateDto));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.controller;\n\nimport static br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum.PRESCRICAO_COMUM;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SERVICE;\nimport static org.springframework.http.HttpStatus.CREATED;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestPart;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport br.ufsc.bridge.pecassinador.common.util.DocumentoUtils;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateResponseDto;\nimport br.ufsc.bridge.pecassinador.documento.latest.service.DocumentoTemporarioCreateService;\nimport br.ufsc.bridge.pecassinador.prescricao.latest.validator.PrescricaoValidator;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.validation.Valid;\n\n@RequestMapping(""/api/v2/prescricoes"")\n@RestController\n@RequiredArgsConstructor\n@Secured(SERVICE)\npublic class PrescricaoCreateController {\n	private final DocumentoTemporarioCreateService documentoTemporarioCreateService;\n	private final PrescricaoValidator validator;\n\n	@PostMapping\n	public ResponseEntity<DocumentoTemporarioCreateResponseDto> createPrescricao(\n			@Valid @RequestPart(""prescricao"") DocumentoTemporarioCreateDto documentoTemporarioCreateDto,\n			@RequestPart MultipartFile pdf,\n			SecuredContext securedContext\n	) throws IOException {\n		validator.validate(documentoTemporarioCreateDto).throwIfInvalid();\n\n		DocumentoTemporarioCreateDto documentoTempCreateDto = DocumentoUtils.buildDocumentoTemporarioCreateDto(documentoTemporarioCreateDto, pdf, securedContext, PRESCRICAO_COMUM);\n		return ResponseEntity\n				.status(CREATED)\n				.body(this.documentoTemporarioCreateService.create(documentoTempCreateDto));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SERVICE;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.val;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.prescricao.latest.dto.PrescricaoEmitResponseDto;\nimport br.ufsc.bridge.pecassinador.prescricao.latest.service.PrescricaoEmitService;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\n@RequestMapping(""/api/v1/prescricoes-controladas/{codigoAcesso}/emitir"")\n@RestController\n@RequiredArgsConstructor\n@Secured(SERVICE)\npublic class PrescricaoControladaEmitController {\n	private final PrescricaoEmitService prescricaoEmitService;\n\n	@PostMapping\n	public ResponseEntity<PrescricaoEmitResponseDto> emit(@PathVariable String codigoAcesso, SecuredContext securedContext) {\n		val contaServicoId = (Long) securedContext.getAttributes().get(""id"");\n		return ResponseEntity.ok(this.prescricaoEmitService.emit(codigoAcesso, contaServicoId));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.common.dto;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.common.util.TypeScriptModel;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\n\n@Data\n@TypeScriptModel\npublic class PrescricaoDto {\n	private Long id;\n	private String codigoAcesso;\n	private LocalDateTime dataAssinatura;\n	private LocalDateTime dataEmissao;\n	private CidadaoDto cidadao;\n	private EmissorDto emissor;\n	private TipoDocumentoEnum tipoDocumento;\n	private LocalDate dataInicioAtendimento;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.common.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.prescricao.common.dto.PrescricaoDto;\nimport br.ufsc.bridge.pecassinador.prescricao.common.service.PrescricaoGetService;\n\n@RequestMapping(""/api/prescricoes/{codigoAcesso}"")\n@RestController\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class PrescricaoGetController {\n	private final PrescricaoGetService prescricaoGetService;\n\n	@GetMapping\n	public ResponseEntity<PrescricaoDto> getPrescricao(\n			@PathVariable String codigoAcesso\n	) {\n\n		return ResponseEntity.ok(this.prescricaoGetService.get(codigoAcesso));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.common.controller;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.prescricao.common.service.PrescricaoExistsService;\n\n@RequestMapping(""/api/prescricoes/{codigoAcesso}"")\n@RestController\n@RequiredArgsConstructor\npublic class PrescricaoExistsController {\n	private final PrescricaoExistsService prescricaoExistsService;\n\n	@GetMapping(""/exists"")\n	public ResponseEntity<Boolean> checkPrescricaoExists(\n			@PathVariable String codigoAcesso\n	) {\n		return ResponseEntity.ok(this.prescricaoExistsService.exists(codigoAcesso));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.common.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.assinatura.dto.SignatureValidateResponseDto;\nimport br.ufsc.bridge.pecassinador.assinatura.service.SignatureValidateService;\n\n@RestController\n@RequestMapping(""/api/prescricoes/{codigoAcesso}"")\n@RequiredArgsConstructor\n@Secured(GOVBR)\npublic class PrescricaoValidateController {\n	private final SignatureValidateService signatureValidateService;\n\n	@PostMapping(""/validate"")\n	public ResponseEntity<SignatureValidateResponseDto> validateAssinaturaPrescricao(\n			@PathVariable String codigoAcesso\n	) throws IOException {\n		return ResponseEntity.ok(this.signatureValidateService.validate(codigoAcesso));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.v1.dto;\n\npublic record V1PrescricaoEmitResponseDto(String urlAcessoPrescricao) {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.v1.controller;\n\nimport static br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum.PRESCRICAO_COMUM;\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.SERVICE;\nimport static org.springframework.http.HttpStatus.CREATED;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestPart;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport br.ufsc.bridge.pecassinador.common.util.DocumentoUtils;\nimport br.ufsc.bridge.pecassinador.documento.v1.dto.V1DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.documento.v1.dto.V1DocumentoTemporarioCreateResponseDto;\nimport br.ufsc.bridge.pecassinador.documento.v1.service.V1DocumentoTemporarioCreateService;\nimport br.ufsc.bridge.pecassinador.security.secured.SecuredContext;\n\nimport jakarta.validation.Valid;\n\n@RequestMapping(""/api/v1/prescricoes"")\n@RestController\n@RequiredArgsConstructor\n@Secured(SERVICE)\npublic class V1PrescricaoCreateController {\n	private final V1DocumentoTemporarioCreateService documentoTemporarioCreateService;\n\n	@PostMapping\n	public ResponseEntity<V1DocumentoTemporarioCreateResponseDto> createPrescricao(\n			@Valid @RequestPart(""prescricao"") V1DocumentoTemporarioCreateDto documentoTemporarioCreateDto,\n			@RequestPart MultipartFile pdf,\n			SecuredContext securedContext\n	) throws IOException {\n		V1DocumentoTemporarioCreateDto documentoTempCreateDto = DocumentoUtils.buildV1DocumentoTemporarioCreateDto(documentoTemporarioCreateDto, pdf, securedContext,\n				PRESCRICAO_COMUM);\n		return ResponseEntity\n				.status(CREATED)\n				.body(this.documentoTemporarioCreateService.create(documentoTempCreateDto));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.dto;\n\nimport lombok.Data;\n\n@Data\npublic class ContaServicoLoginRequestDto {\n	private String clientId;\n	private String secret;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.dto;\n\nimport lombok.Data;\n\n@Data\npublic class ContaServicoDto {\n	private Long id;\n	private String clientId;\n	private String clientSecret;\n	private String redirectUri;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.dto;\n\nimport lombok.Data;\n\n@Data\npublic class ContaServicoCreateRequestDto {\n	private String clientId;\n	private String redirectUri;\n	private String clientSecret;\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.model;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Data\n@Entity\n@Table(name = ""TB_CONTA_SERVICO"")\npublic class ContaServico {\n\n	private static final String SEQUENCE_NAME = ""SQ_CONTASERVICO_COSEQCONTASRVC"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = SEQUENCE_NAME)\n	@Column(name = ""CO_SEQ_CONTA_SERVICO"")\n	private Long id;\n\n	@Column(name = ""NO_CONTA_SERVICO"")\n	private String nome;\n\n	@Column(name = ""DS_SENHA"")\n	private String senha;\n\n	@Column(name = ""DS_REDIRECT_URI"")\n	private String redirectUri;\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.mapper;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.mapstruct.AfterMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoCreateRequestDto;\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoDto;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\n\n@Mapper(componentModel = ""spring"")\n@RequiredArgsConstructor\npublic abstract class ContaServicoMapper {\n	@Autowired\n	private PasswordEncoder passwordEncoder;\n\n	@Mapping(target = ""nome"", source = ""clientId"")\n	@Mapping(target = ""senha"", ignore = true)\n	@Mapping(target = ""id"", ignore = true)\n	public abstract ContaServico toEntity(ContaServicoCreateRequestDto dto);\n\n	@Mapping(target = ""clientId"", source = ""nome"")\n	@Mapping(target = ""clientSecret"", ignore = true)\n	public abstract ContaServicoDto toDto(ContaServico contaServico);\n\n	@AfterMapping\n	void afterEntityMapping(\n			@MappingTarget ContaServico contaServico,\n			ContaServicoCreateRequestDto dto\n	) {\n		contaServico.setSenha(this.passwordEncoder.encode(dto.getClientSecret()));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.controller;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.common.exception.AuthorizationException;\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoLoginRequestDto;\nimport br.ufsc.bridge.pecassinador.security.contaservico.ContaServicoLoginService;\n\nimport jakarta.servlet.http.HttpServletResponse;\n\n@RestController\n@RequestMapping(""/api/v1/contas-servico/authorize"")\n@RequiredArgsConstructor\npublic class ContaServicoAuthorizeController {\n	private final ContaServicoLoginService contaServicoLoginService;\n\n	@PostMapping\n	public ResponseEntity<Void> authorize(@RequestBody ContaServicoLoginRequestDto contaServicoLoginRequestDto, HttpServletResponse response) throws Exception {\n		try {\n			this.contaServicoLoginService.login(contaServicoLoginRequestDto, response);\n		} catch (BadCredentialsException ex) {\n			throw new AuthorizationException();\n		}\n\n		return ResponseEntity.ok().build();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.controller;\n\nimport java.io.IOException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.contaservico.service.ContaServicoCallbackService;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@RestController\n@RequestMapping(""/api/v1/contas-servico/callback"")\n@RequiredArgsConstructor\npublic class ContaServicoCallbackController {\n	private final ContaServicoCallbackService contaServicoCallbackService;\n\n	@GetMapping\n	public void callback(HttpServletRequest request, HttpServletResponse response) throws IOException {\n		this.contaServicoCallbackService.callback(request, response);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.ADMIN;\n\nimport java.security.NoSuchAlgorithmException;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoCreateRequestDto;\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoDto;\nimport br.ufsc.bridge.pecassinador.contaservico.service.ContaServicoCreateService;\n\n@RequiredArgsConstructor\n@RestController\n@RequestMapping(""/api/v1/contas-servico"")\n@Secured(ADMIN)\npublic class ContaServicoCreateController {\n	private final ContaServicoCreateService contaServicoCreateService;\n\n	@PostMapping\n	public ResponseEntity<ContaServicoDto> createContaServico(@RequestBody ContaServicoCreateRequestDto requestDto) throws NoSuchAlgorithmException {\n		return ResponseEntity.ok(this.contaServicoCreateService.create(requestDto));\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\n\n@Repository\npublic interface ContaServicoRepository extends JpaRepository<ContaServico, Long> {\n	Optional<ContaServico> findByNome(String nome);\n\n	@Query(""select conta.redirectUri from ContaServico conta where conta.nome = :nome"")\n	Optional<String> getRedirectUriByNome(@Param(""nome"") String nome);\n\n	@Query(""select conta.redirectUri from ContaServico conta where conta.id = :id"")\n	Optional<String> getRedirectUriById(@Param(""id"") Long id);\n\n	ContaServico getReferenceByNome(String nome);\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.sandbox.dto;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class SandboxCreateDto {\n\n	private final String cpf;\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.sandbox.validator;\n\nimport static br.ufsc.bridge.pecassinador.sandbox.dto.MSandboxCreateDto.meta;\n\nimport java.time.LocalDateTime;\n\nimport lombok.val;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.sandbox.dto.SandboxCreateDto;\nimport br.ufsc.bridge.platform.validation.rules.Rules;\n\n@Component\npublic class SandboxValidator {\n\n	public Validator<SandboxCreateDto> validate(SandboxCreateDto input) {\n		val validator = Validator.of(input);\n		if (LocalDateTime.now().getMinute() % 2 == 0) {\n			validator.error(""mensagem de erro geral"");\n		} else {\n			validator.check(meta.cpf, Rules.cpf);\n		}\n		return validator;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.sandbox.controller;\n\nimport static br.ufsc.bridge.pecassinador.security.secured.SecuredScope.GOVBR;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.pecassinador.sandbox.dto.SandboxCreateDto;\nimport br.ufsc.bridge.pecassinador.sandbox.validator.SandboxValidator;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(""/api/sandbox/validate"")\n@Secured(GOVBR)\npublic class SandboxValidateController {\n\n	private final SandboxValidator validator;\n\n	@PostMapping\n	public ResponseEntity<Void> validate() {\n		SandboxCreateDto input = new SandboxCreateDto(""cpfInvalido"");\n		validator.validate(input).throwIfInvalid();\n		return ResponseEntity.ok().build();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.arquivo.model;\n\nimport java.time.LocalDateTime;\n\nimport lombok.Data;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.SequenceGenerator;\nimport jakarta.persistence.Table;\n\n@Entity\n@Table(name = ""TB_ARQUIVO"")\n@Data\npublic class Arquivo {\n	private static final String SEQUENCE_NAME = ""SQ_ARQUIVO_COSEQARQUIVO"";\n\n	@Id\n	@SequenceGenerator(allocationSize = 1, sequenceName = SEQUENCE_NAME, name = SEQUENCE_NAME)\n	@GeneratedValue(generator = SEQUENCE_NAME, strategy = GenerationType.SEQUENCE)\n	@Column(name = ""CO_SEQ_ARQUIVO"")\n	private Long id;\n\n	@Column(name = ""NO_ARQUIVO"")\n	private String nome;\n\n	@Column(name = ""NU_TAMANHO"")\n	private Long tamanho;\n\n	@Column(name = ""CO_HASH"")\n	private String hash;\n\n	@Column(name = ""DT_CRIACAO"")\n	private LocalDateTime dataCriacao = LocalDateTime.now();\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.arquivo.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport br.ufsc.bridge.pecassinador.arquivo.model.Arquivo;\n\n@Repository\npublic interface ArquivoRepository extends JpaRepository<Arquivo, Long> {\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.pecassinador.localidade.database.MunicipioDtoFactory;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport br.ufsc.bridge.pecassinador.localidade.latest.validator.MunicipioDtoValidator;\n\npublic class MunicipioDtoValidatorTest {\n	private final MunicipioDtoFactory factory = MunicipioDtoFactory.getInstance();\n	private MunicipioDtoValidator validator;\n\n	private static Stream<Arguments> provideInputsForNullCheckTest() {\n		MunicipioDtoFactory localFactory = MunicipioDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.nome.set(null);}), ""nome""),\n				Arguments.of(localFactory.create(spec -> {spec.uf.set(null);}), ""uf"")\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.validator = new MunicipioDtoValidator();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		MunicipioDto input = factory.createRandom();\n\n		Validator<MunicipioDto> formError = validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForNullCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testNullCheckForRequiredFields(MunicipioDto input, String errorField) {\n		Validator<MunicipioDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.enums;\n\nimport static java.util.stream.Collectors.toMap;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\n@Getter\n@AllArgsConstructor\npublic enum UfRefEnum implements Ref<Uf> {\n	AC(1L, ""Acre"", ""AC""),\n	AL(2L, ""Alagoas"", ""AL""),\n	AM(3L, ""Amazonas"", ""AM""),\n	AP(4L, ""Amapá"", ""AP""),\n	BA(5L, ""Bahia"", ""BA""),\n	CE(6L, ""Ceará"", ""CE""),\n	DF(7L, ""Distrito Federal"", ""DF""),\n	ES(8L, ""Espírito Santo"", ""ES""),\n	GO(9L, ""Goiás"", ""GO""),\n	MA(10L, ""Maranhão"", ""MA""),\n	MG(11L, ""Minas Gerais"", ""MG""),\n	MS(12L, ""Mato Grosso do Sul"", ""MS""),\n	MT(13L, ""Mato Grosso"", ""MT""),\n	PA(14L, ""Pará"", ""PA""),\n	PB(15L, ""Paraíba"", ""PB""),\n	PE(16L, ""Pernambuco"", ""PE""),\n	PI(17L, ""Piauí"", ""PI""),\n	PR(18L, ""Paraná"", ""PR""),\n	RJ(19L, ""Rio de Janeiro"", ""RJ""),\n	RN(20L, ""Rio Grande do Norte"", ""RN""),\n	RO(21L, ""Rondônia"", ""RO""),\n	RR(22L, ""Roraima"", ""RR""),\n	RS(23L, ""Rio Grande do Sul"", ""RS""),\n	SC(24L, ""Santa Catarina"", ""SC""),\n	SE(25L, ""Sergipe"", ""SE""),\n	SP(26L, ""São Paulo"", ""SP""),\n	TO(27L, ""Tocantins"", ""TO"");\n\n	private static final Map<Long, UfRefEnum> map = Arrays\n			.stream(UfRefEnum.values())\n			.collect(toMap(UfRefEnum::getId, Function.identity()));\n\n	private final Long id;\n	private final String nome;\n	private final String sigla;\n\n	public static UfRefEnum getById(Long id) {\n		return map.get(id);\n	}\n\n	@Override\n	public Class<Uf> getClazz() {\n		return Uf.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Pais;\n\n@Getter\n@AllArgsConstructor\npublic enum PaisRefEnum implements Ref<Pais> {\n	AFGANISTAO(1L, ""AFEGANISTÃO""),\n	AFRICA_DO_SUL(2L, ""ÁFRICA DO SUL""),\n	ALBANIA(3L, ""ALBÂNIA""),\n	ANTARCTICA(8L, ""ANTÁRCTICA""),\n	ANTIGUA_E_BARBUDA(9L, ""ANTIGUA E BARBUDA""),\n	ARABIA_SAUDITA(11L, ""ARÁBIA SAUDITA""),\n	ARGELIA(12L, ""ARGÉLIA""),\n	ARMENIA(14L, ""ARMÊNIA""),\n	ARUBA(15L, ""ARUBA""),\n	AUSTRALIA(16L, ""AUSTRÁLIA""),\n	AUSTRIA(17L, ""ÁUSTRIA""),\n	AZERBAIJAO(18L, ""AZERBAIJÃO""),\n	BAHAMAS(19L, ""BAHAMAS""),\n	BANGLADESH(20L, ""BANGLADESH""),\n	BARBADOS(21L, ""BARBADOS""),\n	BAREIN(22L, ""BAREIN""),\n	BELARUS(23L, ""BELARUS""),\n	BELGICA(24L, ""BÉLGICA""),\n	BELIZE(25L, ""BELIZE""),\n	BENIN(26L, ""BENIN""),\n	BERMUDA(27L, ""BERMUDA""),\n	BOLIVIA(28L, ""BOLÍVIA""),\n	BOSNIA_E_HERZEGOVINA(29L, ""BÓSNIA E HERZEGÓVINA""),\n	BOTSWANA(30L, ""BOTSWANA""),\n	BRASIL(31L, ""BRASIL"");\n\n	private final Long id;\n	private final String nome;\n\n	@Override\n	public Class<Pais> getClazz() {\n		return Pais.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\n\n@Getter\n@AllArgsConstructor\npublic enum MunicipioRefEnum implements Ref<Municipio> {\n	RIO_BRANCO_AC(35L, ""RIO BRANCO"", ""RIO BRANCO"", ""1200401"", null, 1L),\n	MACEIO_AL(139L, ""MACEIÓ"", ""MACEIO"", ""2704302"", null, 2L),\n	MANAUS_AM(305L, ""MANAUS"", ""MANAUS"", ""1302603"", null, 3L),\n	MACAPA_AP(383L, ""MACAPÁ"", ""MACAPA"", ""1600303"", null, 4L),\n	SALVADOR_BA(1088L, ""SALVADOR"", ""SALVADOR"", ""2927408"", null, 5L),\n	FORTALEZA_CE(1486L, ""FORTALEZA"", ""FORTALEZA"", ""2304400"", null, 6L),\n	VITORIA_ES(2222L, ""VITÓRIA"", ""VITORIA"", ""3205309"", null, 8L),\n	BRASILIA_DF(1964L, ""BRASÍLIA"", ""BRASILIA"", ""5300108"", null, 7L),\n	BOM_JESUS_GO(2266L, ""BOM JESUS"", ""BOM JESUS"", ""5203500"", ""75570000"", 9L),\n	GOIANIA_GO(2356L, ""GOIÂNIA"", ""GOIANIA"", ""5208707"", null, 9L),\n	SAO_LUIS_MA(2781L, ""SÃO LUÍS"", ""SAO LUIS"", ""2111300"", null, 10L),\n	BELO_HORIZONTE_MG(2950L, ""BELO HORIZONTE"", ""BELO HORIZONTE"", ""3106200"", null, 11L),\n	CAMPO_GRANDE_MS(4366L, ""CAMPO GRANDE"", ""CAMPO GRANDE"", ""5002704"", null, 12L),\n	CUIABA_MT(4580L, ""CUIABÁ"", ""CUIABA"", ""5103403"", null, 13L),\n	BELEM_PA(4818L, ""BELÉM"", ""BELEM"", ""1501402"", null, 14L),\n	BOM_JESUS_PB(5142L, ""BOM JESUS"", ""BOM  JESUS"", ""2502201"", ""58930000"", 15L),\n	JOAO_PESSOA_PB(5224L, ""JOÃO PESSOA"", ""JOAO PESSOA"", ""2507507"", null, 15L),\n	RECIFE_PE(5727L, ""RECIFE"", ""RECIFE"", ""2611606"", null, 16L),\n	TERESINA_PI(6074L, ""TERESINA"", ""TERESINA"", ""2211001"", null, 17L),\n	CURITIBA_PR(6371L, ""CURITIBA"", ""CURITIBA"", ""4106902"", null, 18L),\n	RIO_DE_JANEIRO_RJ(7401L, ""RIO DE JANEIRO"", ""RIO DE JANEIRO"", ""3304557"", null, 19L),\n	NATAL_RN(7580L, ""NATAL"", ""NATAL"", ""2408102"", null, 20L),\n	PORTO_VELHO_RO(7727L, ""PORTO VELHO"", ""PORTO VELHO"", ""1100205"", null, 21L),\n	BOA_VISTA_RR(7754L, ""BOA VISTA"", ""BOA VISTA"", ""1400100"", null, 22L),\n	PORTO_ALEGRE_RS(8390L, ""PORTO ALEGRE"", ""PORTO ALEGRE"", ""4314902"", null, 23L),\n	FLORIANOPOLIS_SC(8866L, ""FLORIANÓPOLIS"", ""FLORIANOPOLIS"", ""4205407"", null, 24L),\n	ARACAJU_SE(9183L, ""ARACAJU"", ""ARACAJU"", ""2800308"", null, 25L),\n	SAO_PAULO_SP(10082L, ""SÃO PAULO"", ""SAO PAULO"", ""3550308"", null, 26L),\n	PALMAS_TO(10311L, ""PALMAS"", ""PALMAS"", ""1721000"", null, 27L);\n\n	private final Long id;\n	private final String nome;\n	private final String nomeFiltro;\n	private final String codigoIbge;\n	private final String numeroCep;\n	private final Long ufId;\n\n	@Override\n	public Class<Municipio> getClazz() {\n		return Municipio.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.database;\n\nimport static br.ufsc.bridge.pecassinador.localidade.database.MunicipioDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.localidade.enums.MunicipioRefEnum;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class MunicipioDtoFactory extends DataFactory<MunicipioDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final MunicipioDtoFactory instance = new MunicipioDtoFactory();\n\n	@Override\n	protected MunicipioDto create(Spec spec) {\n		MunicipioDto dto = new MunicipioDto();\n\n		dto.setNome(spec.nome.get());\n		dto.setUf(spec.uf.get());\n		dto.setCodigoIbge(spec.codigoIbge.get());\n		dto.setNumeroCep(spec.numeroCep.get());\n\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		MunicipioRefEnum ref = this.faker.options().option(MunicipioRefEnum.class);\n		spec.nome.setDefault(ref::getNome);\n		spec.uf.setDefault(() -> UfEnum.getById(ref.getUfId()));\n		spec.codigoIbge.setDefault(ref::getCodigoIbge);\n		spec.numeroCep.setDefault(ref::getNumeroCep);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<UfEnum> uf = new SpecValue<>();\n		public final SpecValue<String> codigoIbge = new SpecValue<>();\n		public final SpecValue<String> numeroCep = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.localidade.enums.UfRefEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class UfFactory extends DomainFactory<Uf, UfRefEnum> {\n\n	@Getter(lazy = true)\n	private static final UfFactory instance = new UfFactory();\n\n	@Autowired\n	public UfFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected UfRefEnum[] getAllRefs() {\n		return UfRefEnum.values();\n	}\n\n	@Override\n	protected Uf createInMemory(UfRefEnum ref) {\n		Uf uf = new Uf();\n\n		uf.setId(ref.getId());\n		uf.setSigla(ref.getSigla());\n		uf.setNome(ref.getNome());\n\n		return uf;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.localidade.enums.PaisRefEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Pais;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class PaisFactory extends DomainFactory<Pais, PaisRefEnum> {\n\n	@Getter(lazy = true)\n	private static final PaisFactory instance = new PaisFactory();\n\n	@Autowired\n	public PaisFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected PaisRefEnum[] getAllRefs() {\n		return PaisRefEnum.values();\n	}\n\n	@Override\n	protected Pais createInMemory(PaisRefEnum ref) {\n		Pais pais = new Pais();\n\n		pais.setId(ref.getId());\n		pais.setNome(ref.getNome());\n\n		return pais;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\nimport br.ufsc.bridge.pecassinador.localidade.enums.MunicipioRefEnum;\nimport br.ufsc.bridge.pecassinador.localidade.enums.UfRefEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class MunicipioFactory extends DomainFactory<Municipio, MunicipioRefEnum> {\n\n	private final UfFactory ufFactory = UfFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final MunicipioFactory instance = new MunicipioFactory();\n\n	@Autowired\n	public MunicipioFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected MunicipioRefEnum[] getAllRefs() {\n		return MunicipioRefEnum.values();\n	}\n\n	@Override\n	protected Municipio createInMemory(MunicipioRefEnum ref) {\n		Municipio municipio = new Municipio();\n\n		municipio.setId(ref.getId());\n		municipio.setNome(ref.getNome());\n		municipio.setNomeFiltro(ref.getNomeFiltro());\n		municipio.setCodigoIbge(ref.getCodigoIbge());\n		municipio.setNumeroCep(ref.getNumeroCep());\n		municipio.setUf(this.ufFactory.create(UfRefEnum.getById(ref.getUfId())));\n\n		return municipio;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.repository;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.assertj.core.groups.Tuple;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.localidade.database.MunicipioFactory;\nimport br.ufsc.bridge.pecassinador.localidade.enums.MunicipioRefEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.MunicipioRepository;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class MunicipioRepositoryDatabaseTest {\n	@Autowired\n	private MunicipioRepository municipioRepository;\n\n	@Autowired\n	private MunicipioFactory municipioFactory;\n\n	@Test\n	@DisplayName(""Deve retornar o município por nome e identificador da UF corretamente"")\n	public void testFindMunicipioByNomeAndUfId() {\n		Municipio municipio = this.municipioFactory.createRandom();\n\n		Optional<Municipio> municipioOpt = this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(municipio.getNome(), municipio.getUf().getId());\n\n		assertThat(municipioOpt.isPresent()).isTrue();\n		assertThat(municipioOpt.get().getNome()).isEqualTo(municipio.getNome());\n		assertThat(municipioOpt.get().getUf().getId()).isEqualTo(municipio.getUf().getId());\n		assertThat(municipioOpt.get().getCodigoIbge()).isEqualTo(municipio.getCodigoIbge());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando município não existe"")\n	public void testFindMunicipioWithInvalidName() {\n		String nomeMunicipio = ""PORTO DOS MILAGRES"";\n		Long ufId = 5L;        // 5: Bahia\n\n		Optional<Municipio> municipioOpt = this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(nomeMunicipio, ufId);\n\n		assertThat(municipioOpt.isEmpty()).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve diferenciar municípios de mesmo nome"")\n	public void testFindMunicipioWithDuplicateName() {\n		Municipio municipioA = this.municipioFactory.create(MunicipioRefEnum.BOM_JESUS_GO);\n		Municipio municipioB = this.municipioFactory.create(MunicipioRefEnum.BOM_JESUS_PB);\n\n		Optional<Municipio> municipioOptA = this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(municipioA.getNome(), municipioA.getUf().getId());\n		Optional<Municipio> municipioOptB = this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(municipioB.getNome(), municipioB.getUf().getId());\n\n		assertThat(municipioOptA.isPresent()).isTrue();\n		assertThat(municipioOptB.isPresent()).isTrue();\n\n		assertThat(municipioOptA.get().getId()).isNotEqualTo(municipioOptB.get().getId());\n		assertThat(municipioOptA.get().getCodigoIbge()).isEqualTo(municipioA.getCodigoIbge());\n		assertThat(municipioOptB.get().getCodigoIbge()).isEqualTo(municipioB.getCodigoIbge());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar município independentemente do nome estar em letras maiúsculas ou minúsculas"")\n	public void testFindMunicipioCaseInsensitive() {\n		Municipio municipio = this.municipioFactory.createRandom();\n\n		Optional<Municipio> dbRefOptA = this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(municipio.getNome().toUpperCase(), municipio.getUf().getId());\n		Optional<Municipio> dbRefOptB = this.municipioRepository.findByNomeIgnoreCaseAndUf_Id(municipio.getNome().toLowerCase(), municipio.getUf().getId());\n\n		assertThat(dbRefOptA.isPresent()).isTrue();\n		assertThat(dbRefOptB.isPresent()).isTrue();\n\n		assertThat(dbRefOptA.get().getId()).isEqualTo(dbRefOptB.get().getId());\n		assertThat(dbRefOptA.get().getCodigoIbge()).isEqualTo(municipio.getCodigoIbge());\n		assertThat(dbRefOptB.get().getCodigoIbge()).isEqualTo(municipio.getCodigoIbge());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar no máximo 10 municípios"")\n	public void testFindTop10ByUfIdAndNome() {\n		List<Municipio> municipios = this.municipioRepository.findTop10ByUfIdAndNomeFiltroStartingWithIgnoreCaseOrderByNome(26L, """");\n\n		assertThat(municipios).doesNotContainNull();\n		assertThat(municipios).hasSize(10);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar municípios ordenados alfabeticamente"")\n	public void testFindTop10ByUfIdAndNomeOrdered() {\n		List<Municipio> municipios = this.municipioRepository.findTop10ByUfIdAndNomeFiltroStartingWithIgnoreCaseOrderByNome(26L, """");\n\n		assertThat(municipios)\n				.usingElementComparator(Comparator.comparing(Municipio::getNome))\n				.isSorted();\n	}\n\n	@Test\n	@DisplayName(""Deve encontrar municípios pelo nome com filtro parcial"")\n	public void testFindTop10ByUfIdAndNomeFiltroParcial() {\n		Long ufMunicipio = 26L;\n		Long idMunicipio = 10054L;\n		String filtroMunicipio = ""SAO BERNARDO"";\n		String nomeMunicipio = ""SÃO BERNARDO DO CAMPO"";\n\n		List<Municipio> municipios = this.municipioRepository.findTop10ByUfIdAndNomeFiltroStartingWithIgnoreCaseOrderByNome(\n				ufMunicipio,\n				filtroMunicipio\n		);\n\n		assertThat(municipios).isNotEmpty();\n		assertThat(municipios)\n				.extracting(Municipio::getNome, Municipio::getId)\n				.containsExactlyInAnyOrder(Tuple.tuple(nomeMunicipio, idMunicipio));\n	}\n\n	@Test\n	@DisplayName(""Deve filtrar municípios independentemente do nome estar em letras maiúsculas ou minúsculas"")\n	public void testFindTop10ByUfIdAndNomeIgnoreCase() {\n		String filtroMunicipio = ""FlOrIaNoPoLiS"";\n		String nomeMunicipio = ""FLORIANÓPOLIS"";\n		Long ufMunicipio = 24L;\n		Long idMunicipio = 8866L;\n\n		List<Municipio> municipios = this.municipioRepository.findTop10ByUfIdAndNomeFiltroStartingWithIgnoreCaseOrderByNome(\n				ufMunicipio,\n				filtroMunicipio\n		);\n\n		assertThat(municipios).isNotEmpty();\n		assertThat(municipios)\n				.extracting(Municipio::getNome, Municipio::getId)\n				.containsExactlyInAnyOrder(Tuple.tuple(nomeMunicipio, idMunicipio));\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar municípios caso o filtro não tenha sido normalizado"")\n	public void testFindTop10ByUfIdAndNomeNonNormalized() {\n		String filtroMunicipio = ""Florianópolis"";\n		Long ufMunicipio = 24L;\n\n		List<Municipio> municipios = this.municipioRepository.findTop10ByUfIdAndNomeFiltroStartingWithIgnoreCaseOrderByNome(\n				ufMunicipio,\n				filtroMunicipio\n		);\n\n		assertThat(municipios).isEmpty();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.repository;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.localidade.database.PaisFactory;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Pais;\nimport br.ufsc.bridge.pecassinador.localidade.common.repository.PaisRepository;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\nclass PaisRepositoryDatabaseTest {\n	@Autowired\n	private PaisRepository paisRepository;\n\n	@Autowired\n	private PaisFactory paisFactory;\n\n	@Test\n	@DisplayName(""Deve retornar o país por nome corretamente"")\n	public void testFindMunicipioByNomeAndUfId() {\n		Pais pais = this.paisFactory.createRandom();\n\n		Optional<Pais> paisOpt = this.paisRepository.findByNome(pais.getNome());\n\n		assertThat(paisOpt.isPresent()).isTrue();\n		assertThat(paisOpt.get().getNome()).isEqualTo(pais.getNome());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando país não existe"")\n	public void testFindPaisWithInvalidName() {\n		String nomePais = ""UNTERZOEGERSDORF SOVIÉTICO"";\n\n		Optional<Pais> paisOpt = this.paisRepository.findByNome(nomePais);\n\n		assertThat(paisOpt.isEmpty()).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar país independentemente do nome estar em letras maiúsculas ou minúsculas"")\n	public void testFindPaisCaseInsensitive() {\n		Pais pais = this.paisFactory.createRandom();\n\n		Optional<Pais> dbRefOptA = this.paisRepository.findByNome(pais.getNome().toUpperCase());\n		Optional<Pais> dbRefOptB = this.paisRepository.findByNome(pais.getNome().toLowerCase());\n\n		assertThat(dbRefOptA.isPresent()).isTrue();\n		assertThat(dbRefOptB.isPresent()).isTrue();\n\n		assertThat(dbRefOptA.get().getId()).isEqualTo(dbRefOptB.get().getId());\n		assertThat(dbRefOptA.get().getNome()).isEqualTo(pais.getNome());\n		assertThat(dbRefOptB.get().getNome()).isEqualTo(pais.getNome());\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.cidadao.database.CidadaoDtoFactory;\nimport br.ufsc.bridge.pecassinador.localidade.enums.PaisRefEnum;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.validator.CidadaoDtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport br.ufsc.bridge.pecassinador.localidade.latest.validator.MunicipioDtoValidator;\n\npublic class CidadaoDtoValidatorTest {\n	private final CidadaoDtoFactory factory = CidadaoDtoFactory.getInstance();\n	private final BridgeFaker faker = new BridgeFaker();\n	private CidadaoDtoValidator validator;\n	private MunicipioDtoValidator municipioDtoValidator;\n\n	private static Stream<Arguments> provideInputsForValidatorRuleCheckTest() {\n		CidadaoDtoFactory localFactory = CidadaoDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.nome.set(null);}), ""nome""),\n				Arguments.of(localFactory.create(spec -> {spec.dataNascimento.set(null);}), ""dataNascimento""),\n				Arguments.of(localFactory.create(spec -> {spec.sexo.set(null);}), ""sexo""),\n				Arguments.of(localFactory.create(spec -> {\n					spec.paisNascimento.set(""BRASIL"");\n					spec.municipioNascimento.set(null);\n				}), ""municipioNascimento"")\n\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.municipioDtoValidator = mock(MunicipioDtoValidator.class);\n\n		this.validator = new CidadaoDtoValidator(\n				this.municipioDtoValidator\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		CidadaoDto input = this.factory.create(spec -> spec.paisNascimento.set(PaisRefEnum.BRASIL.getNome()));\n\n		when(municipioDtoValidator.validate(input.getMunicipioNascimento())).thenReturn(Validator.of(input.getMunicipioNascimento()));\n\n		Validator<CidadaoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(municipioDtoValidator).validate(input.getMunicipioNascimento());\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForValidatorRuleCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber null em campo obrigatório"")\n	public void testNullChecks(CidadaoDto input, String errorField) {\n		Validator<CidadaoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n		verifyNoInteractions(municipioDtoValidator);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com CPF inválido"")\n	public void testInvalidCpf() {\n		CidadaoDto input = this.factory.create(spec -> {spec.cpf.set(""00000000000"");});\n\n		Validator<CidadaoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{cpf=CPF inválido}"");\n		verifyNoInteractions(municipioDtoValidator);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com CNS inválido"")\n	public void testInvalidCns() {\n		CidadaoDto input = this.factory.create(spec -> {spec.cns.set(""000000000000000"");});\n\n		Validator<CidadaoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{cns=Campo inválido}"");\n		verifyNoInteractions(municipioDtoValidator);\n	}\n\n	@ParameterizedTest\n	@ValueSource(strings = { ""BRASIL"", ""brasil"", ""Brasil"", ""bRaSiL"" })\n	@DisplayName(""Deve chamar o validador de município caso o campo municipioNascimento esteja preenchido e o país seja Brasil"")\n	public void testCallAggregateValidators(String paisNascimento) {\n		CidadaoDto input = this.factory.create(spec -> {spec.paisNascimento.set(paisNascimento);});\n\n		when(municipioDtoValidator.validate(input.getMunicipioNascimento())).thenReturn(Validator.of(input.getMunicipioNascimento()));\n\n		Validator<CidadaoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(municipioDtoValidator).validate(input.getMunicipioNascimento());\n	}\n\n	@Test\n	@DisplayName(""Deve desconsiderar o municipioNascimento caso o país não seja Brasil"")\n	public void testIgnoreMunicipio() {\n		String paisNotBrasil;\n		do {\n			paisNotBrasil = this.faker.options().option(PaisRefEnum.class).getNome();\n		} while (paisNotBrasil.equalsIgnoreCase(PaisRefEnum.BRASIL.getNome()));\n		String finalPaisNotBrasil = paisNotBrasil;\n\n		CidadaoDto input = this.factory.create(spec -> {\n			spec.municipioNascimento.set(null);\n			spec.paisNascimento.set(finalPaisNotBrasil);\n		});\n\n		Validator<CidadaoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verifyNoInteractions(municipioDtoValidator);\n	}\n\n	@Test\n	@DisplayName(""Deve incluir erros retornados pelos validadores auxiliares no resultado"")\n	public void testWriteAggregateValidatorErrors() {\n		CidadaoDto input = this.factory.create(spec -> {\n			spec.paisNascimento.set(PaisRefEnum.BRASIL.getNome());\n		});\n		Validator<MunicipioDto> municipioErrors = Validator.of(input.getMunicipioNascimento());\n		municipioErrors.error(""{nome=Preenchimento obrigatório}"");\n		when(municipioDtoValidator.validate(input.getMunicipioNascimento())).thenReturn(municipioErrors);\n\n		Validator<CidadaoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{municipioNascimento={nome=Preenchimento obrigatório}}"");\n		verify(municipioDtoValidator).validate(input.getMunicipioNascimento());\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.database;\n\nimport static br.ufsc.bridge.pecassinador.cidadao.database.CidadaoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Cidadao;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class CidadaoFactory extends DataFactory<Cidadao, Spec> {\n\n	@Getter(lazy = true)\n	private static final CidadaoFactory instance = new CidadaoFactory();\n\n	@Autowired\n	public CidadaoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Cidadao create(Spec spec) {\n		Cidadao cidadao = new Cidadao();\n\n		cidadao.setCpf(spec.cpf.get());\n		cidadao.setNome(spec.nome.get());\n\n		return cidadao;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.cpf.setDefault(this.faker::cpf);\n		spec.nome.setDefault(this.faker.name()::fullName);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> cpf = new SpecValue<>();\n		public SpecValue<String> nome = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.database;\n\nimport static br.ufsc.bridge.pecassinador.cidadao.database.CidadaoDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDate;\nimport java.util.concurrent.TimeUnit;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.localidade.database.MunicipioDtoFactory;\nimport br.ufsc.bridge.pecassinador.localidade.enums.PaisRefEnum;\nimport br.ufsc.bridge.pecassinador.cidadao.common.enums.SexoEnum;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.common.util.DateUtils;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class CidadaoDtoFactory extends DataFactory<CidadaoDto, Spec> {\n\n	private final MunicipioDtoFactory municipioDtoFactory = MunicipioDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final CidadaoDtoFactory instance = new CidadaoDtoFactory();\n\n	@Autowired\n	public CidadaoDtoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected CidadaoDto create(Spec spec) {\n		CidadaoDto dto = new CidadaoDto();\n		dto.setId(spec.id.get());\n		dto.setCpf(spec.cpf.get());\n		dto.setCns(spec.cns.get());\n		dto.setNome(spec.nome.get());\n		dto.setNomeSocial(spec.nomeSocial.get());\n		dto.setNomeMae(spec.nomeMae.get());\n		dto.setDataNascimento(spec.dataNascimento.get());\n		dto.setSexo(spec.sexo.get());\n		dto.setPaisNascimento(spec.paisNascimento.get());\n		dto.setMunicipioNascimento(spec.municipioNascimento.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		PaisRefEnum paisRef = this.faker.options().option(PaisRefEnum.class);\n		spec.id.setDefault(faker.number()::randomNumber);\n		spec.cpf.setDefault(faker::cpf);\n		spec.cns.setDefault(faker::cns);\n		spec.nome.setDefault(faker.lorem()::word);\n		spec.nomeSocial.setDefault(faker.lorem()::word);\n		spec.nomeMae.setDefault(faker.lorem()::word);\n		spec.dataNascimento.setDefault(() -> DateUtils.asLocalDate(faker.date().past(18, TimeUnit.DAYS)));\n		spec.sexo.setDefault(() -> faker.options().option(SexoEnum.class));\n		spec.paisNascimento.setDefault(paisRef::getNome);\n		spec.municipioNascimento.setDefault(municipioDtoFactory::createRandom);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> id = new SpecValue<>();\n		public final SpecValue<String> cpf = new SpecValue<>();\n		public final SpecValue<String> cns = new SpecValue<>();\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> nomeSocial = new SpecValue<>();\n		public final SpecValue<String> nomeMae = new SpecValue<>();\n		public final SpecValue<LocalDate> dataNascimento = new SpecValue<>();\n		public final SpecValue<SexoEnum> sexo = new SpecValue<>();\n		public final SpecValue<String> paisNascimento = new SpecValue<>();\n		public final SpecValue<MunicipioDto> municipioNascimento = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.termo.database;\n\nimport static br.ufsc.bridge.pecassinador.termo.database.ConfirmacaoTermoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDateTime;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.termo.model.ConfirmacaoTermo;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ConfirmacaoTermoFactory extends DataFactory<ConfirmacaoTermo, Spec> {\n\n	@Getter(lazy = true)\n	private static final ConfirmacaoTermoFactory instance = new ConfirmacaoTermoFactory();\n\n	@Autowired\n	public ConfirmacaoTermoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected ConfirmacaoTermo create(Spec spec) {\n		ConfirmacaoTermo confirmacaoTermo = new ConfirmacaoTermo();\n\n		confirmacaoTermo.setCpf(spec.cpf.get());\n		confirmacaoTermo.setDataConfirmacaoTermo(spec.dataConfirmacaoTermo.get());\n\n		return confirmacaoTermo;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.cpf.setDefault(this.faker::cpf);\n		spec.dataConfirmacaoTermo.setDefault(LocalDateTime::now);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> cpf = new SpecValue<>();\n		public SpecValue<LocalDateTime> dataConfirmacaoTermo = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.termo.repository;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.termo.database.ConfirmacaoTermoFactory;\nimport br.ufsc.bridge.pecassinador.termo.model.ConfirmacaoTermo;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class ConfirmacaoTermoRepositoryDatabaseTest {\n\n	@Autowired\n	private ConfirmacaoTermoRepository confirmacaoTermoRepository;\n\n	@Autowired\n	private ConfirmacaoTermoFactory confirmacaoTermoFactory;\n\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@Test\n	@DisplayName(""Deve retornar verdadeiro se existir uma confirmação de termo para o cpf informado que possua uma data não nula"")\n	public void testExistsByCpfAndDataConfirmacaoTermoNotNull() {\n		this.confirmacaoTermoFactory.createRandom(3);\n		ConfirmacaoTermo confirmacaoTermo = this.confirmacaoTermoFactory.createRandom();\n\n		Boolean result = this.confirmacaoTermoRepository.existsByCpfAndDataConfirmacaoTermoNotNull(confirmacaoTermo.getCpf());\n\n		assertThat(result).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar falso quando não existe uma confirmação do termo para o cpf informado"")\n	public void testExistsByCpfAndDataConfirmacaoTermoNotNullWithInvalidCpf() {\n		this.confirmacaoTermoFactory.createRandom(3);\n\n		Boolean result = this.confirmacaoTermoRepository.existsByCpfAndDataConfirmacaoTermoNotNull(this.faker.cpf());\n\n		assertThat(result).isFalse();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar falso quando existe uma confirmação do termo para o cpf informado mas com data nula"")\n	public void testExistsByCpfAndDataConfirmacaoTermoNotNullWithNullDataConfirmacaoTermo() {\n		this.confirmacaoTermoFactory.createRandom(3);\n		ConfirmacaoTermo confirmacaoTermo = this.confirmacaoTermoFactory.create(spec -> {\n			spec.dataConfirmacaoTermo.set(null);\n		});\n\n		Boolean result = this.confirmacaoTermoRepository.existsByCpfAndDataConfirmacaoTermoNotNull(confirmacaoTermo.getCpf());\n\n		assertThat(result).isFalse();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.atestado.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.documento.latest.database.DocumentoTemporarioCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\n\npublic class AtestadoValidatorTest {\n	private final DocumentoTemporarioCreateDtoFactory factory = DocumentoTemporarioCreateDtoFactory.getInstance();\n	private AtestadoValidator validator;\n\n	private static Stream<Arguments> provideInputsForNullCheckTest() {\n		DocumentoTemporarioCreateDtoFactory localFactory = DocumentoTemporarioCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.prescritor.set(null);}), ""prescritor""),\n				Arguments.of(localFactory.create(spec -> {spec.cidadao.set(null);}), ""cidadao"")\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.validator = new AtestadoValidator();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		DocumentoTemporarioCreateDto input = this.factory.createRandom();\n\n		Validator<DocumentoTemporarioCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForNullCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testNullCheckForRequiredFields(DocumentoTemporarioCreateDto input, String errorField) {\n		Validator<DocumentoTemporarioCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation.rules;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\n\nclass AfterEqualTodayRuleTest {\n\n	private static final LocalDate REFERENCE_DATE = LocalDate.of(2012, 12, 21);\n	private static final String ERROR_STRING = ""Não deve ser anterior à data atual"";\n	private AfterEqualTodayRule afterEqualTodayRule;\n\n	private static Stream<Arguments> provideInputsForValidChecks() {\n		return Stream.of(\n				Arguments.of((LocalDate) null),\n				Arguments.of(LocalDate.of(2012, 12, 21)),\n				Arguments.of(REFERENCE_DATE.plusDays(1))\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.afterEqualTodayRule = new AfterEqualTodayRule();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForValidChecks"")\n	@DisplayName(""Deve retornar nulo no caso de receber um input válido"")\n	public void testValidInput(LocalDate input) {\n		try (MockedStatic<LocalDate> localDateMockedStatic = Mockito.mockStatic(LocalDate.class)) {\n			localDateMockedStatic.when(LocalDate::now).thenReturn(REFERENCE_DATE);\n			assertThat(afterEqualTodayRule.validate(input)).isNull();\n		}\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um string de erro no caso de receber uma data anterior ao dia de hoje"")\n	public void testInvalidInput() {\n		LocalDate localDate = REFERENCE_DATE.minusDays(1);\n\n		try (MockedStatic<LocalDate> localDateMockedStatic = Mockito.mockStatic(LocalDate.class)) {\n			localDateMockedStatic.when(LocalDate::now).thenReturn(REFERENCE_DATE);\n			assertThat(afterEqualTodayRule.validate(localDate)).isEqualTo(ERROR_STRING);\n		}\n	}\n}"
not_service,"package br.ufsc.bridge.pecassinador.common.validation.rules;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.common.validation.rules.NumericRule;\n\npublic class NumericRuleTest {\n	private NumericRule numericRule;\n\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@BeforeEach\n	public void setup() {\n		this.numericRule = new NumericRule();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo no caso de receber um input válido"")\n	public void testValidInput() {\n		String value = this.faker.number().digits(5);\n\n		String result = this.numericRule.validate(value);\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo no caso de receber um input vazio"")\n	public void testEmptyInput() {\n		String value = """";\n\n		String result = this.numericRule.validate(value);\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um string de erro no caso de receber um input inválido"")\n	public void testInvalidInput() {\n		String value = this.faker.lorem().word();\n\n		String result = this.numericRule.validate(value);\n\n		assertThat(result).isEqualTo(""Um ou mais caracteres informados não são permitidos para esse campo"");\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.validation.rules;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass IsEqualRuleTest<T> {\n	private IsEqualRule isEqualRule;\n\n	private static Stream<Arguments> provideInputsForValidChecks() {\n		return Stream.of(\n				Arguments.of(null, 1L),\n				Arguments.of(1L, 1L),\n				Arguments.of(""String"", ""String"")\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForInvalidChecks() {\n		return Stream.of(\n				Arguments.of(1L, 2L),\n				Arguments.of(""StringA"", ""StringB"")\n		);\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForValidChecks"")\n	@DisplayName(""Deve retornar nulo no caso de receber um input válido"")\n	public void testValidInput(T input, T compareTo) {\n		this.isEqualRule = new IsEqualRule(compareTo);\n		assertThat(isEqualRule.validate(input)).isNull();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForInvalidChecks"")\n	@DisplayName(""Deve retornar um string de erro no caso de receber um input diferente do esperado"")\n	public void testInvalidInput(T input, T compareTo) {\n		this.isEqualRule = new IsEqualRule(compareTo);\n		assertThat(isEqualRule.validate(input)).isEqualTo(""Deve ser igual a "" + compareTo);\n	}\n}"
not_service,"package br.ufsc.bridge.pecassinador.common.validation.rules;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.NullSource;\nimport org.junit.jupiter.params.provider.ValueSource;\n\npublic class NotBlankRuleTest {\n\n	private NotBlankRule notBlankRule;\n\n	@BeforeEach\n	public void setup() {\n		notBlankRule = new NotBlankRule();\n	}\n\n	@ParameterizedTest\n	@NullSource\n	@ValueSource(strings = { ""not blank"" })\n	@DisplayName(""Deve retornar null quando o valor não é em branco"")\n	public void deveRetornarNullQuandoValorNaoEmBranco(String input) {\n		String result = notBlankRule.validate(input);\n		assertThat(result).isNull();\n	}\n\n	@ParameterizedTest\n	@ValueSource(strings = { "" "", ""\n"", ""\t"", ""\r"", ""\f"", ""\u000B"" })\n	@DisplayName(""Deve retornar mensagem de erro quando o valor é em branco"")\n	public void deveRetornarMensagemDeErroQuandoValorEmBranco(String input) {\n		String result = notBlankRule.validate(input);\n		assertThat(result).isEqualTo(""Este campo não pode estar em branco"");\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.pecassinador.common.util.DateUtils;\n\npublic class DateUtilsTest {\n\n	@Test\n	@DisplayName(""Deve retornar o valor correto para uma data que recebe como parâmetro"")\n	public void testAsLocalDate() {\n		LocalDate expected = LocalDate.of(2000, Month.JANUARY, 1);\n		Date input = new GregorianCalendar(2000, Calendar.JANUARY, 1).getTime();\n\n		LocalDate actual = DateUtils.asLocalDate(input);\n\n		assertThat(actual).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar null quando recebe null como parâmetro"")\n	public void testNullAsLocalDate() {\n		LocalDate actual = DateUtils.asLocalDate(null);\n\n		assertThat(actual).isNull();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.common.util;\n\nimport static br.ufsc.bridge.pecassinador.common.util.StringUtils.removeHtml;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\npublic class StringUtilsTest {\n\n	private static Stream<Arguments> provideInputsForRemoveDuplicates() {\n		return Stream.of(\n				Arguments.of(""espaco  meio"", ""espaco meio""),\n				Arguments.of(""espaco  meio com  simples"", ""espaco meio com simples""),\n				Arguments.of(""  espaco  comeco  e  final  "", ""espaco comeco e final""),\n				Arguments.of(""\noutros\tcaracteres\respeciais\ftbm\fsao\u000Bremovidos "", ""outros caracteres especiais tbm sao removidos"")\n		);\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForRemoveDuplicates"")\n	@DisplayName(""Deve retornar a string sem espaços duplicados"")\n	public void deveRetornarStringSemEspacosDuplicados(String input, String expected) {\n		String result = StringUtils.replaceDuplicateWhitespaceCharsBySingleWhitespace(input);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar null quando a string de entrada é null"")\n	public void deveRetornarNullQuandoStringDeEntradaENull() {\n		String input = null;\n		String result = StringUtils.replaceDuplicateWhitespaceCharsBySingleWhitespace(input);\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar null quando entrada for nula"")\n	public void deveRetornarNullQuandoEntradaForNula() {\n		String result = removeHtml(null);\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar string vazia quando entrada for string vazia"")\n	public void deveRetornarNullQuandoReceberStringVazia() {\n		String expected = """";\n\n		String result = removeHtml("""");\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve remover tags HTML da string"")\n	public void deveRemoverTagsHTMLDaString() {\n		String input = ""<div><p>Hello <b>World</b></p></div>"";\n		String expected = ""Hello World"";\n\n		String result = removeHtml(input);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve remover corretamente tags HTML, nao deixar espaco antes dos caracteres especiais"")\n	public void deveRemoverCorretamenteTagsHTMLNaoDeixarEspacoAntesDosCaracteresEspeciaisEAdicionarDepois() {\n		String input = ""<p>paragrafo</p>, <b>negrito</b>. <i>italico</i>!<u>sub</u>?<br>linha;<s>risco</s>:<span>texto</span>"";\n		String expected = ""paragrafo, negrito. italico!sub? linha;risco:texto"";\n\n		String result = removeHtml(input);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve substituir corretamente tags HTML de quebra de linha por espaco"")\n	public void deveSubstituirCorretamenteTagsHTMLDeQuebraDeLinhaPorEspaco() {\n		String input = ""Lista<br>* Item 1<br>* Item 2"";\n		String expected = ""Lista * Item 1 * Item 2"";\n\n		String result = removeHtml(input);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve normalizar espacos quando as tags HTML forem removidas"")\n	public void deveNormalizarEspacosQuandoAsTagsHTMLForemRemovidas() {\n		String input = ""   <div><p>   Hello   <b>World</b>   </p>   </div>   "";\n		String expected = ""Hello World"";\n\n		String result = removeHtml(input);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve lidar com diferentes entidades HTML"")\n	public void deveLidarComDiferentesEntidadesHTML() {\n		String input = ""Hello&nbsp;World &amp; Universe &lt;Test&gt;"";\n		String expected = ""Hello World & Universe <Test>"";\n\n		String result = removeHtml(input);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar texto inalterado quando nao houver tags HTML"")\n	public void deveRetornarTextoInalteradoQuandoNaoHouverTagsHTML() {\n		String text = ""Texto simples sem tags HTML."";\n		String expected = ""Texto simples sem tags HTML."";\n\n		String result = removeHtml(text);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve preservar caracteres especiais no texto"")\n	public void devePreservarCaracteresEspeciaisNoTexto() {\n		String text = ""Texto com caracteres especiais: !@#$%^&*()"";\n		String expected = ""Texto com caracteres especiais: !@#$%^&*()"";\n\n		String result = removeHtml(text);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve remover tags HTML e substituir quebras de linha por espaco"")\n	public void deveRemoverTagsHTMLESubstituirQuebrasDeLinhaPorEspaco() {\n		String input = ""<div>Primeira linha\nSegunda linha\r\n<p>Parágrafo</p></div>"";\n		String expected = ""Primeira linha Segunda linha Parágrafo"";\n\n		String result = removeHtml(input);\n		assertThat(result).isEqualTo(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve substituir quebras de linha simples por espaco"")\n	public void deveSubstituirQuebrasDeLinhaSimplesPorEspaco() {\n		String input = ""Primeira linha\nSegunda linha"";\n		String expected = ""Primeira linha Segunda linha"";\n\n		String result = removeHtml(input);\n		assertThat(result).isEqualTo(expected);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.time.LocalDate;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.ProdutoCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\n\npublic class FornecimentoReceitaControladaCreateDtoValidatorTest {\n	private static final LocalDate REFERENCE_DATE = LocalDate.of(2012, 12, 21);\n	private final FornecimentoReceitaCreateDtoFactory factory = FornecimentoReceitaCreateDtoFactory.getInstance();\n	private final BridgeFaker faker = new BridgeFaker();\n	private ProdutoCreateDtoValidator produtoCreateDtoValidator;\n	private FornecimentoReceitaControladaCreateDtoValidator validator;\n\n	private static Stream<Arguments> provideInputsForValidCheck() {\n		FornecimentoReceitaCreateDtoFactory localFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n		ProdutoCreateDtoFactory localProdutoCreateDtoFactory = ProdutoCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {\n							spec.quantidadeFornecida.set(5L);\n							spec.produto.set(localProdutoCreateDtoFactory.create(produto -> {\n								produto.quantidadeEmbalagem.set(5L);\n							}));\n							spec.formaFornecimento.set(FormaFornecimentoEnum.EMBALAGEM_COMPLETA);\n							spec.dataValidade.set(REFERENCE_DATE.plusDays(1));\n						}\n				)),\n				Arguments.of(localFactory.create(spec -> {\n							spec.quantidadeFornecida.set(5L);\n							spec.observacao.set(null);\n							spec.produto.set(localProdutoCreateDtoFactory.createRandom());\n							spec.formaFornecimento.set(FormaFornecimentoEnum.UNIDADE);\n							spec.lote.set(null);\n							spec.dataValidade.set(null);\n						}\n				))\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForMissingFieldsCheck() {\n		FornecimentoReceitaCreateDtoFactory localFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> spec.receitaMedicamentoId.set(null)), ""receitaMedicamentoId""),\n				Arguments.of(localFactory.create(spec -> spec.quantidadeFornecida.set(null)), ""quantidadeFornecida""),\n				Arguments.of(localFactory.create(spec -> spec.produto.set(null)), ""produto""),\n				Arguments.of(localFactory.create(spec -> spec.formaFornecimento.set(null)), ""formaFornecimento"")\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForRangeChecks() {\n		FornecimentoReceitaCreateDtoFactory localFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.quantidadeFornecida.set(0L);\n							spec.dataValidade.set(null);\n						}),\n						""quantidadeFornecida"",\n						1L,\n						9999L\n				)\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForBlankStringFieldsCheck() {\n		FornecimentoReceitaCreateDtoFactory localFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> spec.lote.set("" "")), ""lote""),\n				Arguments.of(localFactory.create(spec -> spec.observacao.set("" "")), ""observacao"")\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForMaxLengthChecks() {\n		FornecimentoReceitaCreateDtoFactory localFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n		BridgeFaker localFaker = new BridgeFaker();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.lote.set(localFaker.lorem().characters(31));}), ""lote"", 30L),\n				Arguments.of(localFactory.create(spec -> {spec.observacao.set(localFaker.lorem().characters(201));}), ""observacao"", 200L)\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		produtoCreateDtoValidator = mock(ProdutoCreateDtoValidator.class);\n\n		validator = new FornecimentoReceitaControladaCreateDtoValidator(produtoCreateDtoValidator);\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForValidCheck"")\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput(FornecimentoReceitaCreateDto input) {\n		checkValidInput(input);\n		verify(produtoCreateDtoValidator).validate(input.getProduto());\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForMissingFieldsCheck"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testMissingFieldsCheck(FornecimentoReceitaCreateDto input, String errorField) {\n		checkInvalidInput(input, errorField, ""Preenchimento obrigatório"");\n		verifyNoInteractions(produtoCreateDtoValidator);\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForRangeChecks"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores além dos limites nos campos numéricos"")\n	public void testRangeChecks(FornecimentoReceitaCreateDto input, String errorField, Long lowerLimit, Long upperLimit) {\n		String errorMessage = upperLimit != null\n				? ""Deve ter valor entre "" + lowerLimit + "" e "" + upperLimit\n				: ""Deve ser maior ou igual a "" + lowerLimit;\n\n		checkInvalidInput(input, errorField, errorMessage);\n		verifyNoInteractions(produtoCreateDtoValidator);\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForBlankStringFieldsCheck"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber apenas whitespace nos campos de texto"")\n	public void testBlankStringFieldsCheck(FornecimentoReceitaCreateDto input, String errorField) {\n		checkInvalidInput(input, errorField, ""Este campo não pode estar em branco"");\n		verifyNoInteractions(produtoCreateDtoValidator);\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForMaxLengthChecks"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber campos de texto de comprimentos que extrapolam o limite máximo"")\n	public void testMaxLengthCheck(FornecimentoReceitaCreateDto input, String errorField, Long lengthLimit) {\n		checkInvalidInput(input, errorField, ""Deve possuir no máximo "" + lengthLimit + "" caractere(s)"");\n		verifyNoInteractions(produtoCreateDtoValidator);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber datas no passado para o campo de data de validade"")\n	public void testDataValidadeInvalida() {\n		checkInvalidInput(\n				factory.create(spec -> {spec.dataValidade.set(REFERENCE_DATE.minusDays(1));}),\n				""dataValidade"",\n				""Não deve ser anterior à data atual""\n		);\n		verifyNoInteractions(produtoCreateDtoValidator);\n	}\n\n	private void checkInvalidInput(FornecimentoReceitaCreateDto input, String expectedErrorField, String expectedErrorMessage) {\n		ProdutoCreateDto produtoCreateDto = input.getProduto();\n\n		when(produtoCreateDtoValidator.validate(produtoCreateDto)).thenReturn(Validator.of(produtoCreateDto));\n\n		try (MockedStatic<LocalDate> localDateMockedStatic = Mockito.mockStatic(LocalDate.class)) {\n			localDateMockedStatic.when(LocalDate::now).thenReturn(REFERENCE_DATE);\n\n			Validator<FornecimentoReceitaCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=%s}"", expectedErrorField, expectedErrorMessage));\n		}\n	}\n\n	private void checkValidInput(FornecimentoReceitaCreateDto input) {\n		ProdutoCreateDto produtoCreateDto = input.getProduto();\n\n		when(produtoCreateDtoValidator.validate(produtoCreateDto)).thenReturn(Validator.of(produtoCreateDto));\n\n		try (MockedStatic<LocalDate> localDateMockedStatic = Mockito.mockStatic(LocalDate.class)) {\n			localDateMockedStatic.when(LocalDate::now).thenReturn(REFERENCE_DATE);\n\n			Validator<FornecimentoReceitaCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.ProdutoCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoCreateDto;\n\npublic class ProdutoCreateDtoValidatorTest {\n	private final ProdutoCreateDtoFactory factory = ProdutoCreateDtoFactory.getInstance();\n	private ProdutoCreateDtoValidator validator;\n\n	private static Stream<Arguments> provideInputsForValidCheck() {\n		ProdutoCreateDtoFactory localFactory = ProdutoCreateDtoFactory.getInstance();\n		BridgeFaker localFaker = new BridgeFaker();\n		return Stream.of(\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(true);\n							spec.registroSanitario.set(localFaker.number().digits(13));\n							spec.codigoObm.set(null);\n							spec.nome.set(null);\n						})\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(false);\n							spec.registroSanitario.set(null);\n						})\n				)\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForMissingFieldsCheck() {\n		ProdutoCreateDtoFactory localFactory = ProdutoCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(null);\n						}),\n						""produtoNaoEncontrado""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(false);\n							spec.unidadeMedidaId.set(null);\n							spec.registroSanitario.set(null);\n						}),\n						""unidadeMedidaId""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(true);\n							spec.codigoObm.set(null);\n							spec.nome.set(null);\n							spec.registroSanitario.set(null);\n						}),\n						""registroSanitario""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(false);\n							spec.codigoObm.set(null);\n							spec.registroSanitario.set(null);\n						}),\n						""codigoObm""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(false);\n							spec.nome.set(null);\n							spec.registroSanitario.set(null);\n						}),\n						""nome""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(false);\n							spec.quantidadeEmbalagem.set(null);\n							spec.registroSanitario.set(null);\n						}),\n						""quantidadeEmbalagem""\n				)\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForBlankStringFieldsCheck() {\n		ProdutoCreateDtoFactory localFactory = ProdutoCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(false);\n							spec.registroSanitario.set(null);\n							spec.codigoObm.set("" "");\n						}),\n						""codigoObm""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(true);\n							spec.codigoObm.set(null);\n							spec.nome.set(null);\n							spec.registroSanitario.set("" "");\n						}),\n						""registroSanitario""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(false);\n							spec.registroSanitario.set(null);\n							spec.nome.set("" "");\n						}),\n						""nome""\n				)\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForIncorrectlyFilledFieldsCheck() {\n		ProdutoCreateDtoFactory localFactory = ProdutoCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(true);\n							spec.nome.set(null);\n						}),\n						""codigoObm""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(true);\n							spec.codigoObm.set(null);\n						}),\n						""nome""\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.produtoNaoEncontrado.set(false);\n						}),\n						""registroSanitario""\n				)\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForRangeChecks() {\n		ProdutoCreateDtoFactory localFactory = ProdutoCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.quantidadeEmbalagem.set(10000000000L);\n							spec.registroSanitario.set(null);\n						})\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.quantidadeEmbalagem.set(0L);\n							spec.registroSanitario.set(null);\n						})\n				),\n				Arguments.of(\n						localFactory.create(spec -> {\n							spec.quantidadeEmbalagem.set(-1L);\n							spec.registroSanitario.set(null);\n						})\n				)\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		validator = new ProdutoCreateDtoValidator();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForValidCheck"")\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput(ProdutoCreateDto input) {\n		checkValidInput(input);\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForMissingFieldsCheck"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testMissingFieldsCheck(ProdutoCreateDto input, String errorField) {\n		checkInvalidInput(input, errorField, ""Preenchimento obrigatório"");\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForBlankStringFieldsCheck"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber apenas whitespace nos campos de texto"")\n	public void testBlankStringFieldsCheck(ProdutoCreateDto input, String errorField) {\n		checkInvalidInput(input, errorField, ""Preenchimento obrigatório"");\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForIncorrectlyFilledFieldsCheck"")\n	@DisplayName(""Não deve permitir campos preenchidos indevidamente"")\n	public void testIncorrectlyFilledFieldsCheck(ProdutoCreateDto input, String errorField) {\n		checkInvalidInput(input, errorField, ""Não deve ser preenchido"");\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForRangeChecks"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores além dos limites nos campos numéricos"")\n	public void testRangeChecks(ProdutoCreateDto input) {\n		checkInvalidInput(\n				input,\n				""quantidadeEmbalagem"",\n				""Deve ter valor entre "" + 1L + "" e "" + 9999999999L\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber campos numéricos serializados com outros tipos de caracteres"")\n	public void testNumericInputsCheck() {\n		checkInvalidInput(\n				factory.create(spec -> {\n					spec.produtoNaoEncontrado.set(true);\n					spec.codigoObm.set(null);\n					spec.nome.set(null);\n					spec.registroSanitario.set(""12a34"");\n				}),\n				""registroSanitario"",\n				""Um ou mais caracteres informados não são permitidos para esse campo""\n		);\n	}\n\n	private void checkInvalidInput(\n			ProdutoCreateDto input,\n			String expectedErrorField,\n			String expectedErrorMessage\n	) {\n		Validator<ProdutoCreateDto> formError = validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=%s}"", expectedErrorField, expectedErrorMessage));\n	}\n\n	private void checkValidInput(ProdutoCreateDto input) {\n		Validator<ProdutoCreateDto> formError = validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.EstabelecimentoCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoCreateDto;\n\npublic class EstabelecimentoCreateDtoValidatorTest {\n	private final EstabelecimentoCreateDtoFactory factory = EstabelecimentoCreateDtoFactory.getInstance();\n	private EstabelecimentoCreateDtoValidator validator;\n	private EnderecoCreateDtoValidator enderecoCreateDtoValidator;\n	private final BridgeFaker faker = new BridgeFaker();\n\n	private static Stream<Arguments> inputsForInvalidCnesCheck() {\n		EstabelecimentoCreateDtoFactory localFactory = EstabelecimentoCreateDtoFactory.getInstance();\n		BridgeFaker localFaker = new BridgeFaker();\n\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> spec.cnpjOrCnes.set(localFaker.number().digits(6))),\n						""{cnpjOrCnes=Deve possuir 7 caractere(s)}""),\n				Arguments.of(localFactory.create(spec -> spec.cnpjOrCnes.set(localFaker.lorem().characters(7))),\n						""{cnpjOrCnes=Um ou mais caracteres informados não são permitidos para esse campo}"")\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.enderecoCreateDtoValidator = mock(EnderecoCreateDtoValidator.class);\n		this.validator = new EstabelecimentoCreateDtoValidator(this.enderecoCreateDtoValidator);\n	}\n\n	@Nested\n	class ValidateFunction {\n		private static Stream<Arguments> provideInputsForNullCheckTest() {\n			EstabelecimentoCreateDtoFactory localFactory = EstabelecimentoCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> spec.nome.set(null)), ""nome""),\n					Arguments.of(localFactory.create(spec -> spec.endereco.set(null)), ""endereco"")\n			);\n		}\n\n		private static Stream<Arguments> provideInputsForInvalidCnesCheck() {\n			return inputsForInvalidCnesCheck();\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n		public void testValidInput() {\n			EstabelecimentoCreateDto input = factory.createRandom();\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForNullCheckTest"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n		public void testNullCheck(EstabelecimentoCreateDto input, String errorField) {\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o nome inválido"")\n		public void testInvalidNameCheck() {\n			EstabelecimentoCreateDto input = factory.create(spec -> spec.nome.set(faker.lorem().characters(101)));\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{nome=Deve possuir no máximo 100 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input com um cnes válido"")\n		public void testValidCnesCheck() {\n			EstabelecimentoCreateDto input = factory.create(spec -> spec.cnpjOrCnes.set(faker.number().digits(7)));\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForInvalidCnesCheck"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com um cnes inválido"")\n		public void testInvalidCnesCheck(EstabelecimentoCreateDto input, String expectedError) {\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(expectedError);\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com um cnpj/cnes em branco"")\n		public void testBlankCheck() {\n			EstabelecimentoCreateDto input = factory.create(spec -> spec.cnpjOrCnes.set(""  ""));\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{cnpjOrCnes=Este campo não pode estar em branco}"");\n\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com um cnpj inválido"")\n		public void testInvalidCnpjCheck() {\n			EstabelecimentoCreateDto input = factory.create(spec -> spec.cnpjOrCnes.set(faker.lorem().characters(14)));\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{cnpjOrCnes=Campo inválido}"");\n		}\n\n		@Test\n		@DisplayName(""Deve chamar os validadores auxiliares de forma adequada"")\n		public void testCallAggregateValidators() {\n			EstabelecimentoCreateDto input = factory.createRandom();\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n			verify(enderecoCreateDtoValidator).validate(input.getEndereco());\n		}\n\n	}\n\n	@Nested\n	class ValidateOpcionalFunction {\n\n		private static Stream<Arguments> provideInputsForValidTest() {\n			EstabelecimentoCreateDtoFactory localFactory = EstabelecimentoCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.createRandom()),\n					Arguments.of(localFactory.create(spec -> spec.nome.set(null))),\n					Arguments.of(localFactory.create(spec -> spec.endereco.set(null)))\n			);\n		}\n\n		private static Stream<Arguments> provideInputsForInvalidCnesCheck() {\n			return inputsForInvalidCnesCheck();\n		}\n\n		private static Stream<Arguments> provideInputsForBlankCheck() {\n			EstabelecimentoCreateDtoFactory localFactory = EstabelecimentoCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> spec.cnpjOrCnes.set("" "")), ""cnpjOrCnes""),\n					Arguments.of(localFactory.create(spec -> spec.nome.set("" "")), ""nome"")\n			);\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForValidTest"")\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n		public void testValidInput(EstabelecimentoCreateDto input) {\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForBlankCheck"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com um campo em branco "")\n		public void testBlankCheck(EstabelecimentoCreateDto input, String errorField) {\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Este campo não pode estar em branco}"", errorField));\n\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o nome inválido"")\n		public void testInvalidNameCheck() {\n			EstabelecimentoCreateDto input = factory.create(spec -> spec.nome.set(faker.lorem().characters(101)));\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{nome=Deve possuir no máximo 100 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input com um cnes válido"")\n		public void testValidCnesCheck() {\n			EstabelecimentoCreateDto input = factory.create(spec -> spec.cnpjOrCnes.set(faker.number().digits(7)));\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForInvalidCnesCheck"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com um cnes inválido"")\n		public void testInvalidCnesCheck(EstabelecimentoCreateDto input, String expectedError) {\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(expectedError);\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com um cnpj inválido"")\n		public void testInvalidCnpjCheck() {\n			EstabelecimentoCreateDto input = factory.create(spec -> spec.cnpjOrCnes.set(faker.lorem().characters(14)));\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{cnpjOrCnes=Campo inválido}"");\n		}\n\n		@Test\n		@DisplayName(""Deve chamar os validadores auxiliares de forma adequada"")\n		public void testCallAggregateValidators() {\n			EstabelecimentoCreateDto input = factory.createRandom();\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<EstabelecimentoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n			verify(enderecoCreateDtoValidator).validateOpcional(input.getEndereco());\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static java.util.Collections.singletonList;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.ArgumentMatchers;\n\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoCreateDto;\nimport br.ufsc.bridge.pecassinador.farmaceutico.validator.FarmaceuticoCreateDtoValidator;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoCreateDto;\nimport br.ufsc.bridge.platform.validation.form.errors.FormError;\n\npublic class FornecimentoControladoCreateDtoValidatorTest {\n	private final FornecimentoCreateDtoFactory factory = FornecimentoCreateDtoFactory.getInstance();\n	private final FornecimentoReceitaCreateDtoFactory fornecimentoReceitaCreateDtoFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n	private FornecimentoControladoCreateDtoValidator validator;\n	private CompradorCreateDtoValidator compradorCreateDtoValidator;\n	private EstabelecimentoCreateDtoValidator estabelecimentoCreateDtoValidator;\n	private FarmaceuticoCreateDtoValidator farmaceuticoCreateDtoValidator;\n	private FornecimentoReceitaControladaCreateDtoValidator fornecimentoReceitaControladaCreateDtoValidator;\n\n	private static Stream<Arguments> provideInputsForNullCheckTest() {\n		FornecimentoCreateDtoFactory localFactory = FornecimentoCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.comprador.set(null);}), ""comprador""),\n				Arguments.of(localFactory.create(spec -> {spec.estabelecimento.set(null);}), ""estabelecimento""),\n				Arguments.of(localFactory.create(spec -> {spec.farmaceutico.set(null);}), ""farmaceutico""),\n				Arguments.of(localFactory.create(spec -> {spec.receitas.set(null);}), ""receitas"")\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.compradorCreateDtoValidator = mock(CompradorCreateDtoValidator.class);\n		this.estabelecimentoCreateDtoValidator = mock(EstabelecimentoCreateDtoValidator.class);\n		this.farmaceuticoCreateDtoValidator = mock(FarmaceuticoCreateDtoValidator.class);\n		this.fornecimentoReceitaControladaCreateDtoValidator = mock(FornecimentoReceitaControladaCreateDtoValidator.class);\n\n		this.validator = new FornecimentoControladoCreateDtoValidator(\n				this.compradorCreateDtoValidator,\n				this.estabelecimentoCreateDtoValidator,\n				this.farmaceuticoCreateDtoValidator,\n				this.fornecimentoReceitaControladaCreateDtoValidator\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		FornecimentoCreateDto input = this.factory.createRandom();\n		when(this.compradorCreateDtoValidator.validate(input.getComprador())).thenReturn(Validator.of(input.getComprador()));\n		when(this.estabelecimentoCreateDtoValidator.validate(input.getEstabelecimento())).thenReturn(Validator.of(input.getEstabelecimento()));\n		when(this.farmaceuticoCreateDtoValidator.validate(input.getFarmaceutico())).thenReturn(Validator.of(input.getFarmaceutico()));\n\n		Validator<FornecimentoCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForNullCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testNullCheckForRequiredFields(FornecimentoCreateDto input, String errorField) {\n		when(this.compradorCreateDtoValidator.validate(input.getComprador())).thenReturn(Validator.of(input.getComprador()));\n		when(this.estabelecimentoCreateDtoValidator.validate(input.getEstabelecimento())).thenReturn(Validator.of(input.getEstabelecimento()));\n		when(this.farmaceuticoCreateDtoValidator.validate(input.getFarmaceutico())).thenReturn(Validator.of(input.getFarmaceutico()));\n\n		Validator<FornecimentoCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n		verifyNoInteractions(compradorCreateDtoValidator, estabelecimentoCreateDtoValidator, farmaceuticoCreateDtoValidator, fornecimentoReceitaControladaCreateDtoValidator);\n	}\n\n	@Test\n	@DisplayName(""Deve chamar os validadores auxiliares de forma adequada"")\n	public void testCallAggregateValidators() {\n		FornecimentoCreateDto input = this.factory.createRandom();\n		when(this.compradorCreateDtoValidator.validate(input.getComprador())).thenReturn(Validator.of(input.getComprador()));\n		when(this.estabelecimentoCreateDtoValidator.validate(input.getEstabelecimento())).thenReturn(Validator.of(input.getEstabelecimento()));\n		when(this.farmaceuticoCreateDtoValidator.validate(input.getFarmaceutico())).thenReturn(Validator.of(input.getFarmaceutico()));\n\n		Validator<FornecimentoCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(compradorCreateDtoValidator).validate(input.getComprador());\n		verify(estabelecimentoCreateDtoValidator).validate(input.getEstabelecimento());\n		verify(farmaceuticoCreateDtoValidator).validate(input.getFarmaceutico());\n		ArgumentCaptor<FornecimentoReceitaCreateDto> captor = ArgumentCaptor.forClass(FornecimentoReceitaCreateDto.class);\n		verify(fornecimentoReceitaControladaCreateDtoValidator, times(input.getReceitas().size())).validate(\n				captor.capture(),\n				ArgumentMatchers.<Validator<FornecimentoReceitaCreateDto>>any()\n		);\n		assertThat(captor.getAllValues()).containsExactlyElementsOf(input.getReceitas());\n	}\n\n	@Test\n	@DisplayName(""Deve incluir erros retornados pelos validadores auxiliares no resultado"")\n	public void testWriteAggregateValidatorErrors() {\n		FornecimentoReceitaCreateDto fornecimentoReceitaCreateDto = fornecimentoReceitaCreateDtoFactory.create(spec -> {\n			spec.receitaMedicamentoId.set(null);\n		});\n		FornecimentoCreateDto input = this.factory.create(spec -> {\n			spec.receitas.set(singletonList(fornecimentoReceitaCreateDto));\n		});\n		Validator<CompradorCreateDto> validatorComprador = Validator.of(input.getComprador());\n		validatorComprador.error(""erroComprador"");\n		Validator<FarmaceuticoCreateDto> validatorFarmaceutico = Validator.of(input.getFarmaceutico());\n		validatorFarmaceutico.error(""erroFarmaceutico"");\n		Validator<EstabelecimentoCreateDto> validatorEstabelecimento = Validator.of(input.getEstabelecimento());\n		validatorEstabelecimento.error(""erroEstabelecimento"");\n		Validator<List<FornecimentoReceitaCreateDto>> validatorReceita = Validator.of(input.getReceitas());\n		validatorReceita.error(""{receitaMedicamentoId=Preenchimento obrigatório}"");\n\n		when(this.compradorCreateDtoValidator.validate(any())).thenReturn(validatorComprador);\n		when(this.estabelecimentoCreateDtoValidator.validate(any())).thenReturn(validatorEstabelecimento);\n		when(this.farmaceuticoCreateDtoValidator.validate(any())).thenReturn(validatorFarmaceutico);\n		doAnswer(invocation -> {\n			FormError<List<FornecimentoReceitaCreateDto>> arg1 = invocation.getArgument(1);\n			arg1.error(validatorReceita.getErrors().toString());\n			return null;\n		}).when(fornecimentoReceitaControladaCreateDtoValidator).validate(\n				ArgumentMatchers.<FornecimentoReceitaCreateDto>any(),\n				ArgumentMatchers.<FormError<FornecimentoReceitaCreateDto>>any()\n		);\n\n		Validator<FornecimentoCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(\n				""{estabelecimento=erroEstabelecimento, receitas=[{receitaMedicamentoId=Preenchimento obrigatório}], comprador=erroComprador, farmaceutico=erroFarmaceutico}"");\n		verify(compradorCreateDtoValidator).validate(input.getComprador());\n		verify(estabelecimentoCreateDtoValidator).validate(input.getEstabelecimento());\n		verify(farmaceuticoCreateDtoValidator).validate(input.getFarmaceutico());\n		ArgumentCaptor<FornecimentoReceitaCreateDto> captor = ArgumentCaptor.forClass(FornecimentoReceitaCreateDto.class);\n		verify(fornecimentoReceitaControladaCreateDtoValidator, times(input.getReceitas().size())).validate(\n				captor.capture(),\n				ArgumentMatchers.<Validator<FornecimentoReceitaCreateDto>>any()\n		);\n		assertThat(captor.getAllValues()).containsExactlyElementsOf(input.getReceitas());\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.EnderecoCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\n\npublic class EnderecoCreateDtoValidatorTest {\n	private final EnderecoCreateDtoFactory factory = EnderecoCreateDtoFactory.getInstance();\n	private EnderecoCreateDtoValidator validator;\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@BeforeEach\n	public void setup() {\n		this.validator = new EnderecoCreateDtoValidator();\n	}\n\n	@Nested\n	class ValidateFunction {\n\n		private static Stream<Arguments> provideInputsForNullCheckTest() {\n			EnderecoCreateDtoFactory localFactory = EnderecoCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> spec.uf.set(null)), ""uf""),\n					Arguments.of(localFactory.create(spec -> spec.nomeMunicipio.set(null)), ""nomeMunicipio""),\n					Arguments.of(localFactory.create(spec -> spec.bairro.set(null)), ""bairro""),\n					Arguments.of(localFactory.create(spec -> spec.endereco.set(null)), ""endereco"")\n			);\n		}\n\n		private static Stream<Arguments> provideInputsForBlackCheckTest() {\n			EnderecoCreateDtoFactory localFactory = EnderecoCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> spec.numero.set("" "")), ""numero""),\n					Arguments.of(localFactory.create(spec -> spec.complemento.set("" "")), ""complemento"")\n			);\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n		public void testValidInput() {\n			EnderecoCreateDto input = factory.createRandom();\n\n			Validator<EnderecoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForNullCheckTest"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n		public void testNullCheck(EnderecoCreateDto input, String errorField) {\n			Validator<EnderecoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForBlackCheckTest"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber valores em branco nos campos que não são obrigatórios"")\n		public void testBlankCheck(EnderecoCreateDto input, String errorField) {\n			Validator<EnderecoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Este campo não pode estar em branco}"", errorField));\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o bairro inválido"")\n		public void testInvalidBairro() {\n			EnderecoCreateDto input = factory.create(spec -> spec.bairro.set(faker.lorem().characters(73)));\n\n			Validator<EnderecoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{bairro=Deve possuir no máximo 72 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o endereço inválido"")\n		public void testInvalidEndereco() {\n			EnderecoCreateDto input = factory.create(spec -> spec.endereco.set(faker.lorem().characters(251)));\n\n			Validator<EnderecoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{endereco=Deve possuir no máximo 250 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o número inválido"")\n		public void testInvalidNumero() {\n			EnderecoCreateDto input = factory.create(spec -> spec.numero.set(faker.lorem().characters(8)));\n\n			Validator<EnderecoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{numero=Deve possuir no máximo 7 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o complemento inválido"")\n		public void testInvalidComplemento() {\n			EnderecoCreateDto input = factory.create(spec -> spec.complemento.set(faker.lorem().characters(251)));\n\n			Validator<EnderecoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{complemento=Deve possuir no máximo 250 caractere(s)}"");\n		}\n	}\n\n	@Nested\n	class ValidadeOpcionalFunction {\n		private static Stream<Arguments> provideInputsForValidTest() {\n			EnderecoCreateDtoFactory localFactory = EnderecoCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> spec.uf.set(null))),\n					Arguments.of(localFactory.create(spec -> spec.nomeMunicipio.set(null))),\n					Arguments.of(localFactory.create(spec -> spec.bairro.set(null))),\n					Arguments.of(localFactory.create(spec -> spec.endereco.set(null))),\n					Arguments.of(localFactory.createRandom()));\n		}\n\n		private static Stream<Arguments> provideInputsForBlackCheckTest() {\n			EnderecoCreateDtoFactory localFactory = EnderecoCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> spec.nomeMunicipio.set("" "")), ""nomeMunicipio""),\n					Arguments.of(localFactory.create(spec -> spec.bairro.set("" "")), ""bairro""),\n					Arguments.of(localFactory.create(spec -> spec.endereco.set("" "")), ""endereco""),\n					Arguments.of(localFactory.create(spec -> spec.numero.set("" "")), ""numero""),\n					Arguments.of(localFactory.create(spec -> spec.complemento.set("" "")), ""complemento"")\n			);\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForValidTest"")\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n		public void testValidInput(EnderecoCreateDto input) {\n			Validator<EnderecoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForBlackCheckTest"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber valores em branco nos campos que não são obrigatórios"")\n		public void testBlankCheck(EnderecoCreateDto input, String errorField) {\n			Validator<EnderecoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Este campo não pode estar em branco}"", errorField));\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o bairro inválido"")\n		public void testInvalidBairro() {\n			EnderecoCreateDto input = factory.create(spec -> spec.bairro.set(faker.lorem().characters(73)));\n\n			Validator<EnderecoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{bairro=Deve possuir no máximo 72 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o endereço inválido"")\n		public void testInvalidEndereco() {\n			EnderecoCreateDto input = factory.create(spec -> spec.endereco.set(faker.lorem().characters(251)));\n\n			Validator<EnderecoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{endereco=Deve possuir no máximo 250 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o número inválido"")\n		public void testInvalidNumero() {\n			EnderecoCreateDto input = factory.create(spec -> spec.numero.set(faker.lorem().characters(8)));\n\n			Validator<EnderecoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{numero=Deve possuir no máximo 7 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o complemento inválido"")\n		public void testInvalidComplemento() {\n			EnderecoCreateDto input = factory.create(spec -> spec.complemento.set(faker.lorem().characters(251)));\n\n			Validator<EnderecoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{complemento=Deve possuir no máximo 250 caractere(s)}"");\n		}\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static java.util.Collections.singletonList;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.ArgumentMatchers;\n\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.farmaceutico.validator.FarmaceuticoCreateDtoValidator;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.platform.validation.form.errors.FormError;\n\nclass FornecimentoComumCreateDtoValidatorTest {\n\n	private final FornecimentoCreateDtoFactory factory = FornecimentoCreateDtoFactory.getInstance();\n	private final FornecimentoReceitaCreateDtoFactory fornecimentoReceitaCreateDtoFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n	private FornecimentoComumCreateDtoValidator validator;\n	private CompradorCreateDtoValidator compradorCreateDtoValidator;\n	private EstabelecimentoCreateDtoValidator estabelecimentoCreateDtoValidator;\n	private FarmaceuticoCreateDtoValidator farmaceuticoCreateDtoValidator;\n	private FornecimentoReceitaComumCreateDtoValidator fornecimentoReceitaComumCreateDtoValidator;\n\n	@BeforeEach\n	void setUp() {\n		this.compradorCreateDtoValidator = mock(CompradorCreateDtoValidator.class);\n		this.estabelecimentoCreateDtoValidator = mock(EstabelecimentoCreateDtoValidator.class);\n		this.farmaceuticoCreateDtoValidator = mock(FarmaceuticoCreateDtoValidator.class);\n		this.fornecimentoReceitaComumCreateDtoValidator = mock(FornecimentoReceitaComumCreateDtoValidator.class);\n\n		this.validator = new FornecimentoComumCreateDtoValidator(\n				this.compradorCreateDtoValidator,\n				this.estabelecimentoCreateDtoValidator,\n				this.farmaceuticoCreateDtoValidator,\n				this.fornecimentoReceitaComumCreateDtoValidator\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido totalmente preenchido e chamar os validadores dos campos preenchidos"")\n	public void testValidInputAndCall() {\n		FornecimentoCreateDto input = this.factory.createRandom();\n		when(this.compradorCreateDtoValidator.validateOpcional(any())).thenReturn(Validator.of(input.getComprador()));\n		when(this.estabelecimentoCreateDtoValidator.validateOpcional(any())).thenReturn(Validator.of(input.getEstabelecimento()));\n		when(this.farmaceuticoCreateDtoValidator.validateOpcional(any())).thenReturn(Validator.of(input.getFarmaceutico()));\n\n		Validator<FornecimentoCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(compradorCreateDtoValidator).validateOpcional(input.getComprador());\n		verify(estabelecimentoCreateDtoValidator).validateOpcional(input.getEstabelecimento());\n		verify(farmaceuticoCreateDtoValidator).validateOpcional(input.getFarmaceutico());\n		ArgumentCaptor<FornecimentoReceitaCreateDto> captor = ArgumentCaptor.forClass(FornecimentoReceitaCreateDto.class);\n		verify(fornecimentoReceitaComumCreateDtoValidator, times(input.getReceitas().size())).validate(\n				captor.capture(),\n				ArgumentMatchers.<Validator<FornecimentoReceitaCreateDto>>any()\n		);\n		assertThat(captor.getAllValues()).containsExactlyElementsOf(input.getReceitas());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido parcialmente preenchido e só chamar os validadores dos campos preenchidos"")\n	public void testValidInputAndNotCall() {\n		FornecimentoCreateDto input = this.factory.create(spec -> {\n			spec.comprador.set(null);\n			spec.estabelecimento.set(null);\n			spec.farmaceutico.set(null);\n		});\n\n		Validator<FornecimentoCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verifyNoInteractions(compradorCreateDtoValidator, estabelecimentoCreateDtoValidator, farmaceuticoCreateDtoValidator);\n		ArgumentCaptor<FornecimentoReceitaCreateDto> captor = ArgumentCaptor.forClass(FornecimentoReceitaCreateDto.class);\n		verify(fornecimentoReceitaComumCreateDtoValidator, times(input.getReceitas().size())).validate(\n				captor.capture(),\n				ArgumentMatchers.<Validator<FornecimentoReceitaCreateDto>>any()\n		);\n		assertThat(captor.getAllValues()).containsExactlyElementsOf(input.getReceitas());\n	}\n\n	@Test\n	@DisplayName(""Deve incluir erros retornados pelos validadores auxiliares no resultado"")\n	public void testWriteAggregateValidatorErrors() {\n		FornecimentoReceitaCreateDto fornecimentoReceitaCreateDto = fornecimentoReceitaCreateDtoFactory.create(spec -> {\n			spec.receitaMedicamentoId.set(null);\n		});\n\n		FornecimentoCreateDto input = this.factory.create(spec -> {\n			spec.comprador.set(null);\n			spec.estabelecimento.set(null);\n			spec.farmaceutico.set(null);\n			spec.receitas.set(singletonList(fornecimentoReceitaCreateDto));\n		});\n\n		Validator<List<FornecimentoReceitaCreateDto>> validatorReceita = Validator.of(input.getReceitas());\n		validatorReceita.error(""{receitaMedicamentoId=Preenchimento obrigatório}"");\n\n		doAnswer(invocation -> {\n			FormError<List<FornecimentoReceitaCreateDto>> arg1 = invocation.getArgument(1);\n			arg1.error(validatorReceita.getErrors().toString());\n			return null;\n		}).when(fornecimentoReceitaComumCreateDtoValidator).validate(\n				ArgumentMatchers.<FornecimentoReceitaCreateDto>any(),\n				ArgumentMatchers.<Validator<FornecimentoReceitaCreateDto>>any()\n		);\n\n		Validator<FornecimentoCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{receitas=[{receitaMedicamentoId=Preenchimento obrigatório}]}"");\n		verifyNoInteractions(compradorCreateDtoValidator, estabelecimentoCreateDtoValidator, farmaceuticoCreateDtoValidator);\n		ArgumentCaptor<FornecimentoReceitaCreateDto> captor = ArgumentCaptor.forClass(FornecimentoReceitaCreateDto.class);\n		verify(fornecimentoReceitaComumCreateDtoValidator, times(input.getReceitas().size())).validate(\n				captor.capture(),\n				ArgumentMatchers.<Validator<FornecimentoReceitaCreateDto>>any()\n		);\n		assertThat(captor.getAllValues()).containsExactlyElementsOf(input.getReceitas());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto inválido no caso de receber um input inválido"")\n	public void testInvalidInput() {\n		FornecimentoCreateDto input = this.factory.create(spec -> spec.receitas.set(null));\n\n		Validator<FornecimentoCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{receitas=Preenchimento obrigatório}"");\n		verifyNoInteractions(compradorCreateDtoValidator, estabelecimentoCreateDtoValidator, farmaceuticoCreateDtoValidator, fornecimentoReceitaComumCreateDtoValidator);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.CompradorCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorCreateDto;\n\npublic class CompradorCreateDtoValidatorTest {\n	private final CompradorCreateDtoFactory factory = CompradorCreateDtoFactory.getInstance();\n	private CompradorCreateDtoValidator validator;\n	private EnderecoCreateDtoValidator enderecoCreateDtoValidator;\n	private final BridgeFaker faker = new BridgeFaker();\n\n	private static Stream<Arguments> inputsForInvalidForeignPhonesCheck() {\n		CompradorCreateDtoFactory localFactory = CompradorCreateDtoFactory.getInstance();\n		BridgeFaker localFaker = new BridgeFaker();\n\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {\n					spec.telefone.set(localFaker.lorem().characters(16));\n					spec.estrangeiro.set(true);\n					spec.cpfOrPassaporte.set(localFaker.lorem().characters(1, 20));\n					spec.endereco.set(null);\n				}), ""{telefone=Deve possuir no máximo 15 caractere(s)}""),\n				Arguments.of(localFactory.create(spec -> {\n					spec.telefone.set(localFaker.lorem().characters(3, 15));\n					spec.estrangeiro.set(true);\n					spec.cpfOrPassaporte.set(localFaker.lorem().characters(1, 20));\n					spec.endereco.set(null);\n				}), ""{telefone=Um ou mais caracteres informados não são permitidos para esse campo}"")\n		);\n	}\n\n	private static Stream<Arguments> inputsForInvalidNamesCheck() {\n		CompradorCreateDtoFactory localFactory = CompradorCreateDtoFactory.getInstance();\n		BridgeFaker localFaker = new BridgeFaker();\n\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> spec.nome.set(localFaker.lorem().characters(1, 4))), ""{nome=Deve possuir ao menos 5 caractere(s)}""),\n				Arguments.of(localFactory.create(spec -> spec.nome.set(localFaker.lorem().characters(71))), ""{nome=Deve possuir no máximo 70 caractere(s)}"")\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.enderecoCreateDtoValidator = mock(EnderecoCreateDtoValidator.class);\n		this.validator = new CompradorCreateDtoValidator(this.enderecoCreateDtoValidator);\n	}\n\n	@Nested\n	class ValidateFunction {\n\n		private static Stream<Arguments> provideInputsForNullCheckTestForBrazilians() {\n			CompradorCreateDtoFactory localFactory = CompradorCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> spec.nome.set(null)), ""nome""),\n					Arguments.of(localFactory.create(spec -> spec.estrangeiro.set(null)), ""estrangeiro""),\n					Arguments.of(localFactory.create(spec -> spec.cpfOrPassaporte.set(null)), ""cpfOrPassaporte""),\n					Arguments.of(localFactory.create(spec -> spec.telefone.set(null)), ""telefone""),\n					Arguments.of(localFactory.create(spec -> spec.endereco.set(null)), ""endereco"")\n			);\n		}\n\n		private static Stream<Arguments> provideInputsForNullCheckTestForForeigners() {\n			CompradorCreateDtoFactory localFactory = CompradorCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> {\n						spec.nome.set(null);\n						spec.estrangeiro.set(true);\n						spec.endereco.set(null);\n					}), ""nome""),\n					Arguments.of(localFactory.create(spec -> spec.estrangeiro.set(null)), ""estrangeiro""),\n					Arguments.of(localFactory.create(spec -> {\n						spec.cpfOrPassaporte.set(null);\n						spec.estrangeiro.set(true);\n						spec.endereco.set(null);\n					}), ""cpfOrPassaporte"")\n			);\n		}\n\n		private static Stream<Arguments> provideInputsForInvalidNamesCheck() {\n			return inputsForInvalidNamesCheck();\n		}\n\n		private static Stream<Arguments> provideInputsForInvalidForeignPhonesCheck() {\n			return inputsForInvalidForeignPhonesCheck();\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido para brasileiros"")\n		public void testValidInputForBrazilians() {\n			CompradorCreateDto input = factory.createRandom();\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido para estrangeiros"")\n		public void testValidInputForForeigners() {\n			CompradorCreateDto input = factory.create(spec -> {\n				spec.estrangeiro.set(true);\n				spec.cpfOrPassaporte.set(faker.lorem().characters(1, 20));\n				spec.endereco.set(null);\n			});\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForNullCheckTestForBrazilians"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios para brasileiros"")\n		public void testNullCheckForBrazilians(CompradorCreateDto input, String errorField) {\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForNullCheckTestForForeigners"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios para estrangeiros"")\n		public void testNullCheckForForeigners(CompradorCreateDto input, String errorField) {\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForInvalidNamesCheck"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o nome inválido"")\n		public void testInvalidNamesCheck(CompradorCreateDto input, String expectedError) {\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(expectedError);\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto inválido no caso de receber um input com um cpf inválido"")\n		public void testInvalidCpfCheck() {\n			CompradorCreateDto input = factory.create(spec -> {\n				spec.cpfOrPassaporte.set(faker.lorem().characters(11));\n			});\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{cpfOrPassaporte=CPF inválido}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto inválido no caso de receber um input com um telefone inválido para brasileiros"")\n		public void testInvalidPhoneCheckForBrazilians() {\n			CompradorCreateDto input = factory.create(spec -> {\n				spec.telefone.set(faker.lorem().characters(10, 11));\n			});\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{telefone=Campo inválido}"");\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForInvalidForeignPhonesCheck"")\n		@DisplayName(""Deve retornar um objeto inválido no caso de receber um input com um telefone inválido para estrangeiros"")\n		public void testInvalidPhoneCheckForForeigners(CompradorCreateDto input, String expectedError) {\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(expectedError);\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@Test\n		@DisplayName(""Deve chamar os validadores auxiliares de forma adequada para brasileiros"")\n		public void testCallAggregateValidatorsForBrazilians() {\n			CompradorCreateDto input = factory.createRandom();\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n			verify(enderecoCreateDtoValidator).validate(input.getEndereco());\n		}\n\n		@Test\n		@DisplayName(""Deve chamar os validadores auxiliares de forma adequada para estrangeiros"")\n		public void testCallAggregateValidatorsForForeigners() {\n			CompradorCreateDto input = factory.create(spec -> {\n				spec.estrangeiro.set(true);\n				spec.cpfOrPassaporte.set(faker.lorem().characters(1, 20));\n				spec.endereco.set(null);\n			});\n			when(enderecoCreateDtoValidator.validate(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto inválido no caso de receber um input com endereço para estrangeiros"")\n		public void testInvalidAddressNotEmptyForForeigners() {\n			CompradorCreateDto input = factory.create(spec -> spec.estrangeiro.set(true));\n\n			Validator<CompradorCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{endereco=Não deve ser preenchido}"");\n		}\n	}\n\n	@Nested\n	class ValidateOpcionalFunction {\n		private static Stream<Arguments> provideInputsForInvalidNamesCheck() {\n			return inputsForInvalidNamesCheck();\n		}\n\n		private static Stream<Arguments> provideInputsForInvalidForeignPhonesCheck() {\n			return inputsForInvalidForeignPhonesCheck();\n		}\n\n		private static Stream<Arguments> provideInputsForBlankCheck() {\n			CompradorCreateDtoFactory localFactory = CompradorCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> spec.nome.set("" "")), ""nome""),\n					Arguments.of(localFactory.create(spec -> spec.cpfOrPassaporte.set("" "")), ""cpfOrPassaporte""),\n					Arguments.of(localFactory.create(spec -> spec.telefone.set("" "")), ""telefone"")\n			);\n		}\n\n		private static Stream<Arguments> provideInputsForValidBrazilians() {\n			CompradorCreateDtoFactory localFactory = CompradorCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.createRandom()),\n					Arguments.of(localFactory.create(spec -> spec.nome.set(null))),\n					Arguments.of(localFactory.create(spec -> spec.cpfOrPassaporte.set(null))),\n					Arguments.of(localFactory.create(spec -> spec.telefone.set(null))),\n					Arguments.of(localFactory.create(spec -> spec.endereco.set(null)))\n			);\n		}\n\n		private static Stream<Arguments> provideInputsForValidForeigners() {\n			CompradorCreateDtoFactory localFactory = CompradorCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.create(spec -> {\n						spec.estrangeiro.set(true);\n						spec.cpfOrPassaporte.set(null);\n						spec.endereco.set(null);\n					})),\n					Arguments.of(localFactory.create(spec -> {\n						spec.estrangeiro.set(true);\n						spec.nome.set(null);\n						spec.endereco.set(null);\n					}))\n			);\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForValidBrazilians"")\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido para brasileiros"")\n		public void testValidInputForBrazilians(CompradorCreateDto input) {\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForValidForeigners"")\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido para estrangeiros"")\n		public void testValidInputForForeigners(CompradorCreateDto input) {\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input sem o indicador se eh estrangeiro ou brasileiro"")\n		public void testInvalidEstrangeiroBooleanCheck() {\n			CompradorCreateDto input = factory.create(spec -> spec.estrangeiro.set(null));\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{estrangeiro=Preenchimento obrigatório}"");\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForInvalidNamesCheck"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o nome inválido"")\n		public void testInvalidNamesCheck(CompradorCreateDto input, String expectedError) {\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(expectedError);\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForBlankCheck"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com campos em branco"")\n		public void testBlankCheck(CompradorCreateDto input, String errorField) {\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Este campo não pode estar em branco}"", errorField));\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto inválido no caso de receber um input com um cpf inválido"")\n		public void testInvalidCpfCheck() {\n			CompradorCreateDto input = factory.create(spec -> {\n				spec.cpfOrPassaporte.set(faker.lorem().characters(11));\n			});\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{cpfOrPassaporte=CPF inválido}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto inválido no caso de receber um input com um telefone inválido para brasileiros"")\n		public void testInvalidPhoneCheckForBrazilians() {\n			CompradorCreateDto input = factory.create(spec -> {\n				spec.telefone.set(faker.lorem().characters(10, 11));\n			});\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{telefone=Campo inválido}"");\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForInvalidForeignPhonesCheck"")\n		@DisplayName(""Deve retornar um objeto inválido no caso de receber um input com um telefone inválido para estrangeiros"")\n		public void testInvalidPhoneCheckForForeigners(CompradorCreateDto input, String expectedError) {\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(expectedError);\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto inválido no caso de receber um input com endereço para estrangeiros"")\n		public void testInvalidAddressNotEmptyForForeigners() {\n			CompradorCreateDto input = factory.create(spec -> spec.estrangeiro.set(true));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{endereco=Não deve ser preenchido}"");\n		}\n\n		@Test\n		@DisplayName(""Deve chamar os validadores auxiliares de forma adequada para brasileiros"")\n		public void testCallAggregateValidatorsForBrazilians() {\n			CompradorCreateDto input = factory.createRandom();\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n			verify(enderecoCreateDtoValidator).validateOpcional(input.getEndereco());\n		}\n\n		@Test\n		@DisplayName(""Deve chamar os validadores auxiliares de forma adequada para estrangeiros"")\n		public void testCallAggregateValidatorsForForeigners() {\n			CompradorCreateDto input = factory.create(spec -> {\n				spec.estrangeiro.set(true);\n				spec.cpfOrPassaporte.set(faker.lorem().characters(1, 20));\n				spec.endereco.set(null);\n			});\n			when(enderecoCreateDtoValidator.validateOpcional(input.getEndereco())).thenReturn(Validator.of(input.getEndereco()));\n\n			Validator<CompradorCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n			verifyNoInteractions(enderecoCreateDtoValidator);\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\n\npublic class FornecimentoReceitaComumCreateDtoValidatorTest {\n	private final FornecimentoReceitaCreateDtoFactory factory = FornecimentoReceitaCreateDtoFactory.getInstance();\n	private final BridgeFaker faker = new BridgeFaker();\n	private FornecimentoReceitaComumCreateDtoValidator validator;\n\n	private static Stream<Arguments> provideInputsForNullCheckTest() {\n		FornecimentoReceitaCreateDtoFactory localFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {\n							spec.receitaMedicamentoId.set(null);\n							spec.produto.set(null);\n							spec.formaFornecimento.set(null);\n							spec.lote.set(null);\n							spec.dataValidade.set(null);\n						}),\n						""receitaMedicamentoId""\n				)\n		);\n	}\n\n	private static Stream<Arguments> provideInputsForIncorrectlyFilledFieldsCheckTest() {\n		FornecimentoReceitaCreateDtoFactory localFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n		return Stream.of(""produto"", ""formaFornecimento"", ""lote"", ""dataValidade"")\n				.map(fieldName -> Arguments.of(localFactory.create(\n										spec -> {\n											spec.produto.set(fieldName.equals(""produto"") ? spec.produto.get() : null);\n											spec.formaFornecimento.set(fieldName.equals(""formaFornecimento"") ? spec.formaFornecimento.get() : null);\n											spec.lote.set(fieldName.equals(""lote"") ? spec.lote.get() : null);\n											spec.dataValidade.set(fieldName.equals(""dataValidade"") ? spec.dataValidade.get() : null);\n										}),\n								fieldName\n						)\n				);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.validator = new FornecimentoReceitaComumCreateDtoValidator();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		FornecimentoReceitaCreateDto input = this.factory.create(spec -> {\n			spec.produto.set(null);\n			spec.formaFornecimento.set(null);\n			spec.lote.set(null);\n			spec.dataValidade.set(null);\n		});\n\n		Validator<FornecimentoReceitaCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForNullCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testNullCheck(FornecimentoReceitaCreateDto input, String errorField) {\n		Validator<FornecimentoReceitaCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForIncorrectlyFilledFieldsCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber campos preenchidos quando devem ser nulos"")\n	public void testIncorrectlyFilledFields(FornecimentoReceitaCreateDto input, String errorField) {\n		Validator<FornecimentoReceitaCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Não deve ser preenchido}"", errorField));\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber uma observação inválida"")\n	public void testInvalidObservacaoCheck() {\n		FornecimentoReceitaCreateDto input = this.factory.create(spec -> {\n			spec.observacao.set(faker.lorem().characters(201));\n			spec.produto.set(null);\n			spec.formaFornecimento.set(null);\n			spec.lote.set(null);\n			spec.dataValidade.set(null);\n		});\n\n		Validator<FornecimentoReceitaCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{observacao=Deve possuir no máximo 200 caractere(s)}"");\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber uma observação em branco"")\n	public void testBlankObservacaoCheck() {\n		FornecimentoReceitaCreateDto input = this.factory.create(spec -> {\n			spec.observacao.set("" "");\n			spec.produto.set(null);\n			spec.formaFornecimento.set(null);\n			spec.lote.set(null);\n			spec.dataValidade.set(null);\n		});\n\n		Validator<FornecimentoReceitaCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{observacao=Este campo não pode estar em branco}"");\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Ampp;\n\n@Getter\n@AllArgsConstructor\npublic enum AmppRefEnum implements Ref<Ampp> {\n	AMPP1(1L, ""@brasil51501240324"", VmppRefEnum.VMPP1, ""1781700280444"",\n			""Addera D3 50.000 unidades internacionais cápsula (Cosmed Indústria de Cosméticos e Medicamentos S.A) x 4 cápsulas""),\n	AMPP2(2L, ""@brasil51225579313"", VmppRefEnum.VMPP2, ""1781700280381"",\n			""Addera D3 7.000 unidades internacionais cápsula (Cosmed Indústria de Cosméticos e Medicamentos S.A) x 4 cápsulas""),\n	AMPP3(3L, ""@brasil51408450840"", VmppRefEnum.VMPP3, ""1057305660178"",\n			""Alenia 12 microgramas + 400 microgramas cápsula para inalação (Biosintética Farmacêutica Ltda) x 60 cápsulas""),\n	AMPP4(4L, ""@brasil51763304193"", VmppRefEnum.VMPP4, ""1057305660070"",\n			""Alenia 6 microgramas + 200 microgramas cápsula para inalação (ACHÉ LABORATÓRIOS FARMACÊUTICOS S.A.) x 15 cápsulas""),\n	AMPP5(5L, ""@brasil51823326989"", VmppRefEnum.VMPP5, ""1057305660119"",\n			""Alenia 6 microgramas + 200 microgramas cápsula para inalação (ACHÉ LABORATÓRIOS FARMACÊUTICOS S.A.) x 60 cápsulas""),\n	AMPP6(6L, ""@brasil51826722402"", VmppRefEnum.VMPP6, ""1832600100035"", ""Alenthus XR 150 mg cápsula de liberação prolongada (Medley Farmacêutica Ltda) x 15 cápsulas""),\n	AMPP7(7L, ""@brasil51663631073"", VmppRefEnum.VMPP7, ""1832600100043"", ""Alenthus XR 150 mg cápsula de liberação prolongada (Medley Farmacêutica Ltda) x 30 cápsulas""),\n	AMPP8(8L, ""@brasil51199047770"", VmppRefEnum.VMPP8, ""1832600100019"", ""Alenthus XR 75 mg cápsula de liberação prolongada (Medley Farmacêutica Ltda) x 15 cápsulas""),\n	AMPP9(9L, ""@brasil51481274307"", VmppRefEnum.VMPP9, ""1832600100027"", ""Alenthus XR 75 mg cápsula de liberação prolongada (Medley Farmacêutica Ltda) x 30 cápsulas""),\n	AMPP10(10L, ""@brasil51809228259"", VmppRefEnum.VMPP10, ""1781708260043"", ""Alivium 400 mg cápsula (Cosmed Industria De Cosmeticos E Medicamentos S.A.) x 10 cápsulas"");\n\n	private final Long id;\n	private final String codigoObm;\n	private final VmppRefEnum vmpp;\n	private final String registroSanitario;\n	private final String nome;\n\n	@Override\n	public Class<Ampp> getClazz() {\n		return Ampp.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.OrigemProduto;\n\n@Getter\n@AllArgsConstructor\npublic enum OrigemProdutoRefEnum implements Ref<OrigemProduto> {\n	OBM(1L, ""OBM""),\n	REGISTRO_MANUAL(2L, ""REGISTRO MANUAL"");\n\n	private final Long id;\n	private final String nome;\n\n	@Override\n	public Class<OrigemProduto> getClazz() {\n		return OrigemProduto.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.UnidadeMedida;\n\n@Getter\n@AllArgsConstructor\npublic enum UnidadeMedidaRefEnum implements Ref<UnidadeMedida> {\n	CAPSULA(1L, ""@brasil00716538240"", ""Cápsula""),\n	CENTIMETRO(2L, ""@brasil00717907158"", ""Centímetro""),\n	GRAMA(3L, ""@brasil00718250440"", ""Grama""),\n	HORA(4L, ""@brasil00717530731"", ""Hora""),\n	UNIDADE_INTERNACIONAL(5L, ""@brasil00712902336"", ""Unidade Internacional""),\n	QUILOGRAMA(6L, ""@brasil00711919487"", ""Quilograma""),\n	LITRO(7L, ""@brasil00710890429"", ""Litro""),\n	METRO(8L, ""@brasil00718693685"", ""Metro""),\n	MILIGRAMA(9L, ""@brasil00710797144"", ""Miligrama""),\n	MICROGRAMA(10L, ""@brasil00717904664"", ""Micrograma"");\n\n	private final Long id;\n	private final String codigoObm;\n	private final String descricao;\n\n	@Override\n	public Class<UnidadeMedida> getClazz() {\n		return UnidadeMedida.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FormaFornecimento;\n\n@Getter\n@AllArgsConstructor\npublic enum FormaFornecimentoRefEnum implements Ref<FormaFornecimento> {\n	UNIDADE(1L, ""UNIDADE""),\n	EMBALAGEM_COMPLETA(2L, ""EMBALAGEM COMPLETA"");\n\n	private final Long id;\n	private final String descricao;\n\n	@Override\n	public Class<FormaFornecimento> getClazz() {\n		return FormaFornecimento.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.enums;\n\nimport java.math.BigDecimal;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Vmpp;\n\n@Getter\n@AllArgsConstructor\npublic enum VmppRefEnum implements Ref<Vmpp> {\n	VMPP1(1L, ""@brasil31814134191"", new BigDecimal(""4.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP2(2L, ""@brasil31965935500"", new BigDecimal(""4.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP3(3L, ""@brasil31616258224"", new BigDecimal(""60.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP4(4L, ""@brasil31384975376"", new BigDecimal(""15.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP5(5L, ""@brasil31217998460"", new BigDecimal(""60.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP6(6L, ""@brasil31925386320"", new BigDecimal(""15.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP7(7L, ""@brasil31722233957"", new BigDecimal(""30.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP8(8L, ""@brasil31294384207"", new BigDecimal(""15.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP9(9L, ""@brasil31739716017"", new BigDecimal(""30.000""), UnidadeMedidaRefEnum.CAPSULA),\n	VMPP10(10L, ""@brasil31036742486"", new BigDecimal(""10.000""), UnidadeMedidaRefEnum.CAPSULA);\n\n	private final Long id;\n	private final String codigoObm;\n	private final BigDecimal quantidadeEmbalagem;\n	private final UnidadeMedidaRefEnum unidadeMedida;\n\n	@Override\n	public Class<Vmpp> getClazz() {\n		return Vmpp.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.EnderecoDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.localidade.database.MunicipioDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoDto;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class EnderecoDtoFactory extends DataFactory<EnderecoDto, Spec> {\n\n	@Autowired\n	private final MunicipioDtoFactory municipioDtoFactory = MunicipioDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final EnderecoDtoFactory instance = new EnderecoDtoFactory();\n\n	@Override\n	protected EnderecoDto create(Spec spec) {\n		return new EnderecoDto(\n				spec.municipio.get(),\n				spec.bairro.get(),\n				spec.endereco.get(),\n				spec.numero.get(),\n				spec.complemento.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.municipio.setDefault(municipioDtoFactory::createRandom);\n		spec.bairro.setDefault(() -> faker.address().firstName());\n		spec.endereco.setDefault(() -> faker.address().streetAddress());\n		spec.numero.setDefault(() -> faker.address().buildingNumber());\n		spec.complemento.setDefault(() -> faker.address().secondaryAddress());\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<MunicipioDto> municipio = new SpecValue<>();\n		public final SpecValue<String> bairro = new SpecValue<>();\n		public final SpecValue<String> endereco = new SpecValue<>();\n		public final SpecValue<String> numero = new SpecValue<>();\n		public final SpecValue<String> complemento = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.UnidadeMedidaRefEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.UnidadeMedida;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class UnidadeMedidaFactory extends DomainFactory<UnidadeMedida, UnidadeMedidaRefEnum> {\n\n	@Getter(lazy = true)\n	private static final UnidadeMedidaFactory instance = new UnidadeMedidaFactory();\n\n	public UnidadeMedidaFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected UnidadeMedidaRefEnum[] getAllRefs() {\n		return UnidadeMedidaRefEnum.values();\n	}\n\n	@Override\n	protected UnidadeMedida createInMemory(UnidadeMedidaRefEnum ref) {\n		UnidadeMedida unidadeMedida = new UnidadeMedida();\n\n		unidadeMedida.setId(ref.getId());\n		unidadeMedida.setCodigoObm(ref.getCodigoObm());\n		unidadeMedida.setDescricao(ref.getDescricao());\n\n		return unidadeMedida;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.UnidadeMedidaDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.OrigemProdutoEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ProdutoDtoFactory extends DataFactory<ProdutoDto, ProdutoDtoFactory.Spec> {\n\n	@Autowired\n	private final UnidadeMedidaDtoFactory unidadeMedidaDtoFactory = UnidadeMedidaDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final ProdutoDtoFactory instance = new ProdutoDtoFactory();\n\n	@Override\n	protected ProdutoDto create(Spec spec) {\n		return new ProdutoDto(\n				spec.id.get(),\n				spec.codigoObm.get(),\n				spec.registroSanitario.get(),\n				spec.nome.get(),\n				spec.quantidadeEmbalagem.get(),\n				spec.origem.get(),\n				spec.unidadeMedida.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.id.setDefault(() -> faker.number().randomNumber());\n		spec.codigoObm.setDefault(() -> faker.lorem().characters(10));\n		spec.registroSanitario.setDefault(() -> faker.lorem().characters(10));\n		spec.nome.setDefault(faker.commerce()::productName);\n		spec.quantidadeEmbalagem.setDefault(() -> (long) faker.number().numberBetween(1, 1000));\n		spec.origem.setDefault(() -> faker.options().option(OrigemProdutoEnum.class));\n		spec.unidadeMedida.setDefault(unidadeMedidaDtoFactory::createRandom);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> id = new SpecValue<>();\n		public final SpecValue<String> codigoObm = new SpecValue<>();\n		public final SpecValue<String> registroSanitario = new SpecValue<>();\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<Long> quantidadeEmbalagem = new SpecValue<>();\n		public final SpecValue<OrigemProdutoEnum> origem = new SpecValue<>();\n		public final SpecValue<UnidadeMedidaDto> unidadeMedida = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.EnderecoCreateDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.localidade.database.MunicipioDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class EnderecoCreateDtoFactory extends DataFactory<EnderecoCreateDto, Spec> {\n\n	@Autowired\n	private final MunicipioDtoFactory municipioDtoFactory = MunicipioDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final EnderecoCreateDtoFactory instance = new EnderecoCreateDtoFactory();\n\n	@Override\n	protected EnderecoCreateDto create(Spec spec) {\n		return new EnderecoCreateDto(\n				spec.uf.get(),\n				spec.nomeMunicipio.get(),\n				spec.bairro.get(),\n				spec.endereco.get(),\n				spec.numero.get(),\n				spec.complemento.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		MunicipioDto municipioDto = municipioDtoFactory.createRandom();\n		spec.uf.setDefault(municipioDto::getUf);\n		spec.nomeMunicipio.setDefault(municipioDto::getNome);\n		spec.bairro.setDefault(() -> faker.address().firstName());\n		spec.endereco.setDefault(() -> faker.address().streetAddress());\n		spec.numero.setDefault(() -> faker.address().buildingNumber());\n		spec.complemento.setDefault(() -> faker.address().secondaryAddress());\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<UfEnum> uf = new SpecValue<>();\n		public final SpecValue<String> nomeMunicipio = new SpecValue<>();\n		public final SpecValue<String> bairro = new SpecValue<>();\n		public final SpecValue<String> endereco = new SpecValue<>();\n		public final SpecValue<String> numero = new SpecValue<>();\n		public final SpecValue<String> complemento = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.ProdutoCreateDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.UnidadeMedidaRefEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ProdutoCreateDtoFactory extends DataFactory<ProdutoCreateDto, Spec> {\n	@Getter(lazy = true)\n	private static final ProdutoCreateDtoFactory instance = new ProdutoCreateDtoFactory();\n\n	@Override protected ProdutoCreateDto create(Spec spec) {\n		ProdutoCreateDto produto = new ProdutoCreateDto();\n\n		produto.setCodigoObm(spec.codigoObm.get());\n		produto.setRegistroSanitario(spec.registroSanitario.get());\n		produto.setNome(spec.nome.get());\n		produto.setQuantidadeEmbalagem(spec.quantidadeEmbalagem.get());\n		produto.setProdutoNaoEncontrado(spec.produtoNaoEncontrado.get());\n		produto.setUnidadeMedidaId(spec.unidadeMedidaId.get());\n\n		return produto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.codigoObm.setDefault(() -> String.format(""@brasil%s"", faker.number().digits(12)));\n		spec.registroSanitario.setDefault(() -> faker.number().digits(13));\n		spec.nome.setDefault(faker.lorem()::sentence);\n		spec.quantidadeEmbalagem.setDefault(() -> 10L);\n		spec.produtoNaoEncontrado.setDefault(() -> false);\n		spec.unidadeMedidaId.setDefault(() -> faker.options().option(UnidadeMedidaRefEnum.class).getId());\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> codigoObm = new SpecValue<>();\n		public final SpecValue<String> registroSanitario = new SpecValue<>();\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<Long> quantidadeEmbalagem = new SpecValue<>();\n		public final SpecValue<Boolean> produtoNaoEncontrado = new SpecValue<>();\n		public final SpecValue<Long> unidadeMedidaId = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDateTime;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.documento.common.database.DocumentoFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.database.TipoDocumentoFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoRefEnum;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.farmaceutico.database.FarmaceuticoFactory;\nimport br.ufsc.bridge.pecassinador.farmaceutico.model.Farmaceutico;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Comprador;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Estabelecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Fornecimento;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FornecimentoFactory extends DataFactory<Fornecimento, Spec> {\n\n	@Getter(lazy = true)\n	private static final FornecimentoFactory instance = new FornecimentoFactory();\n	@Autowired\n	private final DocumentoFactory documentoFactory = DocumentoFactory.getInstance();\n	@Autowired\n	private final TipoDocumentoFactory tipoDocumentoFactory = TipoDocumentoFactory.getInstance();\n	@Autowired\n	private final FarmaceuticoFactory farmaceuticoFactory = FarmaceuticoFactory.getInstance();\n	@Autowired\n	private final EstabelecimentoFactory estabelecimentoFactory = EstabelecimentoFactory.getInstance();\n	@Autowired\n	private final CompradorFactory compradorFactory = CompradorFactory.getInstance();\n\n	@Autowired\n	public FornecimentoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Fornecimento create(Spec spec) {\n		Fornecimento fornecimento = new Fornecimento();\n\n		fornecimento.setResponsavel(spec.responsavel.get());\n		fornecimento.setDataCriacao(spec.dataCriacao.get());\n		fornecimento.setComprador(spec.comprador.get());\n		fornecimento.setEstabelecimento(spec.estabelecimento.get());\n		fornecimento.setDocumento(spec.documento.get());\n\n		return fornecimento;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.responsavel.setDefault(() -> this.farmaceuticoFactory.createRandom());\n		spec.dataCriacao.setDefault(LocalDateTime::now);\n		spec.comprador.setDefault(() -> this.compradorFactory.createRandom());\n		spec.estabelecimento.setDefault(() -> this.estabelecimentoFactory.createRandom());\n		spec.documento.setDefault(() -> this.documentoFactory.create(documentoSpec -> {\n			documentoSpec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n		}));\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<LocalDateTime> dataCriacao = new SpecValue<>();\n		public SpecValue<Farmaceutico> responsavel = new SpecValue<>();\n		public SpecValue<Comprador> comprador = new SpecValue<>();\n		public SpecValue<Estabelecimento> estabelecimento = new SpecValue<>();\n		public SpecValue<Documento> documento = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.EstabelecimentoDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class EstabelecimentoDtoFactory extends DataFactory<EstabelecimentoDto, Spec> {\n\n	@Autowired\n	private final EnderecoDtoFactory enderecoDtoFactory = EnderecoDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final EstabelecimentoDtoFactory instance = new EstabelecimentoDtoFactory();\n\n	@Override\n	protected EstabelecimentoDto create(Spec spec) {\n		return new EstabelecimentoDto(\n				spec.nome.get(),\n				spec.cnpj.get(),\n				spec.cnes.get(),\n				spec.endereco.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.nome.setDefault(faker.lorem()::sentence);\n		spec.cnpj.setDefault(faker::cnpj);\n		spec.endereco.setDefault(enderecoDtoFactory::createRandom);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> cnpj = new SpecValue<>();\n		public final SpecValue<String> cnes = new SpecValue<>();\n		public final SpecValue<EnderecoDto> endereco = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.VmppRefEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Vmpp;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class VmppFactory extends DomainFactory<Vmpp, VmppRefEnum> {\n\n	@Getter(lazy = true)\n	private static final VmppFactory instance = new VmppFactory();\n	private final UnidadeMedidaFactory unidadeMedidaFactory = UnidadeMedidaFactory.getInstance();\n\n	public VmppFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected VmppRefEnum[] getAllRefs() {\n		return VmppRefEnum.values();\n	}\n\n	@Override\n	protected Vmpp createInMemory(VmppRefEnum ref) {\n		Vmpp vmpp = new Vmpp();\n\n		vmpp.setId(ref.getId());\n		vmpp.setCodigoObm(ref.getCodigoObm());\n		vmpp.setQuantidadeEmbalagem(ref.getQuantidadeEmbalagem());\n		vmpp.setUnidadeMedida(unidadeMedidaFactory.create(ref.getUnidadeMedida()));\n\n		return vmpp;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDate;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.database.ReceitaMedicamentoDtoFactory;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FornecimentoReceitaDtoFactory extends DataFactory<FornecimentoReceitaDto, Spec> {\n\n	@Autowired\n	private final ReceitaMedicamentoDtoFactory receitaMedicamentoDtoFactory = ReceitaMedicamentoDtoFactory.getInstance();\n\n	@Autowired\n	private final ProdutoDtoFactory produtoDtoFactory = ProdutoDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final FornecimentoReceitaDtoFactory instance = new FornecimentoReceitaDtoFactory();\n\n	@Override\n	protected FornecimentoReceitaDto create(Spec spec) {\n		return new FornecimentoReceitaDto(\n				spec.receitaMedicamento.get(),\n				spec.quantidadeFornecida.get(),\n				spec.observacao.get(),\n				spec.produto.get(),\n				spec.formaFornecimento.get(),\n				spec.totalFornecido.get(),\n				spec.lote.get(),\n				spec.dataValidade.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.receitaMedicamento.setDefault(receitaMedicamentoDtoFactory::createRandom);\n		spec.quantidadeFornecida.setDefault(() -> (long) faker.number().numberBetween(1, 100));\n		spec.observacao.setDefault(faker.lorem()::sentence);\n		spec.produto.setDefault(produtoDtoFactory::createRandom);\n		spec.formaFornecimento.setDefault(() -> faker.options().option(FormaFornecimentoEnum.class));\n		spec.totalFornecido.setDefault(() -> (long) faker.number().numberBetween(1, 10));\n		spec.lote.setDefault(() -> faker.lorem().characters(10));\n		spec.dataValidade.setDefault(() -> LocalDate.now().plusDays(faker.number().numberBetween(1, 365)));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<ReceitaMedicamentoDto> receitaMedicamento = new SpecValue<>();\n		public final SpecValue<Long> quantidadeFornecida = new SpecValue<>();\n		public final SpecValue<String> observacao = new SpecValue<>();\n		public final SpecValue<ProdutoDto> produto = new SpecValue<>();\n		public final SpecValue<FormaFornecimentoEnum> formaFornecimento = new SpecValue<>();\n		public final SpecValue<Long> totalFornecido = new SpecValue<>();\n		public final SpecValue<String> lote = new SpecValue<>();\n		public final SpecValue<LocalDate> dataValidade = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.EstabelecimentoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Estabelecimento;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class EstabelecimentoFactory extends DataFactory<Estabelecimento, Spec> {\n\n	@Autowired\n	private final EnderecoFactory enderecoFactory = EnderecoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final EstabelecimentoFactory instance = new EstabelecimentoFactory();\n\n	@Autowired\n	public EstabelecimentoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Estabelecimento create(Spec spec) {\n		Estabelecimento estabelecimento = new Estabelecimento();\n\n		estabelecimento.setNome(spec.nome.get());\n		estabelecimento.setCnes(spec.cnpj.get());\n		estabelecimento.setCnes(spec.cnes.get());\n		estabelecimento.setEndereco(spec.endereco.get());\n\n		return estabelecimento;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.nome.setDefault(faker.lorem()::sentence);\n		spec.cnpj.setDefault(faker::cnpj);\n		spec.endereco.setDefault(() -> this.enderecoFactory.createRandom());\n\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> cnpj = new SpecValue<>();\n		public final SpecValue<String> cnes = new SpecValue<>();\n		public final SpecValue<Endereco> endereco = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.ProdutoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.OrigemProdutoRefEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.OrigemProduto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Produto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.UnidadeMedida;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ProdutoFactory extends DataFactory<Produto, Spec> {\n\n	private final OrigemProdutoFactory origemProdutoFactory = OrigemProdutoFactory.getInstance();\n\n	private final UnidadeMedidaFactory unidadeMedidaFactory = UnidadeMedidaFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final ProdutoFactory instance = new ProdutoFactory();\n\n	@Autowired\n	public ProdutoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Produto create(Spec spec) {\n		Produto produto = new Produto();\n\n		produto.setCodigoObm(spec.codigoObm.get());\n		produto.setRegistroSanitario(spec.registroSanitario.get());\n		produto.setNome(spec.nome.get());\n		produto.setQuantidadeEmbalagem(spec.quantidadeEmbalagem.get());\n		produto.setOrigem(spec.origem.get());\n		produto.setUnidadeMedida(spec.unidadeMedida.get());\n\n		return produto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.codigoObm.setDefault(() -> String.format(""@brasil%s"", faker.number().digits(11)));\n		spec.registroSanitario.setDefault(() -> faker.number().digits(13));\n		spec.nome.setDefault(faker.lorem()::sentence);\n		spec.quantidadeEmbalagem.setDefault(() -> 10L);\n		spec.origem.setDefault(() -> origemProdutoFactory.create(OrigemProdutoRefEnum.OBM));\n		spec.unidadeMedida.setDefault(unidadeMedidaFactory::createRandom);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> codigoObm = new SpecValue<>();\n		public SpecValue<String> registroSanitario = new SpecValue<>();\n		public SpecValue<String> nome = new SpecValue<>();\n		public SpecValue<Long> quantidadeEmbalagem = new SpecValue<>();\n		public SpecValue<OrigemProduto> origem = new SpecValue<>();\n		public SpecValue<UnidadeMedida> unidadeMedida = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoCreateDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.util.List;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.farmaceutico.database.FarmaceuticoCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoCreateDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FornecimentoCreateDtoFactory extends DataFactory<FornecimentoCreateDto, Spec> {\n\n	@Autowired\n	private final CompradorCreateDtoFactory compradorDtoFactory = CompradorCreateDtoFactory.getInstance();\n\n	@Autowired\n	private final EstabelecimentoCreateDtoFactory estabelecimentoDtoFactory = EstabelecimentoCreateDtoFactory.getInstance();\n\n	@Autowired\n	private final FarmaceuticoCreateDtoFactory farmaceuticoCreateDtoFactory = FarmaceuticoCreateDtoFactory.getInstance();\n\n	@Autowired\n	private final FornecimentoReceitaCreateDtoFactory fornecimentoReceitaCreateDtoFactory = FornecimentoReceitaCreateDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final FornecimentoCreateDtoFactory instance = new FornecimentoCreateDtoFactory();\n\n	@Override\n	protected FornecimentoCreateDto create(Spec spec) {\n		FornecimentoCreateDto dto = new FornecimentoCreateDto();\n		dto.setComprador(spec.comprador.get());\n		dto.setEstabelecimento(spec.estabelecimento.get());\n		dto.setFarmaceutico(spec.farmaceutico.get());\n		dto.setReceitas(spec.receitas.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.comprador.setDefault(compradorDtoFactory::createRandom);\n		spec.estabelecimento.setDefault(estabelecimentoDtoFactory::createRandom);\n		spec.farmaceutico.setDefault(farmaceuticoCreateDtoFactory::createRandom);\n		spec.receitas.setDefault(() -> fornecimentoReceitaCreateDtoFactory.createRandom(3));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<CompradorCreateDto> comprador = new SpecValue<>();\n		public final SpecValue<EstabelecimentoCreateDto> estabelecimento = new SpecValue<>();\n		public final SpecValue<FarmaceuticoCreateDto> farmaceutico = new SpecValue<>();\n		public final SpecValue<List<FornecimentoReceitaCreateDto>> receitas = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoRefEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FormaFornecimento;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FormaFornecimentoFactory extends DomainFactory<FormaFornecimento, FormaFornecimentoRefEnum> {\n\n	@Getter(lazy = true)\n	private static final FormaFornecimentoFactory instance = new FormaFornecimentoFactory();\n\n	@Autowired\n	public FormaFornecimentoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected FormaFornecimentoRefEnum[] getAllRefs() {\n		return FormaFornecimentoRefEnum.values();\n	}\n\n	@Override\n	protected FormaFornecimento createInMemory(FormaFornecimentoRefEnum ref) {\n		FormaFornecimento formaFornecimento = new FormaFornecimento();\n\n		formaFornecimento.setId(ref.getId());\n		formaFornecimento.setDescricao(ref.getDescricao());\n\n		return formaFornecimento;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.CompradorDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class CompradorDtoFactory extends DataFactory<CompradorDto, Spec> {\n\n	@Autowired\n	private final EnderecoDtoFactory enderecoDtoFactory = EnderecoDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final CompradorDtoFactory instance = new CompradorDtoFactory();\n\n	@Override\n	protected CompradorDto create(Spec spec) {\n		return new CompradorDto(\n				spec.nome.get(),\n				spec.cpf.get(),\n				spec.passaporte.get(),\n				spec.telefone.get(),\n				spec.estrangeiro.get(),\n				spec.endereco.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.nome.setDefault(faker.name()::fullName);\n		spec.cpf.setDefault(faker::cpf);\n		spec.telefone.setDefault(faker::telefone);\n		spec.estrangeiro.setDefault(() -> false);\n		spec.endereco.setDefault(enderecoDtoFactory::createRandom);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> cpf = new SpecValue<>();\n		public final SpecValue<String> passaporte = new SpecValue<>();\n		public final SpecValue<String> telefone = new SpecValue<>();\n		public final SpecValue<Boolean> estrangeiro = new SpecValue<>();\n		public final SpecValue<EnderecoDto> endereco = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.CompradorFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Comprador;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class CompradorFactory extends DataFactory<Comprador, Spec> {\n\n	@Autowired\n	private final EnderecoFactory enderecoFactory = EnderecoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final CompradorFactory instance = new CompradorFactory();\n\n	@Autowired\n	public CompradorFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Comprador create(Spec spec) {\n		Comprador comprador = new Comprador();\n\n		comprador.setNome(spec.nome.get());\n		comprador.setCpf(spec.cpf.get());\n		comprador.setPassaporte(spec.passaporte.get());\n		comprador.setTelefone(spec.telefone.get());\n		comprador.setEstrangeiro(spec.estrangeiro.get());\n		comprador.setEndereco(spec.endereco.get());\n\n		return comprador;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.nome.setDefault(faker.lorem()::word);\n		spec.cpf.setDefault(faker::cpf);\n		spec.passaporte.setDefault(faker.number().digits(20)::toString);\n		spec.telefone.setDefault(() -> ""47979843357"");\n		spec.estrangeiro.setDefault(() -> false);\n		spec.endereco.setDefault(() -> this.enderecoFactory.createRandom());\n\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> cpf = new SpecValue<>();\n		public final SpecValue<String> passaporte = new SpecValue<>();\n		public final SpecValue<String> telefone = new SpecValue<>();\n		public final SpecValue<Boolean> estrangeiro = new SpecValue<>();\n		public final SpecValue<Endereco> endereco = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.OrigemProdutoRefEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.OrigemProduto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class OrigemProdutoFactory extends DomainFactory<OrigemProduto, OrigemProdutoRefEnum> {\n\n	@Getter(lazy = true)\n	private static final OrigemProdutoFactory instance = new OrigemProdutoFactory();\n\n	@Autowired\n	public OrigemProdutoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected OrigemProdutoRefEnum[] getAllRefs() {\n		return OrigemProdutoRefEnum.values();\n	}\n\n	@Override\n	protected OrigemProduto createInMemory(OrigemProdutoRefEnum ref) {\n		OrigemProduto origem = new OrigemProduto();\n\n		origem.setId(ref.getId());\n		origem.setNome(ref.getNome());\n\n		return origem;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.farmaceutico.database.FarmaceuticoDtoFactory;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FornecimentoDtoFactory extends DataFactory<FornecimentoDto, Spec> {\n\n	@Autowired\n	CompradorDtoFactory compradorDtoFactory = CompradorDtoFactory.getInstance();\n\n	@Autowired\n	FarmaceuticoDtoFactory farmaceuticoDtoFactory = FarmaceuticoDtoFactory.getInstance();\n\n	@Autowired\n	EstabelecimentoDtoFactory estabelecimentoDtoFactory = EstabelecimentoDtoFactory.getInstance();\n\n	@Autowired\n	FornecimentoReceitaDtoFactory fornecimentoReceitaDtoFactory = FornecimentoReceitaDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final FornecimentoDtoFactory instance = new FornecimentoDtoFactory();\n\n	@Override\n	protected FornecimentoDto create(Spec spec) {\n		return new FornecimentoDto(\n				spec.id.get(),\n				spec.nomeResponsavel.get(),\n				spec.crfResponsavel.get(),\n				spec.ufConselhoClasseResponsavel.get(),\n				spec.comprador.get(),\n				spec.farmaceuticoResponsavel.get(),\n				spec.estabelecimento.get(),\n				spec.dataCriacao.get(),\n				spec.receitasFornecidas.get()\n		);\n	}\n\n	@Override\n	public Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.id.setDefault(faker.number()::randomNumber);\n		spec.nomeResponsavel.setDefault(faker.name()::fullName);\n		spec.crfResponsavel.setDefault(() -> faker.number().digits(10));\n		spec.ufConselhoClasseResponsavel.setDefault(() -> faker.options().option(UfEnum.class));\n		spec.comprador.setDefault(compradorDtoFactory::createRandom);\n		spec.farmaceuticoResponsavel.setDefault(farmaceuticoDtoFactory::createRandom);\n		spec.estabelecimento.setDefault(estabelecimentoDtoFactory::createRandom);\n		spec.dataCriacao.setDefault(LocalDateTime::now);\n		spec.receitasFornecidas.setDefault(() -> fornecimentoReceitaDtoFactory.createRandom(3));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> id = new SpecValue<>();\n		public final SpecValue<String> nomeResponsavel = new SpecValue<>();\n		public final SpecValue<String> crfResponsavel = new SpecValue<>();\n		public final SpecValue<UfEnum> ufConselhoClasseResponsavel = new SpecValue<>();\n		public final SpecValue<CompradorDto> comprador = new SpecValue<>();\n		public final SpecValue<FarmaceuticoDto> farmaceuticoResponsavel = new SpecValue<>();\n		public final SpecValue<EstabelecimentoDto> estabelecimento = new SpecValue<>();\n		public final SpecValue<LocalDateTime> dataCriacao = new SpecValue<>();\n		public final SpecValue<List<FornecimentoReceitaDto>> receitasFornecidas = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.UnidadeMedidaDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class UnidadeMedidaDtoFactory extends DataFactory<UnidadeMedidaDto, UnidadeMedidaDtoFactory.Spec> {\n\n	@Getter(lazy = true)\n	private static final UnidadeMedidaDtoFactory instance = new UnidadeMedidaDtoFactory();\n\n	@Override\n	protected UnidadeMedidaDto create(Spec spec) {\n		return new UnidadeMedidaDto(\n				spec.id.get(),\n				spec.descricao.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.id.setDefault(faker.number()::randomNumber);\n		spec.descricao.setDefault(faker.lorem()::sentence);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> id = new SpecValue<>();\n		public final SpecValue<String> descricao = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaCreateDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDate;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FornecimentoReceitaCreateDtoFactory extends DataFactory<FornecimentoReceitaCreateDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final FornecimentoReceitaCreateDtoFactory instance = new FornecimentoReceitaCreateDtoFactory();\n\n	@Autowired\n	private final ProdutoCreateDtoFactory produtoCreateDtoFactory = ProdutoCreateDtoFactory.getInstance();\n\n	@Override\n	protected FornecimentoReceitaCreateDto create(Spec spec) {\n		FornecimentoReceitaCreateDto dto = new FornecimentoReceitaCreateDto();\n		dto.setReceitaMedicamentoId(spec.receitaMedicamentoId.get());\n		dto.setQuantidadeFornecida(spec.quantidadeFornecida.get());\n		dto.setObservacao(spec.observacao.get());\n		dto.setProduto(spec.produto.get());\n		dto.setFormaFornecimento(spec.formaFornecimento.get());\n		dto.setLote(spec.lote.get());\n		dto.setDataValidade(spec.dataValidade.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		ProdutoCreateDto produtoCreateDto = produtoCreateDtoFactory.createRandom();\n		long quantidadeFornecida = faker.number().numberBetween(1, 10);\n		spec.receitaMedicamentoId.setDefault(faker.number()::randomNumber);\n		spec.quantidadeFornecida.setDefault(() -> quantidadeFornecida);\n		spec.observacao.setDefault(faker.lorem()::sentence);\n		spec.produto.setDefault(() -> produtoCreateDto);\n		spec.formaFornecimento.setDefault(() -> faker.options().option(FormaFornecimentoEnum.class));\n		spec.lote.setDefault(() -> faker.number().digits(10));\n		spec.dataValidade.setDefault(() -> LocalDate.now().plusMonths(1L));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> receitaMedicamentoId = new SpecValue<>();\n		public final SpecValue<Long> quantidadeFornecida = new SpecValue<>();\n		public final SpecValue<String> observacao = new SpecValue<>();\n		public final SpecValue<ProdutoCreateDto> produto = new SpecValue<>();\n		public final SpecValue<FormaFornecimentoEnum> formaFornecimento = new SpecValue<>();\n		public final SpecValue<String> lote = new SpecValue<>();\n		public final SpecValue<LocalDate> dataValidade = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.EnderecoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.localidade.database.MunicipioFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class EnderecoFactory extends DataFactory<Endereco, Spec> {\n\n	@Autowired\n	private final MunicipioFactory municipioFactory = MunicipioFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final EnderecoFactory instance = new EnderecoFactory();\n\n	@Autowired\n	public EnderecoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Endereco create(Spec spec) {\n		Endereco endereco = new Endereco();\n\n		endereco.setMunicipio(spec.municipio.get());\n		endereco.setBairro(spec.bairro.get());\n		endereco.setEndereco(spec.endereco.get());\n		endereco.setNumero(spec.numero.get());\n		endereco.setComplemento(spec.complemento.get());\n\n		return endereco;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.municipio.setDefault(municipioFactory::createRandom);\n		spec.bairro.setDefault(faker.lorem()::word);\n		spec.endereco.setDefault(faker.lorem()::word);\n		spec.numero.setDefault(faker.number().digits(3)::toString);\n		spec.complemento.setDefault(faker.lorem()::word);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Municipio> municipio = new SpecValue<>();\n		public final SpecValue<String> bairro = new SpecValue<>();\n		public final SpecValue<String> endereco = new SpecValue<>();\n		public final SpecValue<String> numero = new SpecValue<>();\n		public final SpecValue<String> complemento = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.AmppRefEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Ampp;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class AmppFactory extends DomainFactory<Ampp, AmppRefEnum> {\n\n	@Getter(lazy = true)\n	private static final AmppFactory instance = new AmppFactory();\n	private final VmppFactory vmppFactory = VmppFactory.getInstance();\n\n	public AmppFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected AmppRefEnum[] getAllRefs() {\n		return AmppRefEnum.values();\n	}\n\n	@Override\n	protected Ampp createInMemory(AmppRefEnum ref) {\n		Ampp ampp = new Ampp();\n\n		ampp.setId(ref.getId());\n		ampp.setCodigoObm(ref.getCodigoObm());\n		ampp.setVmpp(vmppFactory.create(ref.getVmpp()));\n		ampp.setRegistroSanitario(ref.getRegistroSanitario());\n		ampp.setNome(ref.getNome());\n\n		return ampp;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.EstabelecimentoCreateDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoCreateDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class EstabelecimentoCreateDtoFactory extends DataFactory<EstabelecimentoCreateDto, Spec> {\n\n	@Autowired\n	private final EnderecoCreateDtoFactory enderecoCreateDtoFactory = EnderecoCreateDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final EstabelecimentoCreateDtoFactory instance = new EstabelecimentoCreateDtoFactory();\n\n	@Override\n	protected EstabelecimentoCreateDto create(Spec spec) {\n		return new EstabelecimentoCreateDto(\n				spec.nome.get(),\n				spec.cnpjOrCnes.get(),\n				spec.endereco.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.nome.setDefault(faker.lorem()::sentence);\n		spec.cnpjOrCnes.setDefault(faker::cnpj);\n		spec.endereco.setDefault(enderecoCreateDtoFactory::createRandom);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> cnpjOrCnes = new SpecValue<>();\n		public final SpecValue<EnderecoCreateDto> endereco = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDate;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FormaFornecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Fornecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Produto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.database.ReceitaMedicamentoFactory;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FornecimentoReceitaFactory extends DataFactory<FornecimentoReceita, Spec> {\n\n	@Getter(lazy = true)\n	private static final FornecimentoReceitaFactory instance = new FornecimentoReceitaFactory();\n\n	@Autowired\n	private final FornecimentoFactory fornecimentoFactory = FornecimentoFactory.getInstance();\n\n	@Autowired\n	private final ReceitaMedicamentoFactory receitaMedicamentoFactory = ReceitaMedicamentoFactory.getInstance();\n\n	@Autowired\n	private final ProdutoFactory produtoFactory = ProdutoFactory.getInstance();\n\n	@Autowired\n	private final FormaFornecimentoFactory formaFornecimentoFactory = FormaFornecimentoFactory.getInstance();\n\n	@Autowired\n	public FornecimentoReceitaFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected FornecimentoReceita create(Spec spec) {\n		FornecimentoReceita fornecimentoReceita = new FornecimentoReceita();\n\n		fornecimentoReceita.setFornecimento(spec.fornecimento.get());\n		fornecimentoReceita.setReceitaMedicamento(spec.receitaMedicamento.get());\n		fornecimentoReceita.setQuantidadeFornecida(spec.quantidadeFornecida.get());\n		fornecimentoReceita.setObservacao(spec.observacao.get());\n		fornecimentoReceita.setProduto(spec.produto.get());\n		fornecimentoReceita.setFormaFornecimento(spec.formaFornecimento.get());\n		fornecimentoReceita.setTotalFornecido(spec.totalFornecido.get());\n		fornecimentoReceita.setLote(spec.lote.get());\n		fornecimentoReceita.setDataValidade(spec.dataValidade.get());\n\n		return fornecimentoReceita;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		Long quantidadeFornecida = (long) faker.number().numberBetween(1, 10);\n		Produto produto = produtoFactory.createRandom();\n		spec.fornecimento.setDefault(fornecimentoFactory::createRandom);\n		spec.receitaMedicamento.setDefault(receitaMedicamentoFactory::createRandom);\n		spec.quantidadeFornecida.setDefault(() -> quantidadeFornecida);\n		spec.observacao.setDefault(faker.lorem()::sentence);\n		spec.produto.setDefault(produtoFactory::createRandom);\n		spec.formaFornecimento.setDefault(formaFornecimentoFactory::createRandom);\n		spec.totalFornecido.setDefault(() -> produto.getQuantidadeEmbalagem() * quantidadeFornecida);\n		spec.lote.setDefault(() -> faker.number().digits(10));\n		spec.dataValidade.setDefault(() -> LocalDate.now().plusMonths(1L));\n\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Fornecimento> fornecimento = new SpecValue<>();\n		public final SpecValue<ReceitaMedicamento> receitaMedicamento = new SpecValue<>();\n		public final SpecValue<Long> quantidadeFornecida = new SpecValue<>();\n		public final SpecValue<String> observacao = new SpecValue<>();\n		public final SpecValue<Produto> produto = new SpecValue<>();\n		public final SpecValue<FormaFornecimento> formaFornecimento = new SpecValue<>();\n		public final SpecValue<Long> totalFornecido = new SpecValue<>();\n		public final SpecValue<String> lote = new SpecValue<>();\n		public final SpecValue<LocalDate> dataValidade = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.CompradorCreateDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class CompradorCreateDtoFactory extends DataFactory<CompradorCreateDto, Spec> {\n\n	@Autowired\n	private final EnderecoCreateDtoFactory enderecoCreateDtoFactory = EnderecoCreateDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final CompradorCreateDtoFactory instance = new CompradorCreateDtoFactory();\n\n	@Override\n	protected CompradorCreateDto create(Spec spec) {\n		return new CompradorCreateDto(\n				spec.nome.get(),\n				spec.cpfOrPassaporte.get(),\n				spec.telefone.get(),\n				spec.estrangeiro.get(),\n				spec.endereco.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.nome.setDefault(faker.name()::fullName);\n		spec.cpfOrPassaporte.setDefault(faker::cpf);\n		spec.telefone.setDefault(() -> ""47979843357"");\n		spec.estrangeiro.setDefault(() -> false);\n		spec.endereco.setDefault(enderecoCreateDtoFactory::createRandom);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> cpfOrPassaporte = new SpecValue<>();\n		public final SpecValue<String> telefone = new SpecValue<>();\n		public final SpecValue<Boolean> estrangeiro = new SpecValue<>();\n		public final SpecValue<EnderecoCreateDto> endereco = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.database;\n\nimport static br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoQueryDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoQueryDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Fornecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FornecimentoQueryDtoFactory extends DataFactory<FornecimentoQueryDto, Spec> {\n\n	@Autowired\n	private final FornecimentoFactory fornecimentoFactory = FornecimentoFactory.getInstance();\n\n	@Autowired\n	private final FornecimentoReceitaFactory fornecimentoReceitaFactory = FornecimentoReceitaFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final FornecimentoQueryDtoFactory instance = new FornecimentoQueryDtoFactory();\n\n	@Override\n	protected FornecimentoQueryDto create(Spec spec) {\n		return new FornecimentoQueryDto(\n				spec.fornecimento.get(),\n				spec.fornecimentoReceita.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.fornecimento.setDefault(fornecimentoFactory::createRandom);\n		spec.fornecimentoReceita.setDefault(() -> fornecimentoReceitaFactory.create(fornecimentoReceita -> {\n			fornecimentoReceita.fornecimento.set(spec.fornecimento.get());\n		}));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Fornecimento> fornecimento = new SpecValue<>();\n		public final SpecValue<FornecimentoReceita> fornecimentoReceita = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.repository;\n\nimport static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDateTime;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.documento.common.database.DocumentoFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.database.TipoDocumentoFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoRefEnum;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.documento.common.repository.DocumentoRepository;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoQueryDtoFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaFactory;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoQueryDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Fornecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class FornecimentoRepositoryDatabaseTest {\n\n	@Autowired\n	private FornecimentoRepository fornecimentoRepository;\n\n	@Autowired\n	private DocumentoRepository documentoRepository;\n\n	@Autowired\n	private TipoDocumentoFactory tipoDocumentoFactory;\n\n	@Autowired\n	private DocumentoFactory documentoFactory;\n\n	@Autowired\n	private FornecimentoFactory fornecimentoFactory;\n\n	@Autowired\n	private FornecimentoReceitaFactory fornecimentoReceitaFactory;\n\n	@Autowired\n	private FornecimentoQueryDtoFactory fornecimentoQueryDtoFactory;\n\n	@Test\n	@DisplayName(""Deve retornar o fornecimento para prescrição legada com os campos não preenchidos"")\n	public void testFindAllByCodigoAcessoDocumentoLegado() {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n		});\n		Fornecimento fornecimento = this.fornecimentoFactory.create(spec -> {\n			spec.documento.set(documento);\n			spec.estabelecimento.set(null);\n			spec.comprador.set(null);\n		});\n\n		FornecimentoQueryDto expectedFornecimento = new FornecimentoQueryDto(fornecimento, null);\n\n		List<FornecimentoQueryDto> fornecimentos = this.fornecimentoRepository.findAllByCodigoAcessoDocumento(documento.getCodigoAcesso());\n\n		assertThat(fornecimentos).hasSize(1);\n		assertThat(fornecimentos.get(0)).usingRecursiveComparison().isEqualTo(expectedFornecimento);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar todos os fornecimentos de um documento"")\n	public void testFindAllByCodigoAcessoPrescricao() {\n		Documento documentoA = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n		});\n		Documento documentoB = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO_CONTROLADA));\n		});\n		Fornecimento fornecimentoA = this.fornecimentoFactory.create(spec -> {\n			spec.documento.set(documentoA);\n		});\n		Fornecimento fornecimentoB = this.fornecimentoFactory.create(spec -> {\n			spec.documento.set(documentoB);\n		});\n		FornecimentoReceita fornecimentoReceitaA = this.fornecimentoReceitaFactory.create(spec -> {\n			spec.fornecimento.set(fornecimentoA);\n		});\n		FornecimentoReceita primeiroFornecimentoReceitaB = this.fornecimentoReceitaFactory.create(spec -> {\n			spec.fornecimento.set(fornecimentoB);\n		});\n		FornecimentoReceita segundoFornecimentoReceitaB = this.fornecimentoReceitaFactory.create(spec -> {\n			spec.fornecimento.set(fornecimentoB);\n		});\n\n		FornecimentoQueryDto expectedFornecimentoPrescricaoNormal = new FornecimentoQueryDto(fornecimentoA, fornecimentoReceitaA);\n		FornecimentoQueryDto expectedPrimeiroFornecimentoPrescricaoControlada = new FornecimentoQueryDto(fornecimentoB, primeiroFornecimentoReceitaB);\n		FornecimentoQueryDto expectedSegundoFornecimentoPrescricaoControlada = new FornecimentoQueryDto(fornecimentoB, segundoFornecimentoReceitaB);\n\n		List<FornecimentoQueryDto> fornecimentosPrescricaoNormal = this.fornecimentoRepository.findAllByCodigoAcessoDocumento(documentoA.getCodigoAcesso());\n		List<FornecimentoQueryDto> fornecimentosPrescricaoControlada = this.fornecimentoRepository.findAllByCodigoAcessoDocumento(documentoB.getCodigoAcesso());\n\n		assertThat(fornecimentosPrescricaoNormal).hasSize(1);\n		assertThat(fornecimentosPrescricaoControlada).hasSize(2);\n		assertThat(fornecimentosPrescricaoNormal.get(0)).usingRecursiveComparison().isEqualTo(expectedFornecimentoPrescricaoNormal);\n		assertThat(fornecimentosPrescricaoControlada.get(0)).usingRecursiveComparison().isEqualTo(expectedPrimeiroFornecimentoPrescricaoControlada);\n		assertThat(fornecimentosPrescricaoControlada.get(1)).usingRecursiveComparison().isEqualTo(expectedSegundoFornecimentoPrescricaoControlada);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando o documento não existir"")\n	public void testFindAllByCodigoAcessoPrescricaoExpectEmpty() {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n		});\n		Fornecimento fornecimento = this.fornecimentoFactory.create(spec -> {\n			spec.documento.set(documento);\n		});\n		this.fornecimentoReceitaFactory.create(spec -> {\n			spec.fornecimento.set(fornecimento);\n		});\n\n		List<FornecimentoQueryDto> fornecimentos = this.fornecimentoRepository.findAllByCodigoAcessoDocumento(randomAlphanumeric(8));\n\n		assertThat(fornecimentos).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar os fornecimentos em ordem decrescente em relação à data de criação"")\n	public void testFindAllByCodigoAcessoPrescricaoExpectDescendingOrder() {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n		});\n		Fornecimento fornecimentoA = this.fornecimentoFactory.create(spec -> {\n			spec.documento.set(documento);\n			spec.dataCriacao.set(LocalDateTime.now().minusDays(1));\n		});\n		Fornecimento fornecimentoB = this.fornecimentoFactory.create(spec -> {\n			spec.documento.set(documento);\n			spec.dataCriacao.set(LocalDateTime.now());\n		});\n		FornecimentoReceita fornecimentoReceitaA = this.fornecimentoReceitaFactory.create(spec -> {\n			spec.fornecimento.set(fornecimentoA);\n		});\n		FornecimentoReceita fornecimentoReceitaB = this.fornecimentoReceitaFactory.create(spec -> {\n			spec.fornecimento.set(fornecimentoB);\n		});\n\n		FornecimentoQueryDto expectedFornecimentoA = new FornecimentoQueryDto(fornecimentoA, fornecimentoReceitaA);\n		FornecimentoQueryDto expectedFornecimentoB = new FornecimentoQueryDto(fornecimentoB, fornecimentoReceitaB);\n\n		List<FornecimentoQueryDto> fornecimentos = this.fornecimentoRepository.findAllByCodigoAcessoDocumento(documento.getCodigoAcesso());\n\n		assertThat(fornecimentos).hasSize(2);\n		assertThat(fornecimentos.get(0)).usingRecursiveComparison().isEqualTo(expectedFornecimentoB);\n		assertThat(fornecimentos.get(1)).usingRecursiveComparison().isEqualTo(expectedFornecimentoA);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando o tipo de documento não for uma prescrição"")\n	public void testFindAllByCodigoAcessoPrescricaoExpectEmptyByTipoDocumento() {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.ATESTADO));\n		});\n		this.fornecimentoFactory.create(spec -> {\n			spec.documento.set(documento);\n		});\n\n		List<FornecimentoQueryDto> fornecimentos = this.fornecimentoRepository.findAllByCodigoAcessoDocumento(documento.getCodigoAcesso());\n\n		assertThat(fornecimentos).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve recuperar um fornecimento através do código de acesso e id"")\n	public void testGetByCodigoAcessoAndId() {\n		fornecimentoFactory.createRandom();\n		Fornecimento fornecimento = fornecimentoFactory.createRandom();\n		String codigoAcesso = fornecimento.getDocumento().getCodigoAcesso();\n		Long fornecimentoId = fornecimento.getId();\n		FornecimentoReceita fornecimentoReceitaA = fornecimentoReceitaFactory.create(spec -> {\n			spec.fornecimento.set(fornecimento);\n		});\n		FornecimentoReceita fornecimentoReceitaB = fornecimentoReceitaFactory.create(spec -> {\n			spec.fornecimento.set(fornecimento);\n		});\n\n		List<FornecimentoQueryDto> actual = fornecimentoRepository.getByCodigoAcessoAndId(codigoAcesso, fornecimentoId);\n		List<FornecimentoQueryDto> expected = Arrays.asList(\n				fornecimentoQueryDtoFactory.create(spec -> {\n					spec.fornecimento.set(fornecimento);\n					spec.fornecimentoReceita.set(fornecimentoReceitaA);\n				}),\n				fornecimentoQueryDtoFactory.create(spec -> {\n					spec.fornecimento.set(fornecimento);\n					spec.fornecimentoReceita.set(fornecimentoReceitaB);\n				})\n		);\n\n		assertThat(actual).containsExactlyInAnyOrderElementsOf(expected);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio para um id de fornecimento inválido"")\n	public void testGetByInvalidFornecimentoId() {\n		fornecimentoFactory.createRandom();\n		Fornecimento fornecimento = fornecimentoFactory.createRandom();\n		String codigoAcesso = fornecimento.getDocumento().getCodigoAcesso();\n		Long invalidId = fornecimento.getId() + 1;\n		fornecimentoReceitaFactory.create(spec -> {spec.fornecimento.set(fornecimento);});\n		fornecimentoReceitaFactory.create(spec -> {spec.fornecimento.set(fornecimento);});\n\n		List<FornecimentoQueryDto> result = fornecimentoRepository.getByCodigoAcessoAndId(codigoAcesso, invalidId);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio quando fornecimento consultado não é referente ao documento do código de acesso informado"")\n	public void testGetByIdInvalidCodigoAcesso() {\n		Fornecimento fornecimentoA = fornecimentoFactory.createRandom();\n		Fornecimento fornecimentoB = fornecimentoFactory.createRandom();\n		String codigoAcesso = fornecimentoB.getDocumento().getCodigoAcesso();\n		Long fornecimentoId = fornecimentoA.getId();\n		fornecimentoReceitaFactory.create(spec -> {spec.fornecimento.set(fornecimentoA);});\n		fornecimentoReceitaFactory.create(spec -> {spec.fornecimento.set(fornecimentoA);});\n\n		List<FornecimentoQueryDto> result = fornecimentoRepository.getByCodigoAcessoAndId(codigoAcesso, fornecimentoId);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve informar quando o fornecimento existe com base no id e código de acesso"")\n	public void testExistsByCodigoAcessoAndId() {\n		String codigoAcesso = ""12345678"";\n		Fornecimento fornecimento = fornecimentoFactory.create(spec -> {\n			spec.documento.set(documentoFactory.create(doc -> {\n				doc.codigoAcesso.set(codigoAcesso);\n				doc.tipoDocumento.set(tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n			}));\n		});\n		Long fornecimentoId = fornecimento.getId();\n\n		boolean result = fornecimentoRepository.existsByCodigoAcessoAndId(codigoAcesso, fornecimentoId);\n\n		assertThat(result).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar falso quando o código de acesso informado é inválido para o fornecimento do ID"")\n	public void testExistsInvalidCodigoAcesso() {\n		String invalidCodigoAcesso = ""87654321"";\n		Fornecimento fornecimento = fornecimentoFactory.create(spec -> {\n			spec.documento.set(documentoFactory.create(doc -> {\n				doc.codigoAcesso.set(""12345678"");\n				doc.tipoDocumento.set(tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n			}));\n		});\n		Long fornecimentoId = fornecimento.getId();\n\n		boolean result = fornecimentoRepository.existsByCodigoAcessoAndId(invalidCodigoAcesso, fornecimentoId);\n\n		assertThat(result).isFalse();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar falso quando o ID é inválido para o código de acesso informado"")\n	public void testExistsInvalidId() {\n		String codigoAcesso = ""12345678"";\n		Fornecimento fornecimento = fornecimentoFactory.create(spec -> {\n			spec.documento.set(documentoFactory.create(doc -> {\n				doc.codigoAcesso.set(codigoAcesso);\n				doc.tipoDocumento.set(tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n			}));\n		});\n		Long invalidFornecimentoId = fornecimento.getId() + 1;\n\n		boolean result = fornecimentoRepository.existsByCodigoAcessoAndId(codigoAcesso, invalidFornecimentoId);\n\n		assertThat(result).isFalse();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar falso quando ambos os identificadores existem mas as entidades não estão associadas"")\n	public void testExistsUnrelatedEntities() {\n		Documento documento = documentoFactory.create(spec -> {\n			spec.codigoAcesso.set(""12345678"");\n			spec.tipoDocumento.set(tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n		});\n		Fornecimento fornecimento = fornecimentoFactory.create(spec -> {\n			spec.documento.set(documentoFactory.create(doc -> {\n				doc.codigoAcesso.set(""87654321"");\n				doc.tipoDocumento.set(tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n			}));\n		});\n\n		boolean result = fornecimentoRepository.existsByCodigoAcessoAndId(documento.getCodigoAcesso(), fornecimento.getId());\n\n		assertThat(result).isFalse();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.database;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.Query;\n\n@DatabaseTest\npublic class NamingConventionsDatabaseTest {\n\n	@Autowired\n	private EntityManager entityManager;\n\n	@Test\n	@DisplayName(""Os nomes das colunas devem ter no máximo 30 caracteres"")\n	public void testColumnNameLength() {\n		String sqlQuery = ""SELECT column_name FROM information_schema.columns WHERE table_schema = 'PUBLIC' AND character_length(column_name) > 30"";\n		Query query = entityManager.createNativeQuery(sqlQuery);\n\n		List<String> results = query.getResultList();\n\n		assertThat(results).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Os nomes das sequências devem ter no máximo 30 caracteres"")\n	public void testSequenceNamesLength() {\n		String sqlQuery = ""SELECT sequence_name FROM information_schema.sequences WHERE sequence_schema = 'PUBLIC' AND character_length(sequence_name) > 30"";\n		Query query = entityManager.createNativeQuery(sqlQuery);\n\n		List<String> results = query.getResultList();\n\n		assertThat(results).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Os nomes das tabelas devem ter no máximo 30 caracteres"")\n	public void testTableNamesLength() {\n		String sqlQuery = ""SELECT table_name FROM information_schema.tables WHERE table_schema = 'PUBLIC' AND character_length(table_name) > 30"";\n		Query query = entityManager.createNativeQuery(sqlQuery);\n\n		List<String> results = query.getResultList();\n\n		assertThat(results).isEmpty();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.farmaceutico.database.FarmaceuticoCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoCreateDto;\n\npublic class FarmaceuticoCreateDtoValidatorTest {\n	private final FarmaceuticoCreateDtoFactory factory = FarmaceuticoCreateDtoFactory.getInstance();\n	private final BridgeFaker faker = new BridgeFaker();\n	private FarmaceuticoCreateDtoValidator validator;\n\n	private static Stream<Arguments> inputsForNullCheckTest() {\n		FarmaceuticoCreateDtoFactory localFactory = FarmaceuticoCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> spec.crf.set(null)), ""crf""),\n				Arguments.of(localFactory.create(spec -> spec.ufConselhoClasse.set(null)), ""ufConselhoClasse"")\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		validator = new FarmaceuticoCreateDtoValidator();\n	}\n\n	@Nested\n	class ValidateFunction {\n\n		private static Stream<Arguments> provideInputsForNullCheckTest() {\n			return inputsForNullCheckTest();\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n		public void testValidInput() {\n			FarmaceuticoCreateDto input = factory.createRandom();\n\n			Validator<FarmaceuticoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForNullCheckTest"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n		public void testNullCheck(FarmaceuticoCreateDto input, String errorField) {\n			Validator<FarmaceuticoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o crfResponsavel inválido"")\n		public void testInvalidCrfCheck() {\n			FarmaceuticoCreateDto input = factory.create(spec -> spec.crf.set(faker.lorem().characters(11)));\n\n			Validator<FarmaceuticoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{crf=Deve possuir no máximo 10 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um CRF com letras"")\n		public void testValidCrf() {\n			FarmaceuticoCreateDto input = factory.create(spec -> spec.crf.set(faker.lorem().characters(10)));\n\n			Validator<FarmaceuticoCreateDto> formError = validator.validate(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n	}\n\n	@Nested\n	class ValidateOpcionalFunction {\n\n		private static Stream<Arguments> provideInputsForValidTest() {\n			FarmaceuticoCreateDtoFactory localFactory = FarmaceuticoCreateDtoFactory.getInstance();\n			return Stream.of(\n					Arguments.of(localFactory.createRandom()),\n					Arguments.of(localFactory.create(spec -> {\n						spec.crf.set(null);\n						spec.ufConselhoClasse.set(null);\n					}))\n			);\n		}\n\n		private static Stream<Arguments> provideInputsForNullCheckTest() {\n			return inputsForNullCheckTest();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForValidTest"")\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n		public void testValidInput(FarmaceuticoCreateDto input) {\n			Validator<FarmaceuticoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n\n		@ParameterizedTest\n		@MethodSource(""provideInputsForNullCheckTest"")\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber somente UF de conselho de classe ou CRF preenchido"")\n		public void testNullCheck(FarmaceuticoCreateDto input, String errorField) {\n			Validator<FarmaceuticoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com o crfResponsavel inválido"")\n		public void testInvalidCrfCheck() {\n			FarmaceuticoCreateDto input = factory.create(spec -> spec.crf.set(faker.lorem().characters(11)));\n\n			Validator<FarmaceuticoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isFalse();\n			assertThat(formError.getErrors().toString()).isEqualTo(""{crf=Deve possuir no máximo 10 caractere(s)}"");\n		}\n\n		@Test\n		@DisplayName(""Deve retornar um objeto válido no caso de receber um CRF com letras"")\n		public void testValidCrf() {\n			FarmaceuticoCreateDto input = factory.create(spec -> spec.crf.set(faker.lorem().characters(10)));\n\n			Validator<FarmaceuticoCreateDto> formError = validator.validateOpcional(input);\n\n			assertThat(formError.isValid()).isTrue();\n		}\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.database;\n\nimport static br.ufsc.bridge.pecassinador.farmaceutico.database.FarmaceuticoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.localidade.database.UfFactory;\nimport br.ufsc.bridge.pecassinador.localidade.enums.UfRefEnum;\nimport br.ufsc.bridge.pecassinador.farmaceutico.model.Farmaceutico;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FarmaceuticoFactory extends DataFactory<Farmaceutico, Spec> {\n\n	@Autowired\n	private final UfFactory ufFactory = UfFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final FarmaceuticoFactory instance = new FarmaceuticoFactory();\n\n	@Autowired\n	public FarmaceuticoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Farmaceutico create(Spec spec) {\n		Farmaceutico farmaceutico = new Farmaceutico();\n\n		farmaceutico.setNome(spec.nome.get());\n		farmaceutico.setCpf(spec.cpf.get());\n		farmaceutico.setCrf(spec.crf.get());\n		farmaceutico.setUfConselhoClasse(spec.ufConselhoClasse.get());\n\n		return farmaceutico;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.nome.setDefault(this.faker.name()::fullName);\n		spec.cpf.setDefault(this.faker::cpf);\n		spec.crf.setDefault(() -> faker.number().digits(10));\n		spec.ufConselhoClasse.setDefault(() -> this.ufFactory.create(this.faker.options().option(UfRefEnum.class)));\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> nome = new SpecValue<>();\n		public SpecValue<String> cpf = new SpecValue<>();\n		public SpecValue<String> crf = new SpecValue<>();\n		public SpecValue<Uf> ufConselhoClasse = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.farmaceutico.database.FarmaceuticoCreateDtoFactory.Spec;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoCreateDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FarmaceuticoCreateDtoFactory extends DataFactory<FarmaceuticoCreateDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final FarmaceuticoCreateDtoFactory instance = new FarmaceuticoCreateDtoFactory();\n\n	@Override\n	protected FarmaceuticoCreateDto create(Spec spec) {\n		FarmaceuticoCreateDto dto = new FarmaceuticoCreateDto();\n		dto.setCrf(spec.crf.get());\n		dto.setUfConselhoClasse(spec.ufConselhoClasse.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.crf.setDefault(() -> faker.number().digits(10));\n		spec.ufConselhoClasse.setDefault(() -> faker.options().option(UfEnum.class));\n\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> crf = new SpecValue<>();\n		public final SpecValue<UfEnum> ufConselhoClasse = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.database;\n\nimport static br.ufsc.bridge.pecassinador.farmaceutico.database.FarmaceuticoDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class FarmaceuticoDtoFactory extends DataFactory<FarmaceuticoDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final FarmaceuticoDtoFactory instance = new FarmaceuticoDtoFactory();\n\n	@Override\n	protected FarmaceuticoDto create(Spec spec) {\n		FarmaceuticoDto dto = new FarmaceuticoDto();\n		dto.setNome(spec.nome.get());\n		dto.setCpf(spec.cpf.get());\n		dto.setCrf(spec.crf.get());\n		dto.setUfConselhoClasse(spec.ufConselhoClasse.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.nome.setDefault(faker.name()::fullName);\n		spec.cpf.setDefault(faker::cpf);\n		spec.crf.setDefault(() -> faker.number().digits(10));\n		spec.ufConselhoClasse.setDefault(() -> faker.options().option(UfEnum.class));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> cpf = new SpecValue<>();\n		public final SpecValue<String> crf = new SpecValue<>();\n		public final SpecValue<UfEnum> ufConselhoClasse = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.repository;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.farmaceutico.database.FarmaceuticoFactory;\nimport br.ufsc.bridge.pecassinador.farmaceutico.model.Farmaceutico;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class FarmaceuticoRepositoryDatabaseTest {\n\n	@Autowired\n	private FarmaceuticoRepository farmaceuticoRepository;\n\n	@Autowired\n	private FarmaceuticoFactory farmaceuticoFactory;\n\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@BeforeEach\n	public void beforeEach() {\n		this.farmaceuticoFactory.createRandom(3);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar o farmacêutico corretamente pelo cpf"")\n	public void testFindByCpf() {\n		Farmaceutico farmaceutico = this.farmaceuticoFactory.createRandom();\n\n		Optional<Farmaceutico> optionalFarmaceutico = this.farmaceuticoRepository.findByCpf(farmaceutico.getCpf());\n\n		assertThat(optionalFarmaceutico).isPresent();\n		assertThat(optionalFarmaceutico.get().getNome()).isEqualTo(farmaceutico.getNome());\n		assertThat(optionalFarmaceutico.get().getCpf()).isEqualTo(farmaceutico.getCpf());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar o farmacêutico quando quando o cpf não se referir a um farmacêutico registrado"")\n	public void testFindByCpfInvalid() {\n		Optional<Farmaceutico> optionalFarmaceutico = this.farmaceuticoRepository.findByCpf(this.faker.cpf());\n\n		assertThat(optionalFarmaceutico).isNotPresent();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.latest.database;\n\nimport static br.ufsc.bridge.pecassinador.documento.latest.database.DocumentoTemporarioCreateDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.nio.charset.Charset;\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.cidadao.database.CidadaoDtoFactory;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.common.util.DateUtils;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.database.EmissorDtoFactory;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.database.ReceitaMedicamentoDtoFactory;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class DocumentoTemporarioCreateDtoFactory extends DataFactory<DocumentoTemporarioCreateDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final DocumentoTemporarioCreateDtoFactory instance = new DocumentoTemporarioCreateDtoFactory();\n	private final CidadaoDtoFactory cidadaoDtoFactory = CidadaoDtoFactory.getInstance();\n	private final ReceitaMedicamentoDtoFactory receitaMedicamentoDtoFactory = ReceitaMedicamentoDtoFactory.getInstance();\n	private final EmissorDtoFactory emissorDtoFactory = EmissorDtoFactory.getInstance();\n\n	@Autowired\n	public DocumentoTemporarioCreateDtoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected DocumentoTemporarioCreateDto create(Spec spec) {\n		DocumentoTemporarioCreateDto dto = new DocumentoTemporarioCreateDto();\n		dto.setPrescritor(spec.prescritor.get());\n		dto.setCidadao(spec.cidadao.get());\n		dto.setContaServicoId(spec.contaServicoId.get());\n		dto.setContaServicoName(spec.contaServicoName.get());\n		dto.setPdf(spec.pdf.get());\n		dto.setTipoDocumento(spec.tipoDocumento.get());\n		dto.setReceituario(spec.receituario.get());\n		dto.setDataInicioAtendimento(spec.dataInicioAtendimento.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.prescritor.setDefault(() -> emissorDtoFactory.createRandom());\n		spec.cidadao.setDefault(() -> cidadaoDtoFactory.createRandom());\n		spec.contaServicoId.setDefault(() -> faker.number().randomNumber());\n		spec.contaServicoName.setDefault(faker.lorem()::paragraph);\n		spec.pdf.setDefault(() -> faker.lorem().word().getBytes(Charset.defaultCharset()));\n		spec.tipoDocumento.setDefault(() -> faker.options().option(TipoDocumentoEnum.class));\n		spec.receituario.setDefault(() -> receitaMedicamentoDtoFactory.createRandom(3));\n		spec.dataInicioAtendimento.setDefault(() -> DateUtils.asLocalDate(faker.date().past(10, TimeUnit.DAYS)));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<EmissorDto> prescritor = new SpecValue<>();\n		public final SpecValue<CidadaoDto> cidadao = new SpecValue<>();\n		public final SpecValue<Long> contaServicoId = new SpecValue<>();\n		public final SpecValue<String> contaServicoName = new SpecValue<>();\n		public final SpecValue<byte[]> pdf = new SpecValue<>();\n		public final SpecValue<TipoDocumentoEnum> tipoDocumento = new SpecValue<>();\n		public final SpecValue<List<ReceitaMedicamentoDto>> receituario = new SpecValue<>();\n		public final SpecValue<LocalDate> dataInicioAtendimento = new SpecValue<>();\n\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.documento.common.model.TipoDocumento;\n\n@Getter\n@AllArgsConstructor\npublic enum TipoDocumentoRefEnum implements Ref<TipoDocumento> {\n	PRESCRICAO(1L, ""Prescrição Médica""),\n	ATESTADO(2L, ""Atestado Médico""),\n	PRESCRICAO_CONTROLADA(3L, ""Prescrição Médica Controlada"");\n\n	private final Long id;\n	private final String nome;\n\n	@Override\n	public Class<TipoDocumento> getClazz() {\n		return TipoDocumento.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.database;\n\nimport static br.ufsc.bridge.pecassinador.documento.common.database.DocumentoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\nimport static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.arquivo.database.ArquivoFactory;\nimport br.ufsc.bridge.pecassinador.arquivo.model.Arquivo;\nimport br.ufsc.bridge.pecassinador.contaservico.database.ContaServicoFactory;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.documento.common.model.TipoDocumento;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class DocumentoFactory extends DataFactory<Documento, Spec> {\n\n	@Getter(lazy = true)\n	private static final DocumentoFactory instance = new DocumentoFactory();\n	@Autowired\n	private final ContaServicoFactory contaServicoFactory = ContaServicoFactory.getInstance();\n	@Autowired\n	private final ArquivoFactory arquivoFactory = ArquivoFactory.getInstance();\n	@Autowired\n	private final TipoDocumentoFactory tipoDocumentoFactory = TipoDocumentoFactory.getInstance();\n\n	@Autowired\n	public DocumentoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Documento create(Spec spec) {\n		Documento documento = new Documento();\n\n		documento.setCodigoAcesso(spec.codigoAcesso.get());\n		documento.setContaServico(spec.contaServico.get());\n		documento.setArquivo(spec.arquivo.get());\n		documento.setTipoDocumento(spec.tipoDocumento.get());\n\n		return documento;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.codigoAcesso.setDefault(() -> randomAlphanumeric(8));\n		spec.contaServico.setDefault(() -> this.contaServicoFactory.createRandom());\n		spec.arquivo.setDefault(() -> this.arquivoFactory.createRandom());\n		spec.tipoDocumento.setDefault(() -> this.tipoDocumentoFactory.createRandom());\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> codigoAcesso = new SpecValue<>();\n		public SpecValue<ContaServico> contaServico = new SpecValue<>();\n		public SpecValue<Arquivo> arquivo = new SpecValue<>();\n		public SpecValue<TipoDocumento> tipoDocumento = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoRefEnum;\nimport br.ufsc.bridge.pecassinador.documento.common.model.TipoDocumento;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class TipoDocumentoFactory extends DomainFactory<TipoDocumento, TipoDocumentoRefEnum> {\n\n	@Getter(lazy = true)\n	private static final TipoDocumentoFactory instance = new TipoDocumentoFactory();\n\n	@Autowired\n	public TipoDocumentoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected TipoDocumentoRefEnum[] getAllRefs() {\n		return TipoDocumentoRefEnum.values();\n	}\n\n	@Override\n	protected TipoDocumento createInMemory(TipoDocumentoRefEnum ref) {\n		TipoDocumento tipoDocumento = new TipoDocumento();\n\n		tipoDocumento.setId(ref.getId());\n		tipoDocumento.setNome(ref.getNome());\n\n		return tipoDocumento;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.database;\n\nimport static br.ufsc.bridge.pecassinador.documento.common.database.DocumentoTemporarioFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\nimport static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n\nimport java.time.LocalDateTime;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.contaservico.database.ContaServicoFactory;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport br.ufsc.bridge.pecassinador.documento.common.model.DocumentoTemporario;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class DocumentoTemporarioFactory extends DataFactory<DocumentoTemporario, Spec> {\n\n	@Getter(lazy = true)\n	private static final DocumentoTemporarioFactory instance = new DocumentoTemporarioFactory();\n	@Autowired\n	private final ContaServicoFactory contaServicoFactory = ContaServicoFactory.getInstance();\n\n	@Autowired\n	public DocumentoTemporarioFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected DocumentoTemporario create(Spec spec) {\n		DocumentoTemporario documentoTemporario = new DocumentoTemporario();\n\n		documentoTemporario.setContaServico(spec.contaServico.get());\n		documentoTemporario.setCodigoAcesso(spec.codigoAcesso.get());\n		documentoTemporario.setDataCriacao(spec.dataCriacao.get());\n		documentoTemporario.setDataAssinatura(spec.dataAssinatura.get());\n\n		return documentoTemporario;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.contaServico.setDefault(() -> this.contaServicoFactory.createRandom());\n		spec.codigoAcesso.setDefault(() -> randomAlphanumeric(8));\n		spec.dataCriacao.setDefault(LocalDateTime::now);\n		spec.dataAssinatura.setDefault(LocalDateTime::now);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<ContaServico> contaServico = new SpecValue<>();\n		public SpecValue<String> codigoAcesso = new SpecValue<>();\n		public SpecValue<LocalDateTime> dataCriacao = new SpecValue<>();\n		public SpecValue<LocalDateTime> dataAssinatura = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.repository;\n\nimport static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.EnumSource;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.arquivo.model.Arquivo;\nimport br.ufsc.bridge.pecassinador.documento.common.database.DocumentoFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.database.TipoDocumentoFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoRefEnum;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class DocumentoRepositoryDatabaseTest {\n\n	private final static int QUANTIDADE_DOCUMENTOS_BASE = 4;\n	@Autowired\n	private DocumentoRepository documentoRepository;\n	@Autowired\n	private TipoDocumentoFactory tipoDocumentoFactory;\n	@Autowired\n	private DocumentoFactory documentoFactory;\n\n	@BeforeEach\n	public void beforeEach() {\n		this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO));\n		}, QUANTIDADE_DOCUMENTOS_BASE - 1);\n\n		this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(TipoDocumentoRefEnum.PRESCRICAO_CONTROLADA));\n		});\n	}\n\n	@ParameterizedTest(name = ""Deve retornar o documento corretamente pelo código de acesso"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testFindByCodigoAcesso(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		Optional<Documento> optionalDocumento = this.documentoRepository.findByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalDocumento).isPresent();\n		assertThat(optionalDocumento.get().getCodigoAcesso()).isEqualTo(documento.getCodigoAcesso());\n		assertThat(optionalDocumento.get().getTipoDocumento()).isEqualTo(documento.getTipoDocumento());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar o documento quando o código de acesso se referir a um documento inexistente"")\n	public void testFindByCodigoAcessoInvalid() {\n		Optional<Documento> optionalDocumento = this.documentoRepository.findByCodigoAcesso(randomAlphanumeric(8));\n\n		assertThat(optionalDocumento).isNotPresent();\n	}\n\n	@ParameterizedTest(name = ""Não deve retornar o documento quando o código de acesso não for do tipo de prescrição"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, mode = EnumSource.Mode.EXCLUDE, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testFindByCodigoAcessoInvalidTipoDocumento(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		Optional<Documento> optionalDocumento = this.documentoRepository.findByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalDocumento).isNotPresent();\n	}\n\n	@ParameterizedTest(name = ""Deve retornar o nome da conta de serviço corretamente pelo código de acesso"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testGetNomeContaServicoByCodigoAcesso(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		Optional<String> optionalContaServicoNome = this.documentoRepository.getNomeContaServicoByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalContaServicoNome).isPresent();\n		assertThat(optionalContaServicoNome.get()).isEqualTo(documento.getContaServico().getNome());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar o nome da conta de serviço quando o código de acesso se referir a um documento inexistente"")\n	public void testGetNomeContaServicoByCodigoAcessoInvalid() {\n		Optional<String> optionalContaServicoNome = this.documentoRepository.getNomeContaServicoByCodigoAcesso(randomAlphanumeric(8));\n\n		assertThat(optionalContaServicoNome).isNotPresent();\n	}\n\n	@ParameterizedTest(name = ""Não deve retornar o nome da conta de serviço quando o documento não possuir uma conta de serviço"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testGetNomeContaServicoByCodigoAcessoWithoutContaServico(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.contaServico.set(null);\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		Optional<String> optionalContaServicoNome = this.documentoRepository.getNomeContaServicoByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalContaServicoNome).isNotPresent();\n	}\n\n	@ParameterizedTest(name = ""Não deve retornar o nome da conta de serviço quando o código de acesso não for do tipo de prescrição"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, mode = EnumSource.Mode.EXCLUDE, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testGetNomeContaServicoByCodigoAcessoInvalidTipoDocumento(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		Optional<String> optionalContaServicoNome = this.documentoRepository.getNomeContaServicoByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalContaServicoNome).isNotPresent();\n	}\n\n	@ParameterizedTest(name = ""Deve retornar verdadeiro caso o documento exista com base no código de acesso"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testExistsByCodigoAcesso(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		boolean exists = this.documentoRepository.existsByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(exists).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar falso caso o documento não exista com base no código de acesso"")\n	public void testExistsByCodigoAcessoExpectFalse() {\n		boolean exists = this.documentoRepository.existsByCodigoAcesso(randomAlphanumeric(8));\n\n		assertThat(exists).isFalse();\n	}\n\n	@ParameterizedTest(name = ""Deve retornar falso caso o código de acesso não seja do tipo de prescrição"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, mode = EnumSource.Mode.EXCLUDE, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testExistsByCodigoAcessoInvalidTipoDocumento(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		boolean exists = this.documentoRepository.existsByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(exists).isFalse();\n	}\n\n	@ParameterizedTest(name = ""Deve retornar o arquivo do documento caso o documento exista com base no código de acesso"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testFindArquivoByCodigoAcesso(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		Optional<Arquivo> optionalArquivo = this.documentoRepository.findArquivoByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalArquivo).isPresent();\n		assertThat(optionalArquivo.get().getNome()).isEqualTo(documento.getArquivo().getNome());\n		assertThat(optionalArquivo.get().getTamanho()).isEqualTo(documento.getArquivo().getTamanho());\n		assertThat(optionalArquivo.get().getHash()).isEqualTo(documento.getArquivo().getHash());\n		assertThat(optionalArquivo.get().getDataCriacao()).isEqualTo(documento.getArquivo().getDataCriacao());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar o arquivo do documento caso o documento não exista"")\n	public void testFindArquivoByCodigoAcessoInvalid() {\n		Optional<Arquivo> optionalArquivo = this.documentoRepository.findArquivoByCodigoAcesso(randomAlphanumeric(8));\n\n		assertThat(optionalArquivo).isNotPresent();\n	}\n\n	@ParameterizedTest(name = ""Não deve retornar o arquivo do documento caso o documento não possua um arquivo"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testFindArquivoByCodigoAcessoWithoutArquivo(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.arquivo.set(null);\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		Optional<Arquivo> optionalArquivo = this.documentoRepository.findArquivoByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalArquivo).isNotPresent();\n	}\n\n	@ParameterizedTest(name = ""Não deve retornar o arquivo do documento caso o código de acesso não seja do tipo de prescrição"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, mode = EnumSource.Mode.EXCLUDE, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testFindArquivoByCodigoAcessoInvalidTipoDocumento(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		Optional<Arquivo> optionalArquivo = this.documentoRepository.findArquivoByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalArquivo).isNotPresent();\n	}\n\n	@ParameterizedTest(name = ""Deve deletar o documento pelo código de acesso"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testDeleteByCodigoAcesso(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		this.documentoRepository.deleteByCodigoAcesso(documento.getCodigoAcesso());\n		Optional<Documento> optionalDocumento = this.documentoRepository.findByCodigoAcesso(documento.getCodigoAcesso());\n\n		assertThat(optionalDocumento).isNotPresent();\n	}\n\n	@Test\n	@DisplayName(""Não deve deletar o documento caso o código de acesso não exista"")\n	public void testDeleteByCodigoAcessoInvalid() {\n		this.documentoRepository.deleteByCodigoAcesso(randomAlphanumeric(8));\n\n		long countDocumentosBase = this.documentoRepository.count();\n		assertThat(countDocumentosBase).isEqualTo(QUANTIDADE_DOCUMENTOS_BASE);\n	}\n\n	@ParameterizedTest(name = ""Não deve deletar o documento caso o código de acesso não seja do tipo de prescrição"")\n	@EnumSource(value = TipoDocumentoRefEnum.class, mode = EnumSource.Mode.EXCLUDE, names = { ""PRESCRICAO"", ""PRESCRICAO_CONTROLADA"" })\n	public void testDeleteByCodigoAcessoInvalidTipoDocumento(TipoDocumentoRefEnum tipoDocumentoRef) {\n		Documento documento = this.documentoFactory.create(spec -> {\n			spec.tipoDocumento.set(this.tipoDocumentoFactory.create(tipoDocumentoRef));\n		});\n\n		this.documentoRepository.deleteByCodigoAcesso(documento.getCodigoAcesso());\n\n		long countDocumentosBase = this.documentoRepository.count();\n		assertThat(countDocumentosBase).isEqualTo(QUANTIDADE_DOCUMENTOS_BASE + 1);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.repository;\n\nimport static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDateTime;\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\n\nimport br.ufsc.bridge.pecassinador.contaservico.database.ContaServicoFactory;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport br.ufsc.bridge.pecassinador.contaservico.repository.ContaServicoRepository;\nimport br.ufsc.bridge.pecassinador.documento.common.database.DocumentoTemporarioFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.model.DocumentoTemporario;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\nimport jakarta.persistence.EntityNotFoundException;\n\n@DatabaseTest\npublic class DocumentoTemporarioRepositoryDatabaseTest {\n\n	@Autowired\n	private DocumentoTemporarioRepository documentoTemporarioRepository;\n\n	@Autowired\n	private ContaServicoRepository contaServicoRepository;\n\n	@Autowired\n	private DocumentoTemporarioFactory documentoTemporarioFactory;\n\n	@Autowired\n	private ContaServicoFactory contaServicoFactory;\n\n	@Test\n	@DisplayName(""Deve retornar todos os documentos temporários pendentes de exclusão"")\n	public void testFindAllPendingDeletion() {\n		LocalDateTime timeLimit = LocalDateTime.now().minusDays(5);\n		this.documentoTemporarioFactory.create(spec -> {\n			spec.dataCriacao.set(timeLimit.minusDays(1));\n		});\n		this.documentoTemporarioFactory.create(spec -> {\n			spec.dataCriacao.set(timeLimit.plusDays(1));\n		});\n\n		Pageable pageable = PageRequest.of(0, 10);\n		Page<DocumentoTemporario> documentos = this.documentoTemporarioRepository.findAllPendingDeletion(timeLimit, pageable);\n\n		assertThat(documentos).isNotEmpty();\n		assertThat(documentos.getContent().get(0).getDataCriacao()).isBefore(timeLimit);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um documento temporário pelo código de acesso"")\n	public void testFindByCodigoAcesso() {\n		this.documentoTemporarioFactory.createRandom(3);\n		DocumentoTemporario documentoTemporario = this.documentoTemporarioFactory.createRandom();\n\n		Optional<DocumentoTemporario> optionalDocumento = this.documentoTemporarioRepository.findByCodigoAcesso(documentoTemporario.getCodigoAcesso());\n\n		assertThat(optionalDocumento).isPresent();\n		assertThat(optionalDocumento.get().getCodigoAcesso()).isEqualTo(documentoTemporario.getCodigoAcesso());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo com código de acesso inválido"")\n	public void testFindByInvalidCodigoAcesso() {\n		this.documentoTemporarioFactory.createRandom(3);\n		String invalidCodigoAcesso = randomAlphanumeric(8);\n\n		Optional<DocumentoTemporario> optionalDocumento = this.documentoTemporarioRepository.findByCodigoAcesso(invalidCodigoAcesso);\n\n		assertThat(optionalDocumento).isNotPresent();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um documento temporário pelo código de acesso e contaServicoId com data de assinatura"")\n	public void testFindByCodigoAcessoAndContaServicoIdWithSignedDate() {\n		this.documentoTemporarioFactory.createRandom(3);\n		DocumentoTemporario documentoTemporario = this.documentoTemporarioFactory.createRandom();\n		ContaServico contaServico = documentoTemporario.getContaServico();\n\n		DocumentoTemporario documentoEncontrado = this.documentoTemporarioRepository.findByCodigoAcessoAndContaServicoIdWithDataAssinatura(documentoTemporario.getCodigoAcesso(),\n						contaServico.getId())\n				.orElseThrow(EntityNotFoundException::new);\n		assertThat(documentoEncontrado).isNotNull();\n		assertThat(documentoEncontrado.getCodigoAcesso()).isEqualTo(documentoTemporario.getCodigoAcesso());\n		assertThat(documentoEncontrado.getContaServico()).isEqualTo(documentoTemporario.getContaServico());\n		assertThat(documentoEncontrado.getDataAssinatura()).isNotNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo com código de acesso e contaServicoId inválidos"")\n	public void testFindByInvalidCodigoAcessoAndInvalidContaServicoId() {\n		this.documentoTemporarioFactory.createRandom(3);\n		String invalidCodigoAcesso = randomAlphanumeric(8);\n		Long invalidContaServicoId = -1L;\n\n		Optional<DocumentoTemporario> documento = this.documentoTemporarioRepository.findByCodigoAcessoAndContaServicoIdWithDataAssinatura(invalidCodigoAcesso,\n				invalidContaServicoId);\n\n		assertThat(documento).isNotPresent();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.test.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DataFactoryInMemoryCreationStrategy;\n\n@Configuration\npublic class DataFactoryConfig {\n\n	@Bean\n	public DataFactoryCreationStrategy creationStrategy() {\n		return new DataFactoryInMemoryCreationStrategy();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.test.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.context.annotation.Primary;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DataFactoryJPACreationStrategy;\n\n@Configuration\npublic class DataFactoryDatabaseConfig {\n\n	@Lazy\n	@Autowired\n	private TestDAO testDAO;\n\n	@Bean\n	@Primary\n	public TestDAO testDAO() {\n		return new TestDAO();\n	}\n\n	@Bean\n	@Primary\n	@DependsOn(""testDAO"")\n	public DataFactoryCreationStrategy persistCreationStrategy() {\n		return new DataFactoryJPACreationStrategy(testDAO);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.test.config;\n\nimport br.ufsc.bridge.factory.DataFactoryDAO;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.PersistenceContext;\n\npublic class TestDAO implements DataFactoryDAO {\n\n	@PersistenceContext\n	private EntityManager entityManager;\n\n	@Override public void persist(Object object) {\n		this.entityManager.persist(object);\n		this.entityManager.flush();\n	}\n\n	@Override public <T> T getReference(Class<T> entityClass, Object primaryKey) {\n		return this.entityManager.getReference(entityClass, primaryKey);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.test.annotation;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.springframework.boot.jdbc.EmbeddedDatabaseConnection;\nimport org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.pecassinador.PecAssinadorApplication;\nimport br.ufsc.bridge.pecassinador.test.config.DataFactoryDatabaseConfig;\n\n@Inherited\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@SpringBootTest(classes = { PecAssinadorApplication.class })\n@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)\n@TestPropertySource(locations = ""classpath:application-test.properties"")\n@Transactional\n@Import({ DataFactoryDatabaseConfig.class })\npublic @interface DatabaseTest {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.database.MedicamentoDtoFactory;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.validator.MedicamentoDtoValidator;\n\npublic class MedicamentoDtoValidatorTest {\n	private final MedicamentoDtoFactory factory = MedicamentoDtoFactory.getInstance();\n	private MedicamentoDtoValidator validator;\n\n	private static Stream<Arguments> provideInputsForNullCheckTest() {\n		MedicamentoDtoFactory localFactory = MedicamentoDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.principioAtivo.set(null);}), ""principioAtivo""),\n				Arguments.of(localFactory.create(spec -> {spec.unidadeFornecimento.set(null);}), ""unidadeFornecimento""),\n				Arguments.of(localFactory.create(spec -> {spec.formaFarmaceutica.set(null);}), ""formaFarmaceutica"")\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.validator = new MedicamentoDtoValidator();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		MedicamentoDto input = factory.createRandom();\n\n		Validator<MedicamentoDto> formError = validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForNullCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testNullCheckForRequiredFields(MedicamentoDto input, String errorField) {\n		Validator<MedicamentoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.database.ReceitaMedicamentoDtoFactory;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.validator.MedicamentoDtoValidator;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.validator.ReceitaMedicamentoDtoValidator;\n\npublic class ReceitaMedicamentoDtoValidatorTest {\n	private final ReceitaMedicamentoDtoFactory factory = ReceitaMedicamentoDtoFactory.getInstance();\n	private ReceitaMedicamentoDtoValidator validator;\n	private MedicamentoDtoValidator medicamentoDtoValidator;\n\n	private static Stream<Arguments> provideInputsForNullCheckTest() {\n		ReceitaMedicamentoDtoFactory localFactory = ReceitaMedicamentoDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.usoContinuo.set(null);}), ""usoContinuo""),\n				Arguments.of(localFactory.create(spec -> {spec.medicamento.set(null);}), ""medicamento""),\n				Arguments.of(localFactory.create(spec -> {spec.doseUnica.set(null);}), ""doseUnica""),\n				Arguments.of(localFactory.create(spec -> {spec.tipoReceita.set(null);}), ""tipoReceita""),\n				Arguments.of(localFactory.create(spec -> {spec.dose.set(null);}), ""dose""),\n				Arguments.of(localFactory.create(spec -> {spec.posologia.set(null);}), ""posologia""),\n				Arguments.of(localFactory.create(spec -> {spec.quantidadeReceitada.set(null);}), ""quantidadeReceitada""),\n				Arguments.of(localFactory.create(spec -> {spec.duracaoTratamento.set(null);}), ""duracaoTratamento""),\n				Arguments.of(localFactory.create(spec -> {spec.dataInicioTratamento.set(null);}), ""dataInicioTratamento""),\n				Arguments.of(localFactory.create(spec -> {spec.viaAdministracao.set(null);}), ""viaAdministracao"")\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.medicamentoDtoValidator = mock(MedicamentoDtoValidator.class);\n\n		this.validator = new ReceitaMedicamentoDtoValidator(\n				this.medicamentoDtoValidator\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		ReceitaMedicamentoDto input = this.factory.createRandom();\n\n		when(this.medicamentoDtoValidator.validate(input.getMedicamento())).thenReturn(Validator.of(input.getMedicamento()));\n\n		Validator<ReceitaMedicamentoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(medicamentoDtoValidator).validate(input.getMedicamento());\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForNullCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testNullCheckForRequiredFields(ReceitaMedicamentoDto input, String errorField) {\n		Validator<ReceitaMedicamentoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n		verify(medicamentoDtoValidator, never()).validate(input.getMedicamento());\n	}\n\n	@Test\n	@DisplayName(""Deve chamar os validadores auxiliares de forma adequada"")\n	public void testCallAggregateValidators() {\n		ReceitaMedicamentoDto input = this.factory.createRandom();\n\n		when(this.medicamentoDtoValidator.validate(input.getMedicamento())).thenReturn(Validator.of(input.getMedicamento()));\n\n		Validator<ReceitaMedicamentoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(medicamentoDtoValidator).validate(input.getMedicamento());\n	}\n\n	@Test\n	@DisplayName(""Deve apontar erros corretamente quando receber um objeto de validação como parâmetro"")\n	public void testValidateFormErrorObjectInvalid() {\n		ReceitaMedicamentoDto input = this.factory.create(spec -> {\n			spec.medicamento.set(null);\n		});\n		Validator<ReceitaMedicamentoDto> formError = Validator.of(input);\n		when(this.medicamentoDtoValidator.validate(input.getMedicamento())).thenReturn(Validator.of(input.getMedicamento()));\n\n		this.validator.validate(input, formError);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{medicamento=Preenchimento obrigatório}"");\n		verify(medicamentoDtoValidator, never()).validate(input.getMedicamento());\n	}\n\n	@Test\n	@DisplayName(""Não deve apontar erros quando receber um objeto de validação e input válido como parâmetros"")\n	public void testValidateFormErrorObjectValid() {\n		ReceitaMedicamentoDto input = this.factory.createRandom();\n		Validator<ReceitaMedicamentoDto> formError = Validator.of(input);\n		when(this.medicamentoDtoValidator.validate(input.getMedicamento())).thenReturn(Validator.of(input.getMedicamento()));\n\n		this.validator.validate(input, formError);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(medicamentoDtoValidator).validate(input.getMedicamento());\n	}\n\n	@Test\n	@DisplayName(""Deve incluir erros retornados pelos validadores auxiliares no resultado"")\n	public void testWriteAggregateValidatorErrors() {\n		ReceitaMedicamentoDto input = this.factory.createRandom();\n		Validator<MedicamentoDto> medicamentoError = Validator.of(input.getMedicamento());\n		medicamentoError.error(""{principioAtivo=Preenchimento obrigatório}"");\n		when(this.medicamentoDtoValidator.validate(input.getMedicamento())).thenReturn(medicamentoError);\n\n		Validator<ReceitaMedicamentoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{medicamento={principioAtivo=Preenchimento obrigatório}}"");\n		verify(medicamentoDtoValidator).validate(input.getMedicamento());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar erros se não possuir informações de frequência quando for uma dose única"")\n	public void testDoseUnicaWithoutFrequenciaInfo() {\n		ReceitaMedicamentoDto input = this.factory.create(spec -> {\n			spec.tipoFrequencia.set(null);\n			spec.frequenciaDose.set(null);\n			spec.doseUnica.set(true);\n		});\n\n		when(this.medicamentoDtoValidator.validate(input.getMedicamento())).thenReturn(Validator.of(input.getMedicamento()));\n\n		Validator<ReceitaMedicamentoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(medicamentoDtoValidator).validate(input.getMedicamento());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar erros se não possuir informações de frequência quando não for uma dose única"")\n	public void testNoDoseUnicaWithoutFrequenciaInfo() {\n		ReceitaMedicamentoDto input = this.factory.create(spec -> {\n			spec.tipoFrequencia.set(null);\n			spec.frequenciaDose.set(null);\n		});\n\n		when(this.medicamentoDtoValidator.validate(input.getMedicamento())).thenReturn(Validator.of(input.getMedicamento()));\n\n		Validator<ReceitaMedicamentoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{tipoFrequencia=Preenchimento obrigatório, frequenciaDose=Preenchimento obrigatório}"");\n		verify(medicamentoDtoValidator).validate(input.getMedicamento());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar erros se possuir informações de frequência quando for uma dose única"")\n	public void testFrequenciaInfoWithoutDoseUnica() {\n		ReceitaMedicamentoDto input = this.factory.create(spec -> {\n			spec.doseUnica.set(true);\n		});\n\n		when(this.medicamentoDtoValidator.validate(input.getMedicamento())).thenReturn(Validator.of(input.getMedicamento()));\n\n		Validator<ReceitaMedicamentoDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{tipoFrequencia=Não deve ser preenchido, frequenciaDose=Não deve ser preenchido}"");\n		verify(medicamentoDtoValidator).validate(input.getMedicamento());\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoReceita;\n\n@Getter\n@AllArgsConstructor\npublic enum TipoReceitaRefEnum implements Ref<TipoReceita> {\n	COMUM(1L, ""COMUM""),\n	ESPECIAL(2L, ""ESPECIAL""),\n	ESPECIAL_BRANCA(3L, ""ESPECIAL - NOTIFICAÇÃO BRANCA""),\n	ESPECIAL_AZUL(4L, ""ESPECIAL - NOTIFICAÇÃO AZUL""),\n	ESPECIAL_AMARELA(5L, ""ESPECIAL - NOTIFICAÇÃO AMARELA"");\n\n	private final Long id;\n	private final String descricao;\n\n	@Override\n	public Class<TipoReceita> getClazz() {\n		return TipoReceita.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.CategoriaMedicamento;\n\n@Getter\n@AllArgsConstructor\npublic enum CategoriaMedicamentoRefEnum implements Ref<CategoriaMedicamento> {\n	A1(1L, ""A1"", ""ENTORPECENTES""),\n	A2(2L, ""A2"", ""ENTORPECENTES""),\n	A3(3L, ""A3"", ""PSICOTRÓPICOS""),\n	B1(4L, ""B1"", ""PSICOTRÓPICOS""),\n	B2(5L, ""B2"", ""PSICOTRÓPICOS ANOREXÍGENOS""),\n	C1(6L, ""C1"", ""PSICOATIVOS""),\n	C2(7L, ""C2"", ""RETINÓIDES DE USO SISTÊMICO""),\n	C3(8L, ""C3"", ""IMUNOSSUPRESSORES""),\n	C4(9L, ""C4"", ""ANTI-RETROVIRAIS""),\n	C5(10L, ""C5"", ""ANABOLIZANTES""),\n	D1(11L, ""D1"", ""PRECURSORES""),\n	D2(12L, ""D2"", ""ENTORPECENTES E/OU PSICOTRÓPICOS""),\n	ANTIMICROBIANOS(13L, ""ANTIMICROBIANOS"", null),\n	COMUNS(14L, ""COMUNS"", null);\n\n	private final Long id;\n	private final String nome;\n	private final String descricao;\n\n	@Override\n	public Class<CategoriaMedicamento> getClazz() {\n		return CategoriaMedicamento.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoFrequencia;\n\n@Getter\n@AllArgsConstructor\npublic enum TipoFrequenciaRefEnum implements Ref<TipoFrequencia> {\n	TURNO(1L, ""Turno""),\n	FREQUENCIA(2L, ""Frequência""),\n	INTERVALO(3L, ""Intervalo"");\n\n	private final Long id;\n	private final String descricao;\n\n	@Override\n	public Class<TipoFrequencia> getClazz() {\n		return TipoFrequencia.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.enums.TipoReceitaRefEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoReceita;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class TipoReceitaFactory extends DomainFactory<TipoReceita, TipoReceitaRefEnum> {\n\n	@Getter(lazy = true)\n	private static final TipoReceitaFactory instance = new TipoReceitaFactory();\n\n	@Autowired\n	public TipoReceitaFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected TipoReceitaRefEnum[] getAllRefs() {\n		return TipoReceitaRefEnum.values();\n	}\n\n	@Override\n	protected TipoReceita createInMemory(TipoReceitaRefEnum ref) {\n		TipoReceita tipoReceita = new TipoReceita();\n\n		tipoReceita.setId(ref.getId());\n		tipoReceita.setDescricao(ref.getDescricao());\n\n		return tipoReceita;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.database;\n\nimport static br.ufsc.bridge.pecassinador.receitamedicamento.database.ReceitaMedicamentoQueryDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.dto.ReceitaMedicamentoQueryDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ReceitaMedicamentoQueryDtoFactory extends DataFactory<ReceitaMedicamentoQueryDto, Spec> {\n\n	@Autowired\n	private final ReceitaMedicamentoFactory receitaMedicamentoFactory = ReceitaMedicamentoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final ReceitaMedicamentoQueryDtoFactory instance = new ReceitaMedicamentoQueryDtoFactory();\n\n	@Override protected ReceitaMedicamentoQueryDto create(Spec spec) {\n		return new ReceitaMedicamentoQueryDto(\n				spec.receitaMedicamento.get(),\n				spec.fornecidaAnteriormente.get()\n		);\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.receitaMedicamento.setDefault(receitaMedicamentoFactory::createRandom);\n		spec.fornecidaAnteriormente.setDefault(() -> false);\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<ReceitaMedicamento> receitaMedicamento = new SpecValue<>();\n		public SpecValue<Boolean> fornecidaAnteriormente = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.database;\n\nimport static br.ufsc.bridge.pecassinador.receitamedicamento.database.MedicamentoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.CategoriaMedicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.Medicamento;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class MedicamentoFactory extends DataFactory<Medicamento, Spec> {\n\n	private final CategoriaMedicamentoFactory categoriaMedicamentoFactory = CategoriaMedicamentoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final MedicamentoFactory instance = new MedicamentoFactory();\n\n	@Autowired\n	public MedicamentoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Medicamento create(Spec spec) {\n		Medicamento medicamento = new Medicamento();\n\n		medicamento.setPrincipioAtivo(spec.principioAtivo.get());\n		medicamento.setConcentracao(spec.concentracao.get());\n		medicamento.setFormaFarmaceutica(spec.formaFarmaceutica.get());\n		medicamento.setUnidadeFornecimento(spec.unidadeFornecimento.get());\n		medicamento.setCategoriaMedicamento(spec.categoriaMedicamento.get());\n		medicamento.setCodigoCatMat(spec.codigoCatMat.get());\n\n		return medicamento;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.principioAtivo.setDefault(this.faker.chuckNorris()::fact);\n		spec.concentracao.setDefault(this.faker.ancient()::god);\n		spec.formaFarmaceutica.setDefault(this.faker.beer()::name);\n		spec.unidadeFornecimento.setDefault(this.faker.educator()::secondarySchool);\n		spec.categoriaMedicamento.setDefault(this.categoriaMedicamentoFactory::createRandom);\n		spec.codigoCatMat.setDefault(this.faker.ancient()::primordial);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> principioAtivo = new SpecValue<>();\n		public SpecValue<String> concentracao = new SpecValue<>();\n		public SpecValue<String> formaFarmaceutica = new SpecValue<>();\n		public SpecValue<String> unidadeFornecimento = new SpecValue<>();\n		public SpecValue<CategoriaMedicamento> categoriaMedicamento = new SpecValue<>();\n		public SpecValue<String> codigoCatMat = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.database;\n\nimport static br.ufsc.bridge.pecassinador.receitamedicamento.database.ReceitaMedicamentoDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDate;\nimport java.util.concurrent.TimeUnit;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.common.util.DateUtils;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoFrequenciaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoReceitaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ReceitaMedicamentoDtoFactory extends DataFactory<ReceitaMedicamentoDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final ReceitaMedicamentoDtoFactory instance = new ReceitaMedicamentoDtoFactory();\n	private final MedicamentoDtoFactory medicamentoDtoFactory = MedicamentoDtoFactory.getInstance();\n\n	@Override\n	protected ReceitaMedicamentoDto create(Spec spec) {\n		ReceitaMedicamentoDto dto = new ReceitaMedicamentoDto();\n		dto.setId(spec.id.get());\n		dto.setPosologia(spec.posologia.get());\n		dto.setQuantidadeReceitada(spec.quantidadeReceitada.get());\n		dto.setViaAdministracao(spec.viaAdministracao.get());\n		dto.setUsoContinuo(spec.usoContinuo.get());\n		dto.setMedicamento(spec.medicamento.get());\n		dto.setDataInicioTratamento(spec.dataInicioTratamento.get());\n		dto.setDataFimTratamento(spec.dataFimTratamento.get());\n		dto.setDuracaoTratamento(spec.duracaoTratamento.get());\n		dto.setDose(spec.dose.get());\n		dto.setTipoFrequencia(spec.tipoFrequencia.get());\n		dto.setFrequenciaDose(spec.frequenciaDose.get());\n		dto.setDoseUnica(spec.doseUnica.get());\n		dto.setRecomendacao(spec.recomendacao.get());\n		dto.setTipoReceita(spec.tipoReceita.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.id.setDefault(faker.number()::randomNumber);\n		spec.posologia.setDefault(faker.lorem()::sentence);\n		spec.quantidadeReceitada.setDefault(faker.number()::randomNumber);\n		spec.viaAdministracao.setDefault(faker.lorem()::word);\n		spec.usoContinuo.setDefault(faker.bool()::bool);\n		spec.medicamento.setDefault(medicamentoDtoFactory::createRandom);\n		spec.dataInicioTratamento.setDefault(() -> DateUtils.asLocalDate(faker.date().past(10, TimeUnit.DAYS)));\n		spec.dataFimTratamento.setDefault(() -> DateUtils.asLocalDate(faker.date().future(10, TimeUnit.DAYS)));\n		spec.duracaoTratamento.setDefault(faker.lorem()::word);\n		spec.dose.setDefault(faker.lorem()::word);\n		spec.tipoFrequencia.setDefault(() -> faker.options().option(TipoFrequenciaEnum.class));\n		spec.frequenciaDose.setDefault(faker.lorem()::word);\n		spec.doseUnica.setDefault(() -> false);\n		spec.recomendacao.setDefault(faker.lorem()::sentence);\n		spec.tipoReceita.setDefault(() -> faker.options().option(TipoReceitaEnum.class));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> id = new SpecValue<>();\n		public final SpecValue<String> posologia = new SpecValue<>();\n		public final SpecValue<Long> quantidadeReceitada = new SpecValue<>();\n		public final SpecValue<String> viaAdministracao = new SpecValue<>();\n		public final SpecValue<Boolean> usoContinuo = new SpecValue<>();\n		public final SpecValue<MedicamentoDto> medicamento = new SpecValue<>();\n		public final SpecValue<LocalDate> dataInicioTratamento = new SpecValue<>();\n		public final SpecValue<LocalDate> dataFimTratamento = new SpecValue<>();\n		public final SpecValue<String> duracaoTratamento = new SpecValue<>();\n		public final SpecValue<String> dose = new SpecValue<>();\n		public final SpecValue<TipoFrequenciaEnum> tipoFrequencia = new SpecValue<>();\n		public final SpecValue<String> frequenciaDose = new SpecValue<>();\n		public final SpecValue<Boolean> doseUnica = new SpecValue<>();\n		public final SpecValue<String> recomendacao = new SpecValue<>();\n		public final SpecValue<TipoReceitaEnum> tipoReceita = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.enums.CategoriaMedicamentoRefEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.CategoriaMedicamento;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class CategoriaMedicamentoFactory extends DomainFactory<CategoriaMedicamento, CategoriaMedicamentoRefEnum> {\n\n	@Getter(lazy = true)\n	private static final CategoriaMedicamentoFactory instance = new CategoriaMedicamentoFactory();\n\n	@Autowired\n	public CategoriaMedicamentoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected CategoriaMedicamentoRefEnum[] getAllRefs() {\n		return CategoriaMedicamentoRefEnum.values();\n	}\n\n	@Override\n	protected CategoriaMedicamento createInMemory(CategoriaMedicamentoRefEnum ref) {\n		CategoriaMedicamento categoriaMedicamento = new CategoriaMedicamento();\n\n		categoriaMedicamento.setId(ref.getId());\n		categoriaMedicamento.setNome(ref.getNome());\n		categoriaMedicamento.setDescricao(ref.getDescricao());\n\n		return categoriaMedicamento;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.database;\n\nimport static br.ufsc.bridge.pecassinador.receitamedicamento.database.MedicamentoDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.CategoriaMedicamentoEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MedicamentoDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class MedicamentoDtoFactory extends DataFactory<MedicamentoDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final MedicamentoDtoFactory instance = new MedicamentoDtoFactory();\n\n	@Override\n	protected MedicamentoDto create(Spec spec) {\n		MedicamentoDto dto = new MedicamentoDto();\n		dto.setPrincipioAtivo(spec.principioAtivo.get());\n		dto.setUnidadeFornecimento(spec.unidadeFornecimento.get());\n		dto.setConcentracao(spec.concentracao.get());\n		dto.setFormaFarmaceutica(spec.formaFarmaceutica.get());\n		dto.setCategoriaMedicamento(spec.categoriaMedicamento.get());\n		dto.setCodigoCatMat(spec.codigoCatMat.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.principioAtivo.setDefault(faker.lorem()::word);\n		spec.unidadeFornecimento.setDefault(faker.lorem()::word);\n		spec.concentracao.setDefault(faker.lorem()::word);\n		spec.formaFarmaceutica.setDefault(faker.lorem()::word);\n		spec.categoriaMedicamento.setDefault(() -> faker.options().option(CategoriaMedicamentoEnum.class));\n		spec.codigoCatMat.setDefault(faker.lorem()::word);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> principioAtivo = new SpecValue<>();\n		public final SpecValue<String> unidadeFornecimento = new SpecValue<>();\n		public final SpecValue<String> concentracao = new SpecValue<>();\n		public final SpecValue<String> formaFarmaceutica = new SpecValue<>();\n		public final SpecValue<CategoriaMedicamentoEnum> categoriaMedicamento = new SpecValue<>();\n		public final SpecValue<String> codigoCatMat = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.enums.TipoFrequenciaRefEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoFrequencia;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class TipoFrequenciaFactory extends DomainFactory<TipoFrequencia, TipoFrequenciaRefEnum> {\n\n	@Getter(lazy = true)\n	private static final TipoFrequenciaFactory instance = new TipoFrequenciaFactory();\n\n	@Autowired\n	public TipoFrequenciaFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected TipoFrequenciaRefEnum[] getAllRefs() {\n		return TipoFrequenciaRefEnum.values();\n	}\n\n	@Override\n	protected TipoFrequencia createInMemory(TipoFrequenciaRefEnum ref) {\n		TipoFrequencia tipoFrequencia = new TipoFrequencia();\n\n		tipoFrequencia.setId(ref.getId());\n		tipoFrequencia.setDescricao(ref.getDescricao());\n\n		return tipoFrequencia;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.database;\n\nimport static br.ufsc.bridge.pecassinador.receitamedicamento.database.ReceitaMedicamentoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport java.time.LocalDate;\nimport java.util.concurrent.TimeUnit;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.common.util.DateUtils;\nimport br.ufsc.bridge.pecassinador.documento.common.database.DocumentoFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.Medicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoFrequencia;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoReceita;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ReceitaMedicamentoFactory extends DataFactory<ReceitaMedicamento, Spec> {\n\n	@Getter(lazy = true)\n	private static final ReceitaMedicamentoFactory instance = new ReceitaMedicamentoFactory();\n	@Autowired\n	private final MedicamentoFactory medicamentoFactory = MedicamentoFactory.getInstance();\n	@Autowired\n	private final TipoFrequenciaFactory tipoFrequenciaFactory = TipoFrequenciaFactory.getInstance();\n	@Autowired\n	private final TipoReceitaFactory tipoReceitaFactory = TipoReceitaFactory.getInstance();\n	@Autowired\n	private final DocumentoFactory documentoFactory = DocumentoFactory.getInstance();\n\n	@Autowired\n	public ReceitaMedicamentoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected ReceitaMedicamento create(Spec spec) {\n		ReceitaMedicamento receitaMedicamento = new ReceitaMedicamento();\n\n		receitaMedicamento.setPosologia(spec.posologia.get());\n		receitaMedicamento.setQuantidadeReceitada(spec.quantidadeReceitada.get());\n		receitaMedicamento.setViaAdministracao(spec.viaAdministracao.get());\n		receitaMedicamento.setUsoContinuo(spec.usoContinuo.get());\n		receitaMedicamento.setMedicamento(spec.medicamento.get());\n		receitaMedicamento.setDataInicioTratamento(spec.dataInicioTratamento.get());\n		receitaMedicamento.setDataFimTratamento(spec.dataFimTratamento.get());\n		receitaMedicamento.setDuracaoTratamento(spec.duracaoTratamento.get());\n		receitaMedicamento.setDose(spec.dose.get());\n		receitaMedicamento.setTipoFrequencia(spec.tipoFrequencia.get());\n		receitaMedicamento.setFrequenciaDose(spec.frequenciaDose.get());\n		receitaMedicamento.setDoseUnica(spec.doseUnica.get());\n		receitaMedicamento.setRecomendacao(spec.recomendacao.get());\n		receitaMedicamento.setTipoReceita(spec.tipoReceita.get());\n		receitaMedicamento.setDocumento(spec.documento.get());\n\n		return receitaMedicamento;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.posologia.setDefault(faker.lorem()::sentence);\n		spec.quantidadeReceitada.setDefault(faker.number()::randomNumber);\n		spec.viaAdministracao.setDefault(faker.lorem()::word);\n		spec.usoContinuo.setDefault(faker.bool()::bool);\n		spec.medicamento.setDefault(() -> this.medicamentoFactory.createRandom());\n		spec.dataInicioTratamento.setDefault(() -> DateUtils.asLocalDate(faker.date().past(10, TimeUnit.DAYS)));\n		spec.dataFimTratamento.setDefault(() -> DateUtils.asLocalDate(faker.date().future(10, TimeUnit.DAYS)));\n		spec.duracaoTratamento.setDefault(faker.lorem()::word);\n		spec.dose.setDefault(faker.lorem()::word);\n		spec.tipoFrequencia.setDefault(() -> this.tipoFrequenciaFactory.createRandom());\n		spec.frequenciaDose.setDefault(faker.lorem()::word);\n		spec.doseUnica.setDefault(faker.bool()::bool);\n		spec.recomendacao.setDefault(faker.lorem()::sentence);\n		spec.tipoReceita.setDefault(() -> this.tipoReceitaFactory.createRandom());\n		spec.documento.setDefault(() -> this.documentoFactory.createRandom());\n\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> posologia = new SpecValue<>();\n		public final SpecValue<Long> quantidadeReceitada = new SpecValue<>();\n		public final SpecValue<String> viaAdministracao = new SpecValue<>();\n		public final SpecValue<Boolean> usoContinuo = new SpecValue<>();\n		public final SpecValue<Medicamento> medicamento = new SpecValue<>();\n		public final SpecValue<LocalDate> dataInicioTratamento = new SpecValue<>();\n		public final SpecValue<LocalDate> dataFimTratamento = new SpecValue<>();\n		public final SpecValue<String> duracaoTratamento = new SpecValue<>();\n		public final SpecValue<String> dose = new SpecValue<>();\n		public final SpecValue<TipoFrequencia> tipoFrequencia = new SpecValue<>();\n		public final SpecValue<String> frequenciaDose = new SpecValue<>();\n		public final SpecValue<Boolean> doseUnica = new SpecValue<>();\n		public final SpecValue<String> recomendacao = new SpecValue<>();\n		public final SpecValue<TipoReceita> tipoReceita = new SpecValue<>();\n		public final SpecValue<Documento> documento = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.repository;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.database.MedicamentoFactory;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.Medicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.repository.MedicamentoRepository;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class MedicamentoRepositoryDatabaseTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@Autowired\n	private MedicamentoRepository medicamentoRepository;\n\n	@Autowired\n	private MedicamentoFactory medicamentoFactory;\n\n	@Test\n	@DisplayName(""Deve retornar o medicamento corretamente"")\n	public void testFindMedicamento() {\n		this.medicamentoFactory.createRandom(3);\n		Medicamento medicamento = this.medicamentoFactory.createRandom();\n\n		Optional<Medicamento> dbRefOpt = this.medicamentoRepository.findMedicamento(\n				medicamento.getPrincipioAtivo(),\n				medicamento.getConcentracao(),\n				medicamento.getFormaFarmaceutica(),\n				medicamento.getUnidadeFornecimento(),\n				medicamento.getCategoriaMedicamento().getId(),\n				medicamento.getCodigoCatMat()\n		);\n\n		assertThat(dbRefOpt).isPresent();\n		assertThat(dbRefOpt.get().getPrincipioAtivo()).isEqualTo(medicamento.getPrincipioAtivo());\n		assertThat(dbRefOpt.get().getConcentracao()).isEqualTo(medicamento.getConcentracao());\n		assertThat(dbRefOpt.get().getFormaFarmaceutica()).isEqualTo(medicamento.getFormaFarmaceutica());\n		assertThat(dbRefOpt.get().getUnidadeFornecimento()).isEqualTo(medicamento.getUnidadeFornecimento());\n		assertThat(dbRefOpt.get().getCategoriaMedicamento()).isEqualTo(medicamento.getCategoriaMedicamento());\n		assertThat(dbRefOpt.get().getCodigoCatMat()).isEqualTo(medicamento.getCodigoCatMat());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo para um medicamento que não existe"")\n	public void testFindMedicamentoInvalid() {\n		this.medicamentoFactory.createRandom(3);\n\n		Optional<Medicamento> dbRefOpt = this.medicamentoRepository.findMedicamento(\n				this.faker.chuckNorris().fact(),\n				this.faker.ancient().god(),\n				this.faker.beer().name(),\n				this.faker.educator().secondarySchool(),\n				this.faker.number().randomNumber(),\n				this.faker.ancient().primordial()\n		);\n\n		assertThat(dbRefOpt).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve distinguir entre dois medicamentos com um ou mais atributos diferentes"")\n	public void testFindDifferentMedicamento() {\n		String principioAtivoA = ""PRINCIPIO ATIVO A"";\n		String principioAtivoB = ""PRINCIPIO ATIVO B"";\n		Medicamento medicamentoA = this.medicamentoFactory.create(spec -> {\n			spec.principioAtivo.set(principioAtivoA);\n		});\n		Medicamento medicamentoB = this.medicamentoFactory.create(spec -> {\n			spec.principioAtivo.set(principioAtivoB);\n		});\n\n		Optional<Medicamento> dbRefOptA = this.medicamentoRepository.findMedicamento(\n				principioAtivoA,\n				medicamentoA.getConcentracao(),\n				medicamentoA.getFormaFarmaceutica(),\n				medicamentoA.getUnidadeFornecimento(),\n				medicamentoA.getCategoriaMedicamento().getId(),\n				medicamentoA.getCodigoCatMat()\n		);\n\n		Optional<Medicamento> dbRefOptB = this.medicamentoRepository.findMedicamento(\n				principioAtivoB,\n				medicamentoB.getConcentracao(),\n				medicamentoB.getFormaFarmaceutica(),\n				medicamentoB.getUnidadeFornecimento(),\n				medicamentoB.getCategoriaMedicamento().getId(),\n				medicamentoB.getCodigoCatMat()\n		);\n\n		assertThat(dbRefOptA).isPresent();\n		assertThat(dbRefOptB).isPresent();\n		assertThat(dbRefOptA.get().getPrincipioAtivo()).isNotEqualTo(dbRefOptB.get().getPrincipioAtivo());\n		assertThat(dbRefOptA.get().getPrincipioAtivo()).isEqualTo(principioAtivoA);\n		assertThat(dbRefOptB.get().getPrincipioAtivo()).isEqualTo(principioAtivoB);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar o medicamento correto desconsiderando a sua categoria e código CATMAT caso estes sejam nulos no banco e na busca"")\n	public void testFindMedicamentoNullCategoryAndCatMat() {\n		this.medicamentoFactory.createRandom(3);\n\n		Medicamento medicamento = this.medicamentoFactory.create(spec -> {\n			spec.categoriaMedicamento.set(null);\n			spec.codigoCatMat.set(null);\n		});\n\n		Optional<Medicamento> dbRefOpt = this.medicamentoRepository.findMedicamento(\n				medicamento.getPrincipioAtivo(),\n				medicamento.getConcentracao(),\n				medicamento.getFormaFarmaceutica(),\n				medicamento.getUnidadeFornecimento(),\n				null,\n				null\n		);\n\n		assertThat(dbRefOpt).isPresent();\n		assertThat(dbRefOpt.get().getPrincipioAtivo()).isEqualTo(medicamento.getPrincipioAtivo());\n		assertThat(dbRefOpt.get().getConcentracao()).isEqualTo(medicamento.getConcentracao());\n		assertThat(dbRefOpt.get().getFormaFarmaceutica()).isEqualTo(medicamento.getFormaFarmaceutica());\n		assertThat(dbRefOpt.get().getUnidadeFornecimento()).isEqualTo(medicamento.getUnidadeFornecimento());\n		assertThat(dbRefOpt.get().getCategoriaMedicamento()).isNull();\n		assertThat(dbRefOpt.get().getCodigoCatMat()).isNull();\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar o medicamento caso os atributos sejam iguais, mas a categoria e o código CATMAT sejam nulos na busca"")\n	public void testFindMedicamentoNullCategoryAndCatMatInvalid() {\n		this.medicamentoFactory.createRandom(3);\n\n		Medicamento medicamento = this.medicamentoFactory.createRandom();\n\n		Optional<Medicamento> dbRefOpt = this.medicamentoRepository.findMedicamento(\n				medicamento.getPrincipioAtivo(),\n				medicamento.getConcentracao(),\n				medicamento.getFormaFarmaceutica(),\n				medicamento.getUnidadeFornecimento(),\n				null,\n				null\n		);\n\n		assertThat(dbRefOpt).isEmpty();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.repository;\n\nimport static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.pecassinador.documento.common.database.DocumentoFactory;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.fornecimento.database.FornecimentoReceitaFactory;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.dto.ReceitaMedicamentoQueryDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.database.ReceitaMedicamentoFactory;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.repository.ReceitaMedicamentoRepository;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class ReceitaMedicamentoRepositoryDatabaseTest {\n\n	@Autowired\n	private ReceitaMedicamentoRepository receitaMedicamentoRepository;\n\n	@Autowired\n	private ReceitaMedicamentoFactory receitaMedicamentoFactory;\n\n	@Autowired\n	private FornecimentoReceitaFactory fornecimentoReceitaFactory;\n\n	@Autowired\n	private DocumentoFactory documentoFactory;\n\n	@Test\n	@DisplayName(""Deve encontrar receitas de medicamento pelo código de acesso"")\n	public void testFindAllByCodigoAcesso() {\n		String codigoAcesso = randomAlphanumeric(8);\n		Documento documento = documentoFactory.create(spec -> {spec.codigoAcesso.set(codigoAcesso);});\n		receitaMedicamentoFactory.create(spec -> {\n			spec.documento.set(documento);\n		});\n\n		receitaMedicamentoFactory.createRandom();\n\n		List<ReceitaMedicamentoQueryDto> receitaMedicamentos = receitaMedicamentoRepository.findAllByCodigoAcessoDocumento(codigoAcesso);\n\n		assertThat(receitaMedicamentos).hasSize(1);\n		assertThat(receitaMedicamentos.get(0).receitaMedicamento().getDocumento().getCodigoAcesso()).isEqualTo(codigoAcesso);\n	}\n\n	@Test\n	@DisplayName(""Deve recuperar uma receita e o medicamento associado a partir do ID da receita"")\n	public void testFindById() {\n		receitaMedicamentoFactory.createRandom();\n		ReceitaMedicamento expected = receitaMedicamentoFactory.createRandom();\n\n		Optional<ReceitaMedicamento> actual = receitaMedicamentoRepository.findByReceitaId(expected.getId());\n\n		assertThat(actual).isPresent();\n		assertThat(actual.get()).isEqualTo(expected);\n		assertThat(actual.get().getMedicamento()).isEqualTo(expected.getMedicamento());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio para uma consulta por ID inexistente"")\n	public void testFindByInvalidId() {\n		receitaMedicamentoFactory.createRandom();\n		ReceitaMedicamento reference = receitaMedicamentoFactory.createRandom();\n\n		Optional<ReceitaMedicamento> actual = receitaMedicamentoRepository.findByReceitaId(reference.getId() + 1);\n\n		assertThat(actual).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia para um código de acesso inexistente"")\n	public void testFindAllByCodigoAcessoExpectEmpty() {\n		String codigoAcessoInexistente = randomAlphanumeric(8);\n		Documento documento = documentoFactory.createRandom();\n		receitaMedicamentoFactory.create(spec -> {\n			spec.documento.set(documento);\n		});\n\n		List<ReceitaMedicamentoQueryDto> receitaMedicamentos = receitaMedicamentoRepository.findAllByCodigoAcessoDocumento(codigoAcessoInexistente);\n\n		assertThat(receitaMedicamentos).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve indicar quais receitas ja foram fornecidas anteriormente"")\n	public void testFindFornecidas() {\n		String codigoAcesso = randomAlphanumeric(8);\n		Documento documento = documentoFactory.create(spec -> {spec.codigoAcesso.set(codigoAcesso);});\n		ReceitaMedicamento receitaA = receitaMedicamentoFactory.create(spec -> {\n			spec.documento.set(documento);\n		});\n		ReceitaMedicamento receitaB = receitaMedicamentoFactory.create(spec -> {\n			spec.documento.set(documento);\n		});\n		fornecimentoReceitaFactory.create(spec -> {\n			spec.receitaMedicamento.set(receitaB);\n		});\n\n		List<ReceitaMedicamentoQueryDto> receitaMedicamentos = receitaMedicamentoRepository.findAllByCodigoAcessoDocumento(codigoAcesso);\n\n		assertThat(receitaMedicamentos).containsExactlyInAnyOrderElementsOf(\n				Arrays.asList(\n						new ReceitaMedicamentoQueryDto(receitaA, false),\n						new ReceitaMedicamentoQueryDto(receitaB, true)\n				)\n		);\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport lombok.val;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.pecassinador.emissor.database.CboDtoFactory;\nimport br.ufsc.bridge.pecassinador.emissor.latest.validator.CboDtoValidator;\n\npublic class CboDtoValidatorTest {\n	private final CboDtoFactory factory = CboDtoFactory.getInstance();\n	private CboDtoValidator validator;\n\n	@BeforeEach\n	public void setup() {\n		this.validator = new CboDtoValidator();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		val input = this.factory.createRandom();\n\n		val formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto inválido no caso de receber valor nulo no campo de descrição"")\n	public void testEmptyDescricaoField() {\n		val input = this.factory.create(spec -> {\n			spec.descricao.set(null);\n		});\n\n		val formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{descricao=Preenchimento obrigatório}"");\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto inválido no caso de receber valor nulo no campo de código CBO"")\n	public void testEmptyCodCboField() {\n		val input = this.factory.create(spec -> {\n			spec.codigoCbo2002.set(null);\n		});\n\n		val formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{codigoCbo2002=Preenchimento obrigatório}"");\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport br.ufsc.bridge.pecassinador.emissor.database.EmissorDtoFactory;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.validator.CboDtoValidator;\nimport br.ufsc.bridge.pecassinador.emissor.latest.validator.EmissorDtoValidator;\n\npublic class EmissorDtoValidatorTest {\n	private final EmissorDtoFactory factory = EmissorDtoFactory.getInstance();\n	private EmissorDtoValidator validator;\n	private CboDtoValidator cboDtoValidator;\n\n	private static Stream<Arguments> provideInputsForValidatorRuleCheckTest() {\n		EmissorDtoFactory localFactory = EmissorDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.cpf.set(null);}), ""cpf""),\n				Arguments.of(localFactory.create(spec -> {spec.nome.set(null);}), ""nome""),\n				Arguments.of(localFactory.create(spec -> {spec.cbo.set(null);}), ""cbo""),\n				Arguments.of(localFactory.create(spec -> {spec.siglaConselhoClasse.set(null);}), ""siglaConselhoClasse""),\n				Arguments.of(localFactory.create(spec -> {spec.numeroConselhoClasse.set(null);}), ""numeroConselhoClasse""),\n				Arguments.of(localFactory.create(spec -> {spec.ufEmissoraConselhoClasse.set(null);}), ""ufEmissoraConselhoClasse"")\n\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.cboDtoValidator = mock(CboDtoValidator.class);\n\n		this.validator = new EmissorDtoValidator(\n				this.cboDtoValidator\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		EmissorDto input = this.factory.createRandom();\n\n		when(cboDtoValidator.validate(input.getCbo())).thenReturn(Validator.of(input.getCbo()));\n\n		Validator<EmissorDto> formError = validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(cboDtoValidator).validate(input.getCbo());\n\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForValidatorRuleCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber null em campo obrigatório"")\n	public void testNullChecks(EmissorDto input, String errorField) {\n		Validator<EmissorDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n		verifyNoInteractions(cboDtoValidator);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber um input com CPF inválido"")\n	public void testInvalidCpf() {\n		EmissorDto input = this.factory.create(spec -> {spec.cpf.set(""00000000000"");});\n\n		Validator<EmissorDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{cpf=CPF inválido}"");\n		verifyNoInteractions(cboDtoValidator);\n	}\n\n	@Test\n	@DisplayName(""Deve incluir erros retornados pelos validadores auxiliares no resultado"")\n	public void testWriteAggregateValidatorErrors() {\n		EmissorDto input = this.factory.createRandom();\n		Validator<CboDto> cboError = Validator.of(input.getCbo());\n		cboError.error(""{descricao=Preenchimento obrigatório}"");\n		when(cboDtoValidator.validate(input.getCbo())).thenReturn(cboError);\n\n		Validator<EmissorDto> formError = validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(""{cbo={descricao=Preenchimento obrigatório}}"");\n		verify(cboDtoValidator).validate(input.getCbo());\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.ConselhoClasse;\n\n@Getter\n@AllArgsConstructor\npublic enum ConselhoClasseRefEnum implements Ref<ConselhoClasse> {\n\n	CRFA(1L, ""CRFA"", ""CONSELHO REGIONAL DE FONOAUDIOLOGIA""),\n	CREF(2L, ""CREF"", ""CONSELHO REGIONAL DE EDUCAÇÃO FÍSICA""),\n	CRESS(3L, ""CRESS"", ""CONSELHO REGIONAL DE ASSISTÊNCIA SOCIAL""),\n	COREN(4L, ""COREN"", ""CONSELHO REGIONAL DE ENFERMAGEM""),\n	CRF(5L, ""CRF"", ""CONSELHO REGIONAL DE FARMÁCIA""),\n	CREFITO(6L, ""CREFITO"", ""CONSELHO REGIONAL DE FISIOTERAPIA E TERAPIA OCUPACIONAL""),\n	CRM(7L, ""CRM"", ""CONSELHO REGIONAL DE MEDICINA""),\n	CRMV(8L, ""CRMV"", ""CONSELHO REGIONAL DE MEDICINA VETERINÁRIA""),\n	CRN(9L, ""CRN"", ""CONSELHO REGIONAL DE NUTRIÇÃO""),\n	CRO(10L, ""CRO"", ""CONSELHO REGIONAL DE ODONTOLOGIA""),\n	CRP(11L, ""CRP"", ""CONSELHO REGIONAL DE PSICOLOGIA"");\n\n	private final Long id;\n	private final String sigla;\n	private final String nome;\n\n	@Override\n	public Class<ConselhoClasse> getClazz() {\n		return ConselhoClasse.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.enums;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\nimport br.ufsc.bridge.factory.Ref;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Cbo;\n\n@Getter\n@AllArgsConstructor\npublic enum CboRefEnum implements Ref<Cbo> {\n\n	MEDICO_DA_ESTRATEGIA_DE_SAUDE_DA_FAMILIA(1L, ""Médico da Estratégia de Saúde da Família"", ""225142""),\n	MEDICO_ALERGISTA_E_IMUNOLOGISTA(2L, ""Médico alergista e imunologista"", ""225110"");\n\n	private final Long id;\n	private final String descricao;\n	private final String codigoCbo2002;\n\n	@Override\n	public Class<Cbo> getClazz() {\n		return Cbo.class;\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.emissor.enums.ConselhoClasseRefEnum;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.ConselhoClasse;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ConselhoClasseFactory extends DomainFactory<ConselhoClasse, ConselhoClasseRefEnum> {\n\n	@Getter(lazy = true)\n	private static final ConselhoClasseFactory instance = new ConselhoClasseFactory();\n\n	@Autowired\n	public ConselhoClasseFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected ConselhoClasseRefEnum[] getAllRefs() {\n		return ConselhoClasseRefEnum.values();\n	}\n\n	@Override\n	protected ConselhoClasse createInMemory(ConselhoClasseRefEnum ref) {\n		ConselhoClasse conselhoClasse = new ConselhoClasse();\n\n		conselhoClasse.setId(ref.getId());\n		conselhoClasse.setSigla(ref.getSigla());\n		conselhoClasse.setNome(ref.getNome());\n\n		return conselhoClasse;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.database;\n\nimport static br.ufsc.bridge.pecassinador.emissor.database.CboDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.emissor.enums.CboRefEnum;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class CboDtoFactory extends DataFactory<CboDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final CboDtoFactory instance = new CboDtoFactory();\n\n	@Override\n	protected CboDto create(Spec spec) {\n		CboDto dto = new CboDto();\n		dto.setDescricao(spec.descricao.get());\n		dto.setCodigoCbo2002(spec.codigoCbo2002.get());\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		CboRefEnum ref = this.faker.options().option(CboRefEnum.class);\n		spec.descricao.setDefault(ref::getDescricao);\n		spec.codigoCbo2002.setDefault(ref::getCodigoCbo2002);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> descricao = new SpecValue<String>();\n		public final SpecValue<String> codigoCbo2002 = new SpecValue<String>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.database;\n\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.DomainFactory;\nimport br.ufsc.bridge.pecassinador.emissor.enums.CboRefEnum;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Cbo;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class CboFactory extends DomainFactory<Cbo, CboRefEnum> {\n\n	@Getter(lazy = true)\n	private static final CboFactory instance = new CboFactory();\n\n	@Autowired\n	public CboFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected CboRefEnum[] getAllRefs() {\n		return CboRefEnum.values();\n	}\n\n	@Override\n	protected Cbo createInMemory(CboRefEnum ref) {\n		Cbo cbo = new Cbo();\n\n		cbo.setId(ref.getId());\n		cbo.setDescricao(ref.getDescricao());\n		cbo.setCodigoCbo2002(ref.getCodigoCbo2002());\n\n		return cbo;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.database;\n\nimport static br.ufsc.bridge.pecassinador.emissor.database.EmissorDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.emissor.common.enums.ConselhoClasseEnum;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class EmissorDtoFactory extends DataFactory<EmissorDto, Spec> {\n\n	@Autowired\n	private final CboDtoFactory cboDtoFactory = CboDtoFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final EmissorDtoFactory instance = new EmissorDtoFactory();\n\n	@Override\n	protected EmissorDto create(Spec spec) {\n		EmissorDto dto = new EmissorDto();\n		dto.setId(spec.id.get());\n		dto.setCpf(spec.cpf.get());\n		dto.setNome(spec.nome.get());\n		dto.setSiglaConselhoClasse(spec.siglaConselhoClasse.get());\n		dto.setUfEmissoraConselhoClasse(spec.ufEmissoraConselhoClasse.get());\n		dto.setNumeroConselhoClasse(spec.numeroConselhoClasse.get());\n		dto.setCbo(spec.cbo.get());\n		return dto;\n	}\n\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n		spec.id.setDefault(faker.number()::randomNumber);\n		spec.cpf.setDefault(faker::cpf);\n		spec.nome.setDefault(faker.lorem()::word);\n		spec.numeroConselhoClasse.setDefault(() -> faker.number().digits(6));\n		spec.siglaConselhoClasse.setDefault(() -> faker.options().option(ConselhoClasseEnum.class).name());\n		spec.ufEmissoraConselhoClasse.setDefault(() -> faker.options().option(UfEnum.class).name());\n		spec.cbo.setDefault(cboDtoFactory::createRandom);\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> id = new SpecValue<>();\n		public final SpecValue<String> cpf = new SpecValue<>();\n		public final SpecValue<String> nome = new SpecValue<>();\n		public final SpecValue<String> numeroConselhoClasse = new SpecValue<>();\n		public final SpecValue<String> siglaConselhoClasse = new SpecValue<>();\n		public final SpecValue<String> ufEmissoraConselhoClasse = new SpecValue<>();\n		public final SpecValue<CboDto> cbo = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.database;\n\nimport static br.ufsc.bridge.pecassinador.emissor.database.EmissorFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.localidade.database.UfFactory;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Cbo;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.ConselhoClasse;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Emissor;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class EmissorFactory extends DataFactory<Emissor, Spec> {\n\n	@Autowired\n	private final ConselhoClasseFactory conselhoClasseFactory = ConselhoClasseFactory.getInstance();\n\n	@Autowired\n	private final UfFactory ufFactory = UfFactory.getInstance();\n\n	@Autowired\n	private final CboFactory cboFactory = CboFactory.getInstance();\n\n	@Getter(lazy = true)\n	private static final EmissorFactory instance = new EmissorFactory();\n\n	@Autowired\n	public EmissorFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Emissor create(Spec spec) {\n		Emissor emissor = new Emissor();\n\n		emissor.setCpf(spec.cpf.get());\n		emissor.setNome(spec.nome.get());\n		emissor.setConselhoClasse(spec.conselhoClasse.get());\n		emissor.setUfConselhoClasse(spec.ufConselhoClasse.get());\n		emissor.setNumeroConselhoClasse(spec.numeroConselhoClasse.get());\n		emissor.setCbo(spec.cbo.get());\n\n		return emissor;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.cpf.setDefault(this.faker::cpf);\n		spec.nome.setDefault(this.faker.name()::fullName);\n		spec.conselhoClasse.setDefault(this.conselhoClasseFactory::createRandom);\n		spec.ufConselhoClasse.setDefault(this.ufFactory::createRandom);\n		spec.numeroConselhoClasse.setDefault(() -> String.valueOf(this.faker.number().randomNumber()));\n		spec.cbo.setDefault(this.cboFactory::createRandom);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> cpf = new SpecValue<>();\n		public SpecValue<String> nome = new SpecValue<>();\n		public SpecValue<ConselhoClasse> conselhoClasse = new SpecValue<>();\n		public SpecValue<Uf> ufConselhoClasse = new SpecValue<>();\n		public SpecValue<String> numeroConselhoClasse = new SpecValue<>();\n		public SpecValue<Cbo> cbo = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.repository;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.emissor.database.CboFactory;\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Cbo;\nimport br.ufsc.bridge.pecassinador.emissor.latest.repository.CboRepository;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class CboRepositoryDatabaseTest {\n\n	@Autowired\n	private CboRepository cboRepository;\n\n	@Autowired\n	private CboFactory cboFactory;\n\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@Test\n	@DisplayName(""Deve retornar o cbo corretamente pelo código do cbo"")\n	public void testFindByCodigoCbo2002() {\n		Cbo cbo = this.cboFactory.createRandom();\n\n		Optional<Cbo> optionalCbo = this.cboRepository.findByCodigoCbo2002(cbo.getCodigoCbo2002());\n\n		assertThat(optionalCbo).isPresent();\n		assertThat(optionalCbo.get().getDescricao()).isEqualTo(cbo.getDescricao());\n		assertThat(optionalCbo.get().getCodigoCbo2002()).isEqualTo(cbo.getCodigoCbo2002());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar o cbo quando o código do cbo não se referir a um cbo existente"")\n	public void testFindByCodigoCbo2002Invalid() {\n		this.cboFactory.createRandom();\n\n		Optional<Cbo> optionalCbo = this.cboRepository.findByCodigoCbo2002(String.valueOf(this.faker.number().randomNumber(6, true)));\n\n		assertThat(optionalCbo).isEmpty();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.validator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.ArgumentMatchers;\n\nimport br.ufsc.bridge.pecassinador.cidadao.latest.validator.CidadaoDtoValidator;\nimport br.ufsc.bridge.pecassinador.common.validation.Validator;\nimport br.ufsc.bridge.pecassinador.documento.latest.database.DocumentoTemporarioCreateDtoFactory;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.validator.EmissorDtoValidator;\nimport br.ufsc.bridge.pecassinador.prescricao.latest.validator.PrescricaoValidator;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.validator.ReceitaMedicamentoDtoValidator;\nimport br.ufsc.bridge.platform.validation.form.errors.FormError;\n\npublic class PrescricaoValidatorTest {\n	private final DocumentoTemporarioCreateDtoFactory factory = DocumentoTemporarioCreateDtoFactory.getInstance();\n	private PrescricaoValidator validator;\n	private EmissorDtoValidator emissorDtoValidator;\n	private CidadaoDtoValidator cidadaoDtoValidator;\n	private ReceitaMedicamentoDtoValidator receitaMedicamentoDtoValidator;\n\n	private static Stream<Arguments> provideInputsForNullCheckTest() {\n		DocumentoTemporarioCreateDtoFactory localFactory = DocumentoTemporarioCreateDtoFactory.getInstance();\n		return Stream.of(\n				Arguments.of(localFactory.create(spec -> {spec.prescritor.set(null);}), ""prescritor""),\n				Arguments.of(localFactory.create(spec -> {spec.cidadao.set(null);}), ""cidadao""),\n				Arguments.of(localFactory.create(spec -> {spec.dataInicioAtendimento.set(null);}), ""dataInicioAtendimento"")\n\n		);\n	}\n\n	@BeforeEach\n	public void setup() {\n		this.emissorDtoValidator = mock(EmissorDtoValidator.class);\n		this.cidadaoDtoValidator = mock(CidadaoDtoValidator.class);\n		this.receitaMedicamentoDtoValidator = mock(ReceitaMedicamentoDtoValidator.class);\n\n		this.validator = new PrescricaoValidator(\n				this.emissorDtoValidator,\n				this.cidadaoDtoValidator,\n				this.receitaMedicamentoDtoValidator\n		);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar um objeto válido no caso de receber um input válido"")\n	public void testValidInput() {\n		DocumentoTemporarioCreateDto input = this.factory.createRandom();\n\n		when(this.emissorDtoValidator.validate(input.getPrescritor())).thenReturn(Validator.of(input.getPrescritor()));\n		when(this.cidadaoDtoValidator.validate(input.getCidadao())).thenReturn(Validator.of(input.getCidadao()));\n		input.getReceituario().forEach((receitaMedicamento) -> {\n			when(this.receitaMedicamentoDtoValidator.validate(receitaMedicamento)).thenReturn(Validator.of(receitaMedicamento));\n		});\n\n		Validator<DocumentoTemporarioCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n	}\n\n	@ParameterizedTest\n	@MethodSource(""provideInputsForNullCheckTest"")\n	@DisplayName(""Deve retornar um objeto com erros no caso de receber valores nulos nos campos obrigatórios"")\n	public void testNullCheckForRequiredFields(DocumentoTemporarioCreateDto input, String errorField) {\n		input.getReceituario().forEach((receitaMedicamento) -> {\n			when(this.receitaMedicamentoDtoValidator.validate(receitaMedicamento)).thenReturn(Validator.of(receitaMedicamento));\n		});\n\n		Validator<DocumentoTemporarioCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isFalse();\n		assertThat(formError.getErrors().toString()).isEqualTo(String.format(""{%s=Preenchimento obrigatório}"", errorField));\n		verify(emissorDtoValidator, never()).validate(input.getPrescritor());\n		verify(cidadaoDtoValidator, never()).validate(input.getCidadao());\n	}\n\n	@Test\n	@DisplayName(""Deve chamar os validadores auxiliares de forma adequada"")\n	public void testCallAggregateValidators() {\n		DocumentoTemporarioCreateDto input = this.factory.createRandom();\n\n		when(this.emissorDtoValidator.validate(input.getPrescritor())).thenReturn(Validator.of(input.getPrescritor()));\n		when(this.cidadaoDtoValidator.validate(input.getCidadao())).thenReturn(Validator.of(input.getCidadao()));\n		input.getReceituario().forEach((receitaMedicamento) -> {\n			when(this.receitaMedicamentoDtoValidator.validate(receitaMedicamento)).thenReturn(Validator.of(receitaMedicamento));\n		});\n\n		Validator<DocumentoTemporarioCreateDto> formError = this.validator.validate(input);\n\n		assertThat(formError.isValid()).isTrue();\n		verify(emissorDtoValidator).validate(input.getPrescritor());\n		verify(cidadaoDtoValidator).validate(input.getCidadao());\n		ArgumentCaptor<ReceitaMedicamentoDto> captor = ArgumentCaptor.forClass(ReceitaMedicamentoDto.class);\n		verify(receitaMedicamentoDtoValidator, times(input.getReceituario().size())).validate(\n				captor.capture(),\n				ArgumentMatchers.<FormError<ReceitaMedicamentoDto>>any()\n		);\n		assertThat(captor.getAllValues()).containsExactlyElementsOf(input.getReceituario());\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.database;\n\nimport static br.ufsc.bridge.pecassinador.contaservico.database.ContaServicoDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ContaServicoDtoFactory extends DataFactory<ContaServicoDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final ContaServicoDtoFactory instance = new ContaServicoDtoFactory();\n\n	@Override\n	protected ContaServicoDto create(Spec spec) {\n		ContaServicoDto dto = new ContaServicoDto();\n\n		dto.setId(spec.id.get());\n		dto.setClientId(spec.clientId.get());\n		dto.setRedirectUri(spec.redirectUri.get());\n		dto.setClientSecret(spec.clientSecret.get());\n\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.id.setDefault(this.faker.number()::randomNumber);\n		spec.clientId.setDefault(this.faker.name()::fullName);\n		spec.redirectUri.setDefault(this.faker.internet()::url);\n		spec.clientSecret.setDefault(this.faker.internet()::password);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<Long> id = new SpecValue<>();\n		public final SpecValue<String> clientId = new SpecValue<>();\n		public final SpecValue<String> redirectUri = new SpecValue<>();\n		public final SpecValue<String> clientSecret = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.database;\n\nimport static br.ufsc.bridge.pecassinador.contaservico.database.ContaServicoCreateRequestDtoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoCreateRequestDto;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ContaServicoCreateRequestDtoFactory extends DataFactory<ContaServicoCreateRequestDto, Spec> {\n\n	@Getter(lazy = true)\n	private static final ContaServicoCreateRequestDtoFactory instance = new ContaServicoCreateRequestDtoFactory();\n\n	@Override\n	protected ContaServicoCreateRequestDto create(Spec spec) {\n		ContaServicoCreateRequestDto dto = new ContaServicoCreateRequestDto();\n\n		dto.setClientId(spec.clientId.get());\n		dto.setRedirectUri(spec.redirectUri.get());\n		dto.setClientSecret(spec.clientSecret.get());\n\n		return dto;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.clientId.setDefault(this.faker.name()::fullName);\n		spec.redirectUri.setDefault(this.faker.internet()::url);\n		spec.clientSecret.setDefault(this.faker.internet()::password);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> clientId = new SpecValue<>();\n		public final SpecValue<String> redirectUri = new SpecValue<>();\n		public final SpecValue<String> clientSecret = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.database;\n\nimport static br.ufsc.bridge.pecassinador.contaservico.database.ContaServicoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ContaServicoFactory extends DataFactory<ContaServico, Spec> {\n\n	@Getter(lazy = true)\n	private static final ContaServicoFactory instance = new ContaServicoFactory();\n\n	@Autowired\n	public ContaServicoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected ContaServico create(Spec spec) {\n		ContaServico contaServico = new ContaServico();\n\n		contaServico.setNome(spec.nome.get());\n		contaServico.setSenha(spec.senha.get());\n		contaServico.setRedirectUri(spec.redirectUri.get());\n\n		return contaServico;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.nome.setDefault(this.faker.name()::fullName);\n		spec.senha.setDefault(this.faker.internet()::password);\n		spec.redirectUri.setDefault(this.faker.internet()::url);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> nome = new SpecValue<>();\n		public SpecValue<String> senha = new SpecValue<>();\n		public SpecValue<String> redirectUri = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.repository;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.faker.BridgeFaker;\nimport br.ufsc.bridge.pecassinador.contaservico.database.ContaServicoFactory;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport br.ufsc.bridge.pecassinador.test.annotation.DatabaseTest;\n\n@DatabaseTest\npublic class ContaServicoRepositoryDatabaseTest {\n\n	@Autowired\n	private ContaServicoRepository contaServicoRepository;\n\n	@Autowired\n	private ContaServicoFactory contaServicoFactory;\n\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@Test\n	@DisplayName(""Deve retornar a conta de serviço corretamente pelo seu nome"")\n	public void testFindByNome() {\n		this.contaServicoFactory.createRandom(3);\n		ContaServico contaServico = this.contaServicoFactory.createRandom();\n\n		Optional<ContaServico> contaServicoResult = this.contaServicoRepository.findByNome(contaServico.getNome());\n\n		assertThat(contaServicoResult.isPresent()).isTrue();\n		assertThat(contaServicoResult.get().getNome()).isEqualTo(contaServico.getNome());\n		assertThat(contaServicoResult.get().getSenha()).isEqualTo(contaServico.getSenha());\n		assertThat(contaServicoResult.get().getRedirectUri()).isEqualTo(contaServico.getRedirectUri());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar a conta de serviço caso o nome seja inválido"")\n	public void testFindByNomeInvalid() {\n		this.contaServicoFactory.createRandom(3);\n\n		Optional<ContaServico> contaServicoResult = this.contaServicoRepository.findByNome(""João Inexistente"");\n\n		assertThat(contaServicoResult.isEmpty()).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a uri de redirecionamento corretamente pelo nome da conta de serviço"")\n	public void testGetRedirectUriByNome() {\n		this.contaServicoFactory.createRandom(3);\n		ContaServico contaServico = this.contaServicoFactory.createRandom();\n\n		Optional<String> redirectUri = this.contaServicoRepository.getRedirectUriByNome(contaServico.getNome());\n\n		assertThat(redirectUri.isPresent()).isTrue();\n		assertThat(redirectUri.get()).isEqualTo(contaServico.getRedirectUri());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar a uri de redirecionamento caso o nome da conta de serviço seja inválido"")\n	public void testGetRedirectUriByNomeInvalid() {\n		this.contaServicoFactory.createRandom(3);\n\n		Optional<String> redirectUri = this.contaServicoRepository.getRedirectUriByNome(""João Inexistente"");\n\n		assertThat(redirectUri.isEmpty()).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a uri de redirecionamento corretamente pelo id da conta de serviço"")\n	public void testGetRedirectUriById() {\n		this.contaServicoFactory.createRandom(3);\n		ContaServico contaServico = this.contaServicoFactory.createRandom();\n\n		Optional<String> redirectUri = this.contaServicoRepository.getRedirectUriById(contaServico.getId());\n\n		assertThat(redirectUri.isPresent()).isTrue();\n		assertThat(redirectUri.get()).isEqualTo(contaServico.getRedirectUri());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar a uri de redirecionamento caso o id da conta de serviço seja inválido"")\n	public void testGetRedirectUriByIdInvalid() {\n		this.contaServicoFactory.createRandom(3);\n\n		Optional<String> redirectUri = this.contaServicoRepository.getRedirectUriById(this.faker.number().randomNumber());\n\n		assertThat(redirectUri.isEmpty()).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a referência à conta de serviço corretamente pelo seu nome"")\n	public void testGetReferenceByNome() {\n		this.contaServicoFactory.createRandom(3);\n		ContaServico contaServico = this.contaServicoFactory.createRandom();\n\n		ContaServico contaServicoResult = this.contaServicoRepository.getReferenceByNome(contaServico.getNome());\n\n		assertThat(contaServicoResult.getNome()).isEqualTo(contaServico.getNome());\n		assertThat(contaServicoResult.getSenha()).isEqualTo(contaServico.getSenha());\n		assertThat(contaServicoResult.getRedirectUri()).isEqualTo(contaServico.getRedirectUri());\n	}\n\n	@Test\n	@DisplayName(""Não deve retornar a referência à conta de serviço caso o nome seja inválido"")\n	public void testGetReferenceByNomeInvalid() {\n		this.contaServicoFactory.createRandom(3);\n\n		ContaServico contaServicoResult = this.contaServicoRepository.getReferenceByNome(""João Inexistente"");\n\n		assertThat(contaServicoResult).isNull();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.arquivo.database;\n\nimport static br.ufsc.bridge.pecassinador.arquivo.database.ArquivoFactory.Spec;\nimport static lombok.AccessLevel.PRIVATE;\nimport static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;\n\nimport java.time.LocalDateTime;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.factory.DataFactory;\nimport br.ufsc.bridge.factory.DataFactoryCreationStrategy;\nimport br.ufsc.bridge.factory.SpecValue;\nimport br.ufsc.bridge.pecassinador.arquivo.model.Arquivo;\n\n@Component\n@NoArgsConstructor(access = PRIVATE)\npublic class ArquivoFactory extends DataFactory<Arquivo, Spec> {\n\n	@Getter(lazy = true)\n	private static final ArquivoFactory instance = new ArquivoFactory();\n\n	@Autowired\n	public ArquivoFactory(DataFactoryCreationStrategy creationStrategy) {\n		super(creationStrategy);\n	}\n\n	@Override\n	protected Arquivo create(Spec spec) {\n		Arquivo arquivo = new Arquivo();\n\n		arquivo.setNome(spec.nome.get());\n		arquivo.setTamanho(spec.tamanho.get());\n		arquivo.setHash(spec.hash.get());\n		arquivo.setDataCriacao(spec.dataCriacao.get());\n\n		return arquivo;\n	}\n\n	@Override\n	protected Spec defaultSpec() {\n		Spec spec = new Spec();\n\n		spec.nome.setDefault(this.faker.file()::fileName);\n		spec.tamanho.setDefault(this.faker.number()::randomNumber);\n		spec.hash.setDefault(() -> randomAlphanumeric(64));\n		spec.dataCriacao.setDefault(LocalDateTime::now);\n\n		return spec;\n	}\n\n	public static class Spec {\n		public SpecValue<String> nome = new SpecValue<>();\n		public SpecValue<Long> tamanho = new SpecValue<>();\n		public SpecValue<String> hash = new SpecValue<>();\n		public SpecValue<LocalDateTime> dataCriacao = new SpecValue<>();\n	}\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.latest.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MMunicipioDto extends MetaBean<MunicipioDto> {\n\n	public static final MMunicipioDto meta = new MMunicipioDto();\n\n	public final MetaField<String> nome = createField(String.class, ""nome"");\n	public final MetaField<UfEnum> uf = createField(UfEnum.class, ""uf"");\n	public final MetaField<String> codigoIbge = createField(String.class, ""codigoIbge"");\n	public final MetaField<String> numeroCep = createField(String.class, ""numeroCep"");\n\n	public MMunicipioDto() {\n		super(MunicipioDto.class);\n	}\n\n	public MMunicipioDto(MetaBean<?> parent) {\n		super(parent, MunicipioDto.class);\n	}\n\n	public MMunicipioDto(MetaBean<?> parent, String alias) {\n		super(parent, MunicipioDto.class, alias);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.latest.mapper;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.mapper.UfMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Municipio;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class MunicipioMapperImpl extends MunicipioMapper {\n\n    @Autowired\n    private UfMapper ufMapper;\n\n    @Override\n    public Municipio toEntity(MunicipioDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Municipio municipio = new Municipio();\n\n        municipio.setNome( dto.getNome() );\n        municipio.setCodigoIbge( dto.getCodigoIbge() );\n        municipio.setNumeroCep( dto.getNumeroCep() );\n        municipio.setUf( ufMapper.toEntity( dto.getUf(), Uf.class ) );\n\n        return municipio;\n    }\n\n    @Override\n    public List<Municipio> toEntity(List<MunicipioDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Municipio> list = new ArrayList<Municipio>( dtoList.size() );\n        for ( MunicipioDto municipioDto : dtoList ) {\n            list.add( toEntity( municipioDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<MunicipioDto> toDto(List<Municipio> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<MunicipioDto> list = new ArrayList<MunicipioDto>( entityList.size() );\n        for ( Municipio municipio : entityList ) {\n            list.add( toDto( municipio ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public MunicipioDto toDto(Municipio municipio) {\n        if ( municipio == null ) {\n            return null;\n        }\n\n        MunicipioDto municipioDto = new MunicipioDto();\n\n        municipioDto.setNome( municipio.getNome() );\n        municipioDto.setUf( ufMapper.toEnum( municipio.getUf(), UfEnum.class ) );\n        municipioDto.setCodigoIbge( municipio.getCodigoIbge() );\n        municipioDto.setNumeroCep( municipio.getNumeroCep() );\n\n        return municipioDto;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class UfMapperImpl extends UfMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.localidade.common.mapper;\n\nimport br.ufsc.bridge.pecassinador.localidade.common.dto.UfDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:35-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class UfDtoMapperImpl implements UfDtoMapper {\n\n    @Override\n    public Uf toEntity(UfDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Uf uf = new Uf();\n\n        uf.setSigla( dto.sigla() );\n        uf.setNome( dto.nome() );\n\n        return uf;\n    }\n\n    @Override\n    public UfDto toDto(Uf entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        String sigla = null;\n        String nome = null;\n\n        sigla = entity.getSigla();\n        nome = entity.getNome();\n\n        UfDto ufDto = new UfDto( sigla, nome );\n\n        return ufDto;\n    }\n\n    @Override\n    public List<Uf> toEntity(List<UfDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Uf> list = new ArrayList<Uf>( dtoList.size() );\n        for ( UfDto ufDto : dtoList ) {\n            list.add( toEntity( ufDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<UfDto> toDto(List<Uf> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<UfDto> list = new ArrayList<UfDto>( entityList.size() );\n        for ( Uf uf : entityList ) {\n            list.add( toDto( uf ) );\n        }\n\n        return list;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.latest.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.cidadao.common.enums.SexoEnum;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MMunicipioDto;\nimport jakarta.annotation.Generated;\nimport java.time.LocalDate;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MCidadaoDto extends MetaBean<CidadaoDto> {\n\n	public static final MCidadaoDto meta = new MCidadaoDto();\n\n	public final MetaField<Long> id = createField(Long.class, ""id"");\n	public final MetaField<String> cpf = createField(String.class, ""cpf"");\n	public final MetaField<String> cns = createField(String.class, ""cns"");\n	public final MetaField<String> nome = createField(String.class, ""nome"");\n	public final MetaField<String> nomeSocial = createField(String.class, ""nomeSocial"");\n	public final MetaField<String> nomeMae = createField(String.class, ""nomeMae"");\n	public final MetaField<LocalDate> dataNascimento = createField(LocalDate.class, ""dataNascimento"");\n	public final MetaField<SexoEnum> sexo = createField(SexoEnum.class, ""sexo"");\n	public final MetaField<String> paisNascimento = createField(String.class, ""paisNascimento"");\n	private MMunicipioDto municipioNascimento;\n\n	public MCidadaoDto() {\n		super(CidadaoDto.class);\n	}\n\n	public MCidadaoDto(MetaBean<?> parent) {\n		super(parent, CidadaoDto.class);\n	}\n\n	public MCidadaoDto(MetaBean<?> parent, String alias) {\n		super(parent, CidadaoDto.class, alias);\n	}\n\n	public MMunicipioDto municipioNascimento(){\n		if(municipioNascimento == null){\n			municipioNascimento = new MMunicipioDto(this, ""municipioNascimento"");\n		}\n		return municipioNascimento;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.latest.mapper;\n\nimport br.ufsc.bridge.pecassinador.cidadao.common.enums.SexoEnum;\nimport br.ufsc.bridge.pecassinador.cidadao.common.mapper.SexoMapper;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Cidadao;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Sexo;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.localidade.latest.mapper.MunicipioMapper;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class CidadaoMapperImpl extends CidadaoMapper {\n\n    @Autowired\n    private MunicipioMapper municipioMapper;\n    @Autowired\n    private SexoMapper sexoMapper;\n\n    @Override\n    public List<Cidadao> toEntity(List<CidadaoDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Cidadao> list = new ArrayList<Cidadao>( dtoList.size() );\n        for ( CidadaoDto cidadaoDto : dtoList ) {\n            list.add( toEntity( cidadaoDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<CidadaoDto> toDto(List<Cidadao> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<CidadaoDto> list = new ArrayList<CidadaoDto>( entityList.size() );\n        for ( Cidadao cidadao : entityList ) {\n            list.add( toDto( cidadao ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public Cidadao toEntity(CidadaoDto cidadaoDto) {\n        if ( cidadaoDto == null ) {\n            return null;\n        }\n\n        Cidadao cidadao = new Cidadao();\n\n        cidadao.setCpf( cidadaoDto.getCpf() );\n        cidadao.setCns( cidadaoDto.getCns() );\n        cidadao.setNome( cidadaoDto.getNome() );\n        cidadao.setNomeSocial( cidadaoDto.getNomeSocial() );\n        cidadao.setNomeMae( cidadaoDto.getNomeMae() );\n        cidadao.setDataNascimento( cidadaoDto.getDataNascimento() );\n        cidadao.setSexo( sexoMapper.toEntity( cidadaoDto.getSexo(), Sexo.class ) );\n\n        afterEntityMapping( cidadao, cidadaoDto );\n\n        return cidadao;\n    }\n\n    @Override\n    public CidadaoDto toDto(Cidadao cidadao) {\n        if ( cidadao == null ) {\n            return null;\n        }\n\n        CidadaoDto cidadaoDto = new CidadaoDto();\n\n        cidadaoDto.setId( cidadao.getId() );\n        cidadaoDto.setCpf( cidadao.getCpf() );\n        cidadaoDto.setCns( cidadao.getCns() );\n        cidadaoDto.setNome( cidadao.getNome() );\n        cidadaoDto.setNomeSocial( cidadao.getNomeSocial() );\n        cidadaoDto.setNomeMae( cidadao.getNomeMae() );\n        cidadaoDto.setDataNascimento( cidadao.getDataNascimento() );\n        cidadaoDto.setSexo( sexoMapper.toEnum( cidadao.getSexo(), SexoEnum.class ) );\n        cidadaoDto.setMunicipioNascimento( municipioMapper.toDto( cidadao.getMunicipioNascimento() ) );\n\n        afterDtoMapping( cidadaoDto, cidadao );\n\n        return cidadaoDto;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.cidadao.common.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class SexoMapperImpl extends SexoMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaList;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.MFarmaceuticoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.MCompradorCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.MEstabelecimentoCreateDto;\nimport jakarta.annotation.Generated;\nimport java.util.List;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MFornecimentoCreateDto extends MetaBean<FornecimentoCreateDto> {\n\n	public static final MFornecimentoCreateDto meta = new MFornecimentoCreateDto();\n\n	private MCompradorCreateDto comprador;\n	private MEstabelecimentoCreateDto estabelecimento;\n	private MFarmaceuticoCreateDto farmaceutico;\n	public final MetaList<FornecimentoReceitaCreateDto> receitas = createList(""receitas"");\n\n	public MFornecimentoCreateDto() {\n		super(FornecimentoCreateDto.class);\n	}\n\n	public MFornecimentoCreateDto(MetaBean<?> parent) {\n		super(parent, FornecimentoCreateDto.class);\n	}\n\n	public MFornecimentoCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, FornecimentoCreateDto.class, alias);\n	}\n\n	public MCompradorCreateDto comprador(){\n		if(comprador == null){\n			comprador = new MCompradorCreateDto(this, ""comprador"");\n		}\n		return comprador;\n	}\n\n	public MEstabelecimentoCreateDto estabelecimento(){\n		if(estabelecimento == null){\n			estabelecimento = new MEstabelecimentoCreateDto(this, ""estabelecimento"");\n		}\n		return estabelecimento;\n	}\n\n	public MFarmaceuticoCreateDto farmaceutico(){\n		if(farmaceutico == null){\n			farmaceutico = new MFarmaceuticoCreateDto(this, ""farmaceutico"");\n		}\n		return farmaceutico;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoCreateDto;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MProdutoCreateDto extends MetaBean<ProdutoCreateDto> {\n\n	public static final MProdutoCreateDto meta = new MProdutoCreateDto();\n\n	public final MetaField<String> codigoObm = createField(String.class, ""codigoObm"");\n	public final MetaField<String> registroSanitario = createField(String.class, ""registroSanitario"");\n	public final MetaField<String> nome = createField(String.class, ""nome"");\n	public final MetaField<Long> quantidadeEmbalagem = createField(Long.class, ""quantidadeEmbalagem"");\n	public final MetaField<Boolean> produtoNaoEncontrado = createField(Boolean.class, ""produtoNaoEncontrado"");\n	public final MetaField<Long> unidadeMedidaId = createField(Long.class, ""unidadeMedidaId"");\n\n	public MProdutoCreateDto() {\n		super(ProdutoCreateDto.class);\n	}\n\n	public MProdutoCreateDto(MetaBean<?> parent) {\n		super(parent, ProdutoCreateDto.class);\n	}\n\n	public MProdutoCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, ProdutoCreateDto.class, alias);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.MEnderecoCreateDto;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MEstabelecimentoCreateDto extends MetaBean<EstabelecimentoCreateDto> {\n\n	public static final MEstabelecimentoCreateDto meta = new MEstabelecimentoCreateDto();\n\n	public final MetaField<String> nome = createField(String.class, ""nome"");\n	public final MetaField<String> cnpjOrCnes = createField(String.class, ""cnpjOrCnes"");\n	private MEnderecoCreateDto endereco;\n\n	public MEstabelecimentoCreateDto() {\n		super(EstabelecimentoCreateDto.class);\n	}\n\n	public MEstabelecimentoCreateDto(MetaBean<?> parent) {\n		super(parent, EstabelecimentoCreateDto.class);\n	}\n\n	public MEstabelecimentoCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, EstabelecimentoCreateDto.class, alias);\n	}\n\n	public MEnderecoCreateDto endereco(){\n		if(endereco == null){\n			endereco = new MEnderecoCreateDto(this, ""endereco"");\n		}\n		return endereco;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.MEnderecoCreateDto;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MCompradorCreateDto extends MetaBean<CompradorCreateDto> {\n\n	public static final MCompradorCreateDto meta = new MCompradorCreateDto();\n\n	public final MetaField<String> nome = createField(String.class, ""nome"");\n	public final MetaField<String> cpfOrPassaporte = createField(String.class, ""cpfOrPassaporte"");\n	public final MetaField<String> telefone = createField(String.class, ""telefone"");\n	public final MetaField<Boolean> estrangeiro = createField(Boolean.class, ""estrangeiro"");\n	private MEnderecoCreateDto endereco;\n\n	public MCompradorCreateDto() {\n		super(CompradorCreateDto.class);\n	}\n\n	public MCompradorCreateDto(MetaBean<?> parent) {\n		super(parent, CompradorCreateDto.class);\n	}\n\n	public MCompradorCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, CompradorCreateDto.class, alias);\n	}\n\n	public MEnderecoCreateDto endereco(){\n		if(endereco == null){\n			endereco = new MEnderecoCreateDto(this, ""endereco"");\n		}\n		return endereco;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MEnderecoCreateDto extends MetaBean<EnderecoCreateDto> {\n\n	public static final MEnderecoCreateDto meta = new MEnderecoCreateDto();\n\n	public final MetaField<UfEnum> uf = createField(UfEnum.class, ""uf"");\n	public final MetaField<String> nomeMunicipio = createField(String.class, ""nomeMunicipio"");\n	public final MetaField<String> bairro = createField(String.class, ""bairro"");\n	public final MetaField<String> endereco = createField(String.class, ""endereco"");\n	public final MetaField<String> numero = createField(String.class, ""numero"");\n	public final MetaField<String> complemento = createField(String.class, ""complemento"");\n\n	public MEnderecoCreateDto() {\n		super(EnderecoCreateDto.class);\n	}\n\n	public MEnderecoCreateDto(MetaBean<?> parent) {\n		super(parent, EnderecoCreateDto.class);\n	}\n\n	public MEnderecoCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, EnderecoCreateDto.class, alias);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.MProdutoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\nimport jakarta.annotation.Generated;\nimport java.time.LocalDate;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MFornecimentoReceitaCreateDto extends MetaBean<FornecimentoReceitaCreateDto> {\n\n	public static final MFornecimentoReceitaCreateDto meta = new MFornecimentoReceitaCreateDto();\n\n	public final MetaField<Long> receitaMedicamentoId = createField(Long.class, ""receitaMedicamentoId"");\n	public final MetaField<Long> quantidadeFornecida = createField(Long.class, ""quantidadeFornecida"");\n	public final MetaField<String> observacao = createField(String.class, ""observacao"");\n	private MProdutoCreateDto produto;\n	public final MetaField<FormaFornecimentoEnum> formaFornecimento = createField(FormaFornecimentoEnum.class, ""formaFornecimento"");\n	public final MetaField<String> lote = createField(String.class, ""lote"");\n	public final MetaField<LocalDate> dataValidade = createField(LocalDate.class, ""dataValidade"");\n\n	public MFornecimentoReceitaCreateDto() {\n		super(FornecimentoReceitaCreateDto.class);\n	}\n\n	public MFornecimentoReceitaCreateDto(MetaBean<?> parent) {\n		super(parent, FornecimentoReceitaCreateDto.class);\n	}\n\n	public MFornecimentoReceitaCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, FornecimentoReceitaCreateDto.class, alias);\n	}\n\n	public MProdutoCreateDto produto(){\n		if(produto == null){\n			produto = new MProdutoCreateDto(this, ""produto"");\n		}\n		return produto;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FormaFornecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class FornecimentoReceitaCreateDtoMapperImpl extends FornecimentoReceitaCreateDtoMapper {\n\n    @Autowired\n    private FormaFornecimentoMapper formaFornecimentoMapper;\n\n    @Override\n    public FornecimentoReceita toEntity(FornecimentoReceitaCreateDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        FornecimentoReceita fornecimentoReceita = new FornecimentoReceita();\n\n        fornecimentoReceita.setQuantidadeFornecida( dto.getQuantidadeFornecida() );\n        fornecimentoReceita.setObservacao( dto.getObservacao() );\n        fornecimentoReceita.setFormaFornecimento( formaFornecimentoMapper.toEntity( dto.getFormaFornecimento(), FormaFornecimento.class ) );\n        fornecimentoReceita.setLote( dto.getLote() );\n        fornecimentoReceita.setDataValidade( dto.getDataValidade() );\n\n        afterEntityMapping( fornecimentoReceita, dto );\n\n        return fornecimentoReceita;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class FormaFornecimentoMapperImpl extends FormaFornecimentoMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Estabelecimento;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class EstabelecimentoMapperImpl extends EstabelecimentoMapper {\n\n    @Autowired\n    private EnderecoMapper enderecoMapper;\n\n    @Override\n    public EstabelecimentoDto toDto(Estabelecimento entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        String nome = null;\n        String cnpj = null;\n        String cnes = null;\n        EnderecoDto endereco = null;\n\n        nome = entity.getNome();\n        cnpj = entity.getCnpj();\n        cnes = entity.getCnes();\n        endereco = enderecoMapper.toDto( entity.getEndereco() );\n\n        EstabelecimentoDto estabelecimentoDto = new EstabelecimentoDto( nome, cnpj, cnes, endereco );\n\n        return estabelecimentoDto;\n    }\n\n    @Override\n    public List<Estabelecimento> toEntity(List<EstabelecimentoDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Estabelecimento> list = new ArrayList<Estabelecimento>( dtoList.size() );\n        for ( EstabelecimentoDto estabelecimentoDto : dtoList ) {\n            list.add( toEntity( estabelecimentoDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<EstabelecimentoDto> toDto(List<Estabelecimento> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<EstabelecimentoDto> list = new ArrayList<EstabelecimentoDto>( entityList.size() );\n        for ( Estabelecimento estabelecimento : entityList ) {\n            list.add( toDto( estabelecimento ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public Estabelecimento toEntity(EstabelecimentoDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Estabelecimento estabelecimento = new Estabelecimento();\n\n        estabelecimento.setNome( dto.nome() );\n        estabelecimento.setCnpj( dto.cnpj() );\n        estabelecimento.setCnes( dto.cnes() );\n\n        return estabelecimento;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.FornecimentoReceitaDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.FormaFornecimentoEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FormaFornecimento;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.FornecimentoReceita;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper.ReceitaMedicamentoMapper;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class FornecimentoReceitaMapperImpl extends FornecimentoReceitaMapper {\n\n    @Autowired\n    private ReceitaMedicamentoMapper receitaMedicamentoMapper;\n    @Autowired\n    private ProdutoMapper produtoMapper;\n    @Autowired\n    private FormaFornecimentoMapper formaFornecimentoMapper;\n\n    @Override\n    public FornecimentoReceitaDto toDto(FornecimentoReceita entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        ReceitaMedicamentoDto receitaMedicamento = null;\n        Long quantidadeFornecida = null;\n        String observacao = null;\n        ProdutoDto produto = null;\n        FormaFornecimentoEnum formaFornecimento = null;\n        Long totalFornecido = null;\n        String lote = null;\n        LocalDate dataValidade = null;\n\n        receitaMedicamento = receitaMedicamentoMapper.toDto( entity.getReceitaMedicamento() );\n        quantidadeFornecida = entity.getQuantidadeFornecida();\n        observacao = entity.getObservacao();\n        produto = produtoMapper.toDto( entity.getProduto() );\n        formaFornecimento = formaFornecimentoMapper.toEnum( entity.getFormaFornecimento(), FormaFornecimentoEnum.class );\n        totalFornecido = entity.getTotalFornecido();\n        lote = entity.getLote();\n        dataValidade = entity.getDataValidade();\n\n        FornecimentoReceitaDto fornecimentoReceitaDto = new FornecimentoReceitaDto( receitaMedicamento, quantidadeFornecida, observacao, produto, formaFornecimento, totalFornecido, lote, dataValidade );\n\n        return fornecimentoReceitaDto;\n    }\n\n    @Override\n    public List<FornecimentoReceita> toEntity(List<FornecimentoReceitaDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<FornecimentoReceita> list = new ArrayList<FornecimentoReceita>( dtoList.size() );\n        for ( FornecimentoReceitaDto fornecimentoReceitaDto : dtoList ) {\n            list.add( toEntity( fornecimentoReceitaDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<FornecimentoReceitaDto> toDto(List<FornecimentoReceita> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<FornecimentoReceitaDto> list = new ArrayList<FornecimentoReceitaDto>( entityList.size() );\n        for ( FornecimentoReceita fornecimentoReceita : entityList ) {\n            list.add( toDto( fornecimentoReceita ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public FornecimentoReceita toEntity(FornecimentoReceitaDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        FornecimentoReceita fornecimentoReceita = new FornecimentoReceita();\n\n        fornecimentoReceita.setQuantidadeFornecida( dto.quantidadeFornecida() );\n        fornecimentoReceita.setObservacao( dto.observacao() );\n        fornecimentoReceita.setFormaFornecimento( formaFornecimentoMapper.toEntity( dto.formaFornecimento(), FormaFornecimento.class ) );\n        fornecimentoReceita.setTotalFornecido( dto.totalFornecido() );\n        fornecimentoReceita.setLote( dto.lote() );\n        fornecimentoReceita.setDataValidade( dto.dataValidade() );\n\n        return fornecimentoReceita;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class FornecimentoMapperImpl extends FornecimentoMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class OrigemProdutoMapperImpl extends OrigemProdutoMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Comprador;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class CompradorCreateDtoMapperImpl extends CompradorCreateDtoMapper {\n\n    @Override\n    public CompradorCreateDto toDto(Comprador entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        String nome = null;\n        String telefone = null;\n        Boolean estrangeiro = null;\n        EnderecoCreateDto endereco = null;\n\n        nome = entity.getNome();\n        telefone = entity.getTelefone();\n        estrangeiro = entity.getEstrangeiro();\n        endereco = enderecoToEnderecoCreateDto( entity.getEndereco() );\n\n        String cpfOrPassaporte = null;\n\n        CompradorCreateDto compradorCreateDto = new CompradorCreateDto( nome, cpfOrPassaporte, telefone, estrangeiro, endereco );\n\n        return compradorCreateDto;\n    }\n\n    @Override\n    public List<Comprador> toEntity(List<CompradorCreateDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Comprador> list = new ArrayList<Comprador>( dtoList.size() );\n        for ( CompradorCreateDto compradorCreateDto : dtoList ) {\n            list.add( toEntity( compradorCreateDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<CompradorCreateDto> toDto(List<Comprador> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<CompradorCreateDto> list = new ArrayList<CompradorCreateDto>( entityList.size() );\n        for ( Comprador comprador : entityList ) {\n            list.add( toDto( comprador ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public Comprador toEntity(CompradorCreateDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Comprador comprador = new Comprador();\n\n        comprador.setNome( dto.getNome() );\n        comprador.setTelefone( dto.getTelefone() );\n        comprador.setEstrangeiro( dto.getEstrangeiro() );\n\n        afterEntityMapping( comprador, dto );\n\n        return comprador;\n    }\n\n    protected EnderecoCreateDto enderecoToEnderecoCreateDto(Endereco endereco) {\n        if ( endereco == null ) {\n            return null;\n        }\n\n        String bairro = null;\n        String endereco1 = null;\n        String numero = null;\n        String complemento = null;\n\n        bairro = endereco.getBairro();\n        endereco1 = endereco.getEndereco();\n        numero = endereco.getNumero();\n        complemento = endereco.getComplemento();\n\n        UfEnum uf = null;\n        String nomeMunicipio = null;\n\n        EnderecoCreateDto enderecoCreateDto = new EnderecoCreateDto( uf, nomeMunicipio, bairro, endereco1, numero, complemento );\n\n        return enderecoCreateDto;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Produto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class ProdutoCreateDtoMapperImpl extends ProdutoCreateDtoMapper {\n\n    @Override\n    public Produto toEntity(ProdutoCreateDto produtoCreateDto) {\n        if ( produtoCreateDto == null ) {\n            return null;\n        }\n\n        Produto produto = new Produto();\n\n        produto.setUnidadeMedida( map( produtoCreateDto.getUnidadeMedidaId() ) );\n        produto.setOrigem( map( produtoCreateDto.getProdutoNaoEncontrado() ) );\n        produto.setCodigoObm( produtoCreateDto.getCodigoObm() );\n        produto.setRegistroSanitario( produtoCreateDto.getRegistroSanitario() );\n        produto.setNome( produtoCreateDto.getNome() );\n        produto.setQuantidadeEmbalagem( produtoCreateDto.getQuantidadeEmbalagem() );\n\n        return produto;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.CompradorDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Comprador;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class CompradorMapperImpl implements CompradorMapper {\n\n    @Autowired\n    private EnderecoMapper enderecoMapper;\n\n    @Override\n    public Comprador toEntity(CompradorDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Comprador comprador = new Comprador();\n\n        comprador.setNome( dto.nome() );\n        comprador.setCpf( dto.cpf() );\n        comprador.setPassaporte( dto.passaporte() );\n        comprador.setTelefone( dto.telefone() );\n        comprador.setEstrangeiro( dto.estrangeiro() );\n        comprador.setEndereco( enderecoMapper.toEntity( dto.endereco() ) );\n\n        return comprador;\n    }\n\n    @Override\n    public CompradorDto toDto(Comprador entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        String nome = null;\n        String cpf = null;\n        String passaporte = null;\n        String telefone = null;\n        Boolean estrangeiro = null;\n        EnderecoDto endereco = null;\n\n        nome = entity.getNome();\n        cpf = entity.getCpf();\n        passaporte = entity.getPassaporte();\n        telefone = entity.getTelefone();\n        estrangeiro = entity.getEstrangeiro();\n        endereco = enderecoMapper.toDto( entity.getEndereco() );\n\n        CompradorDto compradorDto = new CompradorDto( nome, cpf, passaporte, telefone, estrangeiro, endereco );\n\n        return compradorDto;\n    }\n\n    @Override\n    public List<Comprador> toEntity(List<CompradorDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Comprador> list = new ArrayList<Comprador>( dtoList.size() );\n        for ( CompradorDto compradorDto : dtoList ) {\n            list.add( toEntity( compradorDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<CompradorDto> toDto(List<Comprador> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<CompradorDto> list = new ArrayList<CompradorDto>( entityList.size() );\n        for ( Comprador comprador : entityList ) {\n            list.add( toDto( comprador ) );\n        }\n\n        return list;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.ProdutoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.UnidadeMedidaDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.enums.OrigemProdutoEnum;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.OrigemProduto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Produto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.UnidadeMedida;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class ProdutoMapperImpl extends ProdutoMapper {\n\n    @Autowired\n    private OrigemProdutoMapper origemProdutoMapper;\n\n    @Override\n    public ProdutoDto toDto(Produto entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        Long id = null;\n        String codigoObm = null;\n        String registroSanitario = null;\n        String nome = null;\n        Long quantidadeEmbalagem = null;\n        OrigemProdutoEnum origem = null;\n        UnidadeMedidaDto unidadeMedida = null;\n\n        id = entity.getId();\n        codigoObm = entity.getCodigoObm();\n        registroSanitario = entity.getRegistroSanitario();\n        nome = entity.getNome();\n        quantidadeEmbalagem = entity.getQuantidadeEmbalagem();\n        origem = origemProdutoMapper.toEnum( entity.getOrigem(), OrigemProdutoEnum.class );\n        unidadeMedida = unidadeMedidaToUnidadeMedidaDto( entity.getUnidadeMedida() );\n\n        ProdutoDto produtoDto = new ProdutoDto( id, codigoObm, registroSanitario, nome, quantidadeEmbalagem, origem, unidadeMedida );\n\n        return produtoDto;\n    }\n\n    @Override\n    public List<Produto> toEntity(List<ProdutoDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Produto> list = new ArrayList<Produto>( dtoList.size() );\n        for ( ProdutoDto produtoDto : dtoList ) {\n            list.add( toEntity( produtoDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<ProdutoDto> toDto(List<Produto> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<ProdutoDto> list = new ArrayList<ProdutoDto>( entityList.size() );\n        for ( Produto produto : entityList ) {\n            list.add( toDto( produto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public Produto toEntity(ProdutoDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Produto produto = new Produto();\n\n        produto.setId( dto.id() );\n        produto.setCodigoObm( dto.codigoObm() );\n        produto.setRegistroSanitario( dto.registroSanitario() );\n        produto.setNome( dto.nome() );\n        produto.setQuantidadeEmbalagem( dto.quantidadeEmbalagem() );\n        produto.setOrigem( origemProdutoMapper.toEntity( dto.origem(), OrigemProduto.class ) );\n        produto.setUnidadeMedida( unidadeMedidaDtoToUnidadeMedida( dto.unidadeMedida() ) );\n\n        return produto;\n    }\n\n    protected UnidadeMedidaDto unidadeMedidaToUnidadeMedidaDto(UnidadeMedida unidadeMedida) {\n        if ( unidadeMedida == null ) {\n            return null;\n        }\n\n        Long id = null;\n        String descricao = null;\n\n        id = unidadeMedida.getId();\n        descricao = unidadeMedida.getDescricao();\n\n        UnidadeMedidaDto unidadeMedidaDto = new UnidadeMedidaDto( id, descricao );\n\n        return unidadeMedidaDto;\n    }\n\n    protected UnidadeMedida unidadeMedidaDtoToUnidadeMedida(UnidadeMedidaDto unidadeMedidaDto) {\n        if ( unidadeMedidaDto == null ) {\n            return null;\n        }\n\n        UnidadeMedida unidadeMedida = new UnidadeMedida();\n\n        unidadeMedida.setId( unidadeMedidaDto.id() );\n        unidadeMedida.setDescricao( unidadeMedidaDto.descricao() );\n\n        return unidadeMedida;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class EnderecoCreateDtoMapperImpl extends EnderecoCreateDtoMapper {\n\n    @Override\n    public EnderecoCreateDto toDto(Endereco entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        String bairro = null;\n        String endereco = null;\n        String numero = null;\n        String complemento = null;\n\n        bairro = entity.getBairro();\n        endereco = entity.getEndereco();\n        numero = entity.getNumero();\n        complemento = entity.getComplemento();\n\n        UfEnum uf = null;\n        String nomeMunicipio = null;\n\n        EnderecoCreateDto enderecoCreateDto = new EnderecoCreateDto( uf, nomeMunicipio, bairro, endereco, numero, complemento );\n\n        return enderecoCreateDto;\n    }\n\n    @Override\n    public List<Endereco> toEntity(List<EnderecoCreateDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Endereco> list = new ArrayList<Endereco>( dtoList.size() );\n        for ( EnderecoCreateDto enderecoCreateDto : dtoList ) {\n            list.add( toEntity( enderecoCreateDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<EnderecoCreateDto> toDto(List<Endereco> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<EnderecoCreateDto> list = new ArrayList<EnderecoCreateDto>( entityList.size() );\n        for ( Endereco endereco : entityList ) {\n            list.add( toDto( endereco ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public Endereco toEntity(EnderecoCreateDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Endereco endereco = new Endereco();\n\n        endereco.setBairro( dto.getBairro() );\n        endereco.setEndereco( dto.getEndereco() );\n        endereco.setNumero( dto.getNumero() );\n        endereco.setComplemento( dto.getComplemento() );\n\n        afterEntityMapping( endereco, dto );\n\n        return endereco;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\nimport br.ufsc.bridge.pecassinador.localidade.latest.dto.MunicipioDto;\nimport br.ufsc.bridge.pecassinador.localidade.latest.mapper.MunicipioMapper;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class EnderecoMapperImpl extends EnderecoMapper {\n\n    @Autowired\n    private MunicipioMapper municipioMapper;\n\n    @Override\n    public EnderecoDto toDto(Endereco entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        MunicipioDto municipio = null;\n        String bairro = null;\n        String endereco = null;\n        String numero = null;\n        String complemento = null;\n\n        municipio = municipioMapper.toDto( entity.getMunicipio() );\n        bairro = entity.getBairro();\n        endereco = entity.getEndereco();\n        numero = entity.getNumero();\n        complemento = entity.getComplemento();\n\n        EnderecoDto enderecoDto = new EnderecoDto( municipio, bairro, endereco, numero, complemento );\n\n        return enderecoDto;\n    }\n\n    @Override\n    public List<Endereco> toEntity(List<EnderecoDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Endereco> list = new ArrayList<Endereco>( dtoList.size() );\n        for ( EnderecoDto enderecoDto : dtoList ) {\n            list.add( toEntity( enderecoDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<EnderecoDto> toDto(List<Endereco> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<EnderecoDto> list = new ArrayList<EnderecoDto>( entityList.size() );\n        for ( Endereco endereco : entityList ) {\n            list.add( toDto( endereco ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public Endereco toEntity(EnderecoDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Endereco endereco = new Endereco();\n\n        endereco.setBairro( dto.bairro() );\n        endereco.setEndereco( dto.endereco() );\n        endereco.setNumero( dto.numero() );\n        endereco.setComplemento( dto.complemento() );\n\n        afterEntityMapping( endereco, dto );\n\n        return endereco;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.fornecimento.mapper;\n\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EnderecoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.dto.EstabelecimentoCreateDto;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Endereco;\nimport br.ufsc.bridge.pecassinador.fornecimento.model.Estabelecimento;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class EstabelecimentoCreateDtoMapperImpl extends EstabelecimentoCreateDtoMapper {\n\n    @Override\n    public EstabelecimentoCreateDto toDto(Estabelecimento entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        String nome = null;\n        EnderecoCreateDto endereco = null;\n\n        nome = entity.getNome();\n        endereco = enderecoToEnderecoCreateDto( entity.getEndereco() );\n\n        String cnpjOrCnes = null;\n\n        EstabelecimentoCreateDto estabelecimentoCreateDto = new EstabelecimentoCreateDto( nome, cnpjOrCnes, endereco );\n\n        return estabelecimentoCreateDto;\n    }\n\n    @Override\n    public List<Estabelecimento> toEntity(List<EstabelecimentoCreateDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Estabelecimento> list = new ArrayList<Estabelecimento>( dtoList.size() );\n        for ( EstabelecimentoCreateDto estabelecimentoCreateDto : dtoList ) {\n            list.add( toEntity( estabelecimentoCreateDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<EstabelecimentoCreateDto> toDto(List<Estabelecimento> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<EstabelecimentoCreateDto> list = new ArrayList<EstabelecimentoCreateDto>( entityList.size() );\n        for ( Estabelecimento estabelecimento : entityList ) {\n            list.add( toDto( estabelecimento ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public Estabelecimento toEntity(EstabelecimentoCreateDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Estabelecimento estabelecimento = new Estabelecimento();\n\n        estabelecimento.setNome( dto.getNome() );\n\n        afterEntityMapping( estabelecimento, dto );\n\n        return estabelecimento;\n    }\n\n    protected EnderecoCreateDto enderecoToEnderecoCreateDto(Endereco endereco) {\n        if ( endereco == null ) {\n            return null;\n        }\n\n        String bairro = null;\n        String endereco1 = null;\n        String numero = null;\n        String complemento = null;\n\n        bairro = endereco.getBairro();\n        endereco1 = endereco.getEndereco();\n        numero = endereco.getNumero();\n        complemento = endereco.getComplemento();\n\n        UfEnum uf = null;\n        String nomeMunicipio = null;\n\n        EnderecoCreateDto enderecoCreateDto = new EnderecoCreateDto( uf, nomeMunicipio, bairro, endereco1, numero, complemento );\n\n        return enderecoCreateDto;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoCreateDto;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MFarmaceuticoCreateDto extends MetaBean<FarmaceuticoCreateDto> {\n\n	public static final MFarmaceuticoCreateDto meta = new MFarmaceuticoCreateDto();\n\n	public final MetaField<String> crf = createField(String.class, ""crf"");\n	public final MetaField<UfEnum> ufConselhoClasse = createField(UfEnum.class, ""ufConselhoClasse"");\n\n	public MFarmaceuticoCreateDto() {\n		super(FarmaceuticoCreateDto.class);\n	}\n\n	public MFarmaceuticoCreateDto(MetaBean<?> parent) {\n		super(parent, FarmaceuticoCreateDto.class);\n	}\n\n	public MFarmaceuticoCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, FarmaceuticoCreateDto.class, alias);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.farmaceutico.mapper;\n\nimport br.ufsc.bridge.pecassinador.farmaceutico.dto.FarmaceuticoDto;\nimport br.ufsc.bridge.pecassinador.farmaceutico.model.Farmaceutico;\nimport br.ufsc.bridge.pecassinador.localidade.common.enums.UfEnum;\nimport br.ufsc.bridge.pecassinador.localidade.common.mapper.UfMapper;\nimport br.ufsc.bridge.pecassinador.localidade.common.model.Uf;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class FarmaceuticoMapperImpl extends FarmaceuticoMapper {\n\n    @Autowired\n    private UfMapper ufMapper;\n\n    @Override\n    public FarmaceuticoDto toDto(Farmaceutico farmaceutico) {\n        if ( farmaceutico == null ) {\n            return null;\n        }\n\n        FarmaceuticoDto farmaceuticoDto = new FarmaceuticoDto();\n\n        farmaceuticoDto.setNome( farmaceutico.getNome() );\n        farmaceuticoDto.setCpf( farmaceutico.getCpf() );\n        farmaceuticoDto.setCrf( farmaceutico.getCrf() );\n        farmaceuticoDto.setUfConselhoClasse( ufMapper.toEnum( farmaceutico.getUfConselhoClasse(), UfEnum.class ) );\n\n        return farmaceuticoDto;\n    }\n\n    @Override\n    public Farmaceutico toEntity(FarmaceuticoDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Farmaceutico farmaceutico = new Farmaceutico();\n\n        farmaceutico.setNome( dto.getNome() );\n        farmaceutico.setCpf( dto.getCpf() );\n        farmaceutico.setCrf( dto.getCrf() );\n        farmaceutico.setUfConselhoClasse( ufMapper.toEntity( dto.getUfConselhoClasse(), Uf.class ) );\n\n        return farmaceutico;\n    }\n\n    @Override\n    public Farmaceutico update(FarmaceuticoDto dto, Farmaceutico farmaceutico) {\n        if ( dto == null ) {\n            return farmaceutico;\n        }\n\n        farmaceutico.setNome( dto.getNome() );\n        farmaceutico.setCrf( dto.getCrf() );\n        farmaceutico.setUfConselhoClasse( ufMapper.toEntity( dto.getUfConselhoClasse(), Uf.class ) );\n\n        return farmaceutico;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.latest.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.metafy.MetaList;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.MCidadaoDto;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.MEmissorDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport jakarta.annotation.Generated;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MDocumentoTemporarioCreateDto extends MetaBean<DocumentoTemporarioCreateDto> {\n\n	public static final MDocumentoTemporarioCreateDto meta = new MDocumentoTemporarioCreateDto();\n\n	private MEmissorDto prescritor;\n	private MCidadaoDto cidadao;\n	public final MetaField<Long> contaServicoId = createField(Long.class, ""contaServicoId"");\n	public final MetaField<String> contaServicoName = createField(String.class, ""contaServicoName"");\n	public final MetaField<byte[]> pdf = createField(byte[].class, ""pdf"");\n	public final MetaField<TipoDocumentoEnum> tipoDocumento = createField(TipoDocumentoEnum.class, ""tipoDocumento"");\n	public final MetaList<ReceitaMedicamentoDto> receituario = createList(""receituario"");\n	public final MetaField<LocalDate> dataInicioAtendimento = createField(LocalDate.class, ""dataInicioAtendimento"");\n\n	public MDocumentoTemporarioCreateDto() {\n		super(DocumentoTemporarioCreateDto.class);\n	}\n\n	public MDocumentoTemporarioCreateDto(MetaBean<?> parent) {\n		super(parent, DocumentoTemporarioCreateDto.class);\n	}\n\n	public MDocumentoTemporarioCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, DocumentoTemporarioCreateDto.class, alias);\n	}\n\n	public MEmissorDto prescritor(){\n		if(prescritor == null){\n			prescritor = new MEmissorDto(this, ""prescritor"");\n		}\n		return prescritor;\n	}\n\n	public MCidadaoDto cidadao(){\n		if(cidadao == null){\n			cidadao = new MCidadaoDto(this, ""cidadao"");\n		}\n		return cidadao;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.latest.mapper;\n\nimport br.ufsc.bridge.pecassinador.cidadao.common.enums.SexoEnum;\nimport br.ufsc.bridge.pecassinador.cidadao.common.mapper.SexoMapper;\nimport br.ufsc.bridge.pecassinador.cidadao.common.model.Sexo;\nimport br.ufsc.bridge.pecassinador.cidadao.latest.dto.CidadaoDto;\nimport br.ufsc.bridge.pecassinador.documento.common.mapper.TipoDocumentoMapper;\nimport br.ufsc.bridge.pecassinador.documento.common.model.DocumentoTemporario;\nimport br.ufsc.bridge.pecassinador.documento.common.model.TipoDocumento;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport java.time.LocalDate;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class DocumentoTemporarioMapperImpl extends DocumentoTemporarioMapper {\n\n    @Autowired\n    private SexoMapper sexoMapper;\n    @Autowired\n    private TipoDocumentoMapper tipoDocumentoMapper;\n\n    @Override\n    public DocumentoTemporario documentoTemporarioCreateDtoToEntity(DocumentoTemporarioCreateDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        DocumentoTemporario documentoTemporario = new DocumentoTemporario();\n\n        documentoTemporario.setSignatarioNome( dtoPrescritorNome( dto ) );\n        documentoTemporario.setSignatarioCpf( dtoPrescritorCpf( dto ) );\n        documentoTemporario.setSignatarioDescricaoCbo( dtoPrescritorCboDescricao( dto ) );\n        documentoTemporario.setSignatarioCodigoCbo2002( dtoPrescritorCboCodigoCbo2002( dto ) );\n        documentoTemporario.setCidadaoNome( dtoCidadaoNome( dto ) );\n        documentoTemporario.setCidadaoCpf( dtoCidadaoCpf( dto ) );\n        documentoTemporario.setCidadaoCns( dtoCidadaoCns( dto ) );\n        documentoTemporario.setCidadaoNomeSocial( dtoCidadaoNomeSocial( dto ) );\n        documentoTemporario.setCidadaoNomeMae( dtoCidadaoNomeMae( dto ) );\n        documentoTemporario.setCidadaoDataNascimento( dtoCidadaoDataNascimento( dto ) );\n        documentoTemporario.setCidadaoSexo( sexoMapper.toEntity( dtoCidadaoSexo( dto ), Sexo.class ) );\n        documentoTemporario.setTipoDocumento( tipoDocumentoMapper.toEntity( dto.getTipoDocumento(), TipoDocumento.class ) );\n        documentoTemporario.setDataInicioAtendimento( dto.getDataInicioAtendimento() );\n\n        afterDocumentoTemporarioMapping( documentoTemporario, dto );\n\n        return documentoTemporario;\n    }\n\n    @Override\n    public EmissorDto toEmissorDto(DocumentoTemporario documentoTemporario) {\n        if ( documentoTemporario == null ) {\n            return null;\n        }\n\n        EmissorDto emissorDto = new EmissorDto();\n\n        emissorDto.setCpf( documentoTemporario.getSignatarioCpf() );\n        emissorDto.setNome( documentoTemporario.getSignatarioNome() );\n        emissorDto.setId( documentoTemporario.getId() );\n\n        afterEmissorDtoMapping( emissorDto, documentoTemporario );\n\n        return emissorDto;\n    }\n\n    @Override\n    public CidadaoDto toCidadaoDto(DocumentoTemporario documentoTemporario) {\n        if ( documentoTemporario == null ) {\n            return null;\n        }\n\n        CidadaoDto cidadaoDto = new CidadaoDto();\n\n        cidadaoDto.setCpf( documentoTemporario.getCidadaoCpf() );\n        cidadaoDto.setNome( documentoTemporario.getCidadaoNome() );\n        cidadaoDto.setCns( documentoTemporario.getCidadaoCns() );\n        cidadaoDto.setNomeSocial( documentoTemporario.getCidadaoNomeSocial() );\n        cidadaoDto.setNomeMae( documentoTemporario.getCidadaoNomeMae() );\n        cidadaoDto.setDataNascimento( documentoTemporario.getCidadaoDataNascimento() );\n        cidadaoDto.setSexo( sexoMapper.toEnum( documentoTemporario.getCidadaoSexo(), SexoEnum.class ) );\n        cidadaoDto.setId( documentoTemporario.getId() );\n\n        afterCidadaoDtoMapping( cidadaoDto, documentoTemporario );\n\n        return cidadaoDto;\n    }\n\n    private String dtoPrescritorNome(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        EmissorDto prescritor = documentoTemporarioCreateDto.getPrescritor();\n        if ( prescritor == null ) {\n            return null;\n        }\n        String nome = prescritor.getNome();\n        if ( nome == null ) {\n            return null;\n        }\n        return nome;\n    }\n\n    private String dtoPrescritorCpf(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        EmissorDto prescritor = documentoTemporarioCreateDto.getPrescritor();\n        if ( prescritor == null ) {\n            return null;\n        }\n        String cpf = prescritor.getCpf();\n        if ( cpf == null ) {\n            return null;\n        }\n        return cpf;\n    }\n\n    private String dtoPrescritorCboDescricao(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        EmissorDto prescritor = documentoTemporarioCreateDto.getPrescritor();\n        if ( prescritor == null ) {\n            return null;\n        }\n        CboDto cbo = prescritor.getCbo();\n        if ( cbo == null ) {\n            return null;\n        }\n        String descricao = cbo.getDescricao();\n        if ( descricao == null ) {\n            return null;\n        }\n        return descricao;\n    }\n\n    private String dtoPrescritorCboCodigoCbo2002(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        EmissorDto prescritor = documentoTemporarioCreateDto.getPrescritor();\n        if ( prescritor == null ) {\n            return null;\n        }\n        CboDto cbo = prescritor.getCbo();\n        if ( cbo == null ) {\n            return null;\n        }\n        String codigoCbo2002 = cbo.getCodigoCbo2002();\n        if ( codigoCbo2002 == null ) {\n            return null;\n        }\n        return codigoCbo2002;\n    }\n\n    private String dtoCidadaoNome(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        CidadaoDto cidadao = documentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String nome = cidadao.getNome();\n        if ( nome == null ) {\n            return null;\n        }\n        return nome;\n    }\n\n    private String dtoCidadaoCpf(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        CidadaoDto cidadao = documentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String cpf = cidadao.getCpf();\n        if ( cpf == null ) {\n            return null;\n        }\n        return cpf;\n    }\n\n    private String dtoCidadaoCns(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        CidadaoDto cidadao = documentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String cns = cidadao.getCns();\n        if ( cns == null ) {\n            return null;\n        }\n        return cns;\n    }\n\n    private String dtoCidadaoNomeSocial(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        CidadaoDto cidadao = documentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String nomeSocial = cidadao.getNomeSocial();\n        if ( nomeSocial == null ) {\n            return null;\n        }\n        return nomeSocial;\n    }\n\n    private String dtoCidadaoNomeMae(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        CidadaoDto cidadao = documentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String nomeMae = cidadao.getNomeMae();\n        if ( nomeMae == null ) {\n            return null;\n        }\n        return nomeMae;\n    }\n\n    private LocalDate dtoCidadaoDataNascimento(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        CidadaoDto cidadao = documentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        LocalDate dataNascimento = cidadao.getDataNascimento();\n        if ( dataNascimento == null ) {\n            return null;\n        }\n        return dataNascimento;\n    }\n\n    private SexoEnum dtoCidadaoSexo(DocumentoTemporarioCreateDto documentoTemporarioCreateDto) {\n        if ( documentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        CidadaoDto cidadao = documentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        SexoEnum sexo = cidadao.getSexo();\n        if ( sexo == null ) {\n            return null;\n        }\n        return sexo;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.common.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class TipoDocumentoMapperImpl extends TipoDocumentoMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.documento.v1.mapper;\n\nimport br.ufsc.bridge.pecassinador.cidadao.v1.dto.V1CidadaoDto;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.documento.common.model.DocumentoTemporario;\nimport br.ufsc.bridge.pecassinador.documento.common.model.TipoDocumento;\nimport br.ufsc.bridge.pecassinador.documento.v1.dto.V1DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.v1.dto.V1CboDto;\nimport br.ufsc.bridge.pecassinador.emissor.v1.dto.V1EmissorDto;\nimport java.time.LocalDate;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class V1DocumentoTemporarioMapperImpl extends V1DocumentoTemporarioMapper {\n\n    @Override\n    public DocumentoTemporario documentoTemporarioCreateDtoToEntity(V1DocumentoTemporarioCreateDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        DocumentoTemporario documentoTemporario = new DocumentoTemporario();\n\n        documentoTemporario.setSignatarioNome( dtoPrescritorNome( dto ) );\n        documentoTemporario.setSignatarioCpf( dtoPrescritorCpf( dto ) );\n        documentoTemporario.setSignatarioDescricaoCbo( dtoPrescritorCboDescricao( dto ) );\n        documentoTemporario.setSignatarioCodigoCbo2002( dtoPrescritorCboCodigoCbo2002( dto ) );\n        documentoTemporario.setCidadaoNome( dtoCidadaoNome( dto ) );\n        documentoTemporario.setCidadaoCpf( dtoCidadaoCpf( dto ) );\n        documentoTemporario.setCidadaoCns( dtoCidadaoCns( dto ) );\n        documentoTemporario.setCidadaoNomeSocial( dtoCidadaoNomeSocial( dto ) );\n        documentoTemporario.setCidadaoNomeMae( dtoCidadaoNomeMae( dto ) );\n        documentoTemporario.setCidadaoDataNascimento( dtoCidadaoDataNascimento( dto ) );\n        documentoTemporario.setTipoDocumento( tipoDocumentoEnumToTipoDocumento( dto.getTipoDocumento() ) );\n\n        afterDocumentoTemporarioMapping( documentoTemporario, dto );\n\n        return documentoTemporario;\n    }\n\n    private String dtoPrescritorNome(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1EmissorDto prescritor = v1DocumentoTemporarioCreateDto.getPrescritor();\n        if ( prescritor == null ) {\n            return null;\n        }\n        String nome = prescritor.getNome();\n        if ( nome == null ) {\n            return null;\n        }\n        return nome;\n    }\n\n    private String dtoPrescritorCpf(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1EmissorDto prescritor = v1DocumentoTemporarioCreateDto.getPrescritor();\n        if ( prescritor == null ) {\n            return null;\n        }\n        String cpf = prescritor.getCpf();\n        if ( cpf == null ) {\n            return null;\n        }\n        return cpf;\n    }\n\n    private String dtoPrescritorCboDescricao(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1EmissorDto prescritor = v1DocumentoTemporarioCreateDto.getPrescritor();\n        if ( prescritor == null ) {\n            return null;\n        }\n        V1CboDto cbo = prescritor.getCbo();\n        if ( cbo == null ) {\n            return null;\n        }\n        String descricao = cbo.getDescricao();\n        if ( descricao == null ) {\n            return null;\n        }\n        return descricao;\n    }\n\n    private String dtoPrescritorCboCodigoCbo2002(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1EmissorDto prescritor = v1DocumentoTemporarioCreateDto.getPrescritor();\n        if ( prescritor == null ) {\n            return null;\n        }\n        V1CboDto cbo = prescritor.getCbo();\n        if ( cbo == null ) {\n            return null;\n        }\n        String codigoCbo2002 = cbo.getCodigoCbo2002();\n        if ( codigoCbo2002 == null ) {\n            return null;\n        }\n        return codigoCbo2002;\n    }\n\n    private String dtoCidadaoNome(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1CidadaoDto cidadao = v1DocumentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String nome = cidadao.getNome();\n        if ( nome == null ) {\n            return null;\n        }\n        return nome;\n    }\n\n    private String dtoCidadaoCpf(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1CidadaoDto cidadao = v1DocumentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String cpf = cidadao.getCpf();\n        if ( cpf == null ) {\n            return null;\n        }\n        return cpf;\n    }\n\n    private String dtoCidadaoCns(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1CidadaoDto cidadao = v1DocumentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String cns = cidadao.getCns();\n        if ( cns == null ) {\n            return null;\n        }\n        return cns;\n    }\n\n    private String dtoCidadaoNomeSocial(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1CidadaoDto cidadao = v1DocumentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String nomeSocial = cidadao.getNomeSocial();\n        if ( nomeSocial == null ) {\n            return null;\n        }\n        return nomeSocial;\n    }\n\n    private String dtoCidadaoNomeMae(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1CidadaoDto cidadao = v1DocumentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        String nomeMae = cidadao.getNomeMae();\n        if ( nomeMae == null ) {\n            return null;\n        }\n        return nomeMae;\n    }\n\n    private LocalDate dtoCidadaoDataNascimento(V1DocumentoTemporarioCreateDto v1DocumentoTemporarioCreateDto) {\n        if ( v1DocumentoTemporarioCreateDto == null ) {\n            return null;\n        }\n        V1CidadaoDto cidadao = v1DocumentoTemporarioCreateDto.getCidadao();\n        if ( cidadao == null ) {\n            return null;\n        }\n        LocalDate dataNascimento = cidadao.getDataNascimento();\n        if ( dataNascimento == null ) {\n            return null;\n        }\n        return dataNascimento;\n    }\n\n    protected TipoDocumento tipoDocumentoEnumToTipoDocumento(TipoDocumentoEnum tipoDocumentoEnum) {\n        if ( tipoDocumentoEnum == null ) {\n            return null;\n        }\n\n        TipoDocumento tipoDocumento = new TipoDocumento();\n\n        tipoDocumento.setId( tipoDocumentoEnum.getId() );\n        tipoDocumento.setNome( tipoDocumentoEnum.getNome() );\n\n        return tipoDocumento;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoFrequenciaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoReceitaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MMedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport jakarta.annotation.Generated;\nimport java.time.LocalDate;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MReceitaMedicamentoDto extends MetaBean<ReceitaMedicamentoDto> {\n\n	public static final MReceitaMedicamentoDto meta = new MReceitaMedicamentoDto();\n\n	public final MetaField<Long> id = createField(Long.class, ""id"");\n	public final MetaField<String> posologia = createField(String.class, ""posologia"");\n	public final MetaField<Long> quantidadeReceitada = createField(Long.class, ""quantidadeReceitada"");\n	public final MetaField<String> viaAdministracao = createField(String.class, ""viaAdministracao"");\n	public final MetaField<Boolean> usoContinuo = createField(Boolean.class, ""usoContinuo"");\n	private MMedicamentoDto medicamento;\n	public final MetaField<LocalDate> dataInicioTratamento = createField(LocalDate.class, ""dataInicioTratamento"");\n	public final MetaField<LocalDate> dataFimTratamento = createField(LocalDate.class, ""dataFimTratamento"");\n	public final MetaField<String> duracaoTratamento = createField(String.class, ""duracaoTratamento"");\n	public final MetaField<String> dose = createField(String.class, ""dose"");\n	public final MetaField<TipoFrequenciaEnum> tipoFrequencia = createField(TipoFrequenciaEnum.class, ""tipoFrequencia"");\n	public final MetaField<String> frequenciaDose = createField(String.class, ""frequenciaDose"");\n	public final MetaField<Boolean> doseUnica = createField(Boolean.class, ""doseUnica"");\n	public final MetaField<String> recomendacao = createField(String.class, ""recomendacao"");\n	public final MetaField<TipoReceitaEnum> tipoReceita = createField(TipoReceitaEnum.class, ""tipoReceita"");\n	public final MetaField<Boolean> fornecidaAnteriormente = createField(Boolean.class, ""fornecidaAnteriormente"");\n\n	public MReceitaMedicamentoDto() {\n		super(ReceitaMedicamentoDto.class);\n	}\n\n	public MReceitaMedicamentoDto(MetaBean<?> parent) {\n		super(parent, ReceitaMedicamentoDto.class);\n	}\n\n	public MReceitaMedicamentoDto(MetaBean<?> parent, String alias) {\n		super(parent, ReceitaMedicamentoDto.class, alias);\n	}\n\n	public MMedicamentoDto medicamento(){\n		if(medicamento == null){\n			medicamento = new MMedicamentoDto(this, ""medicamento"");\n		}\n		return medicamento;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.CategoriaMedicamentoEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MedicamentoDto;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MMedicamentoDto extends MetaBean<MedicamentoDto> {\n\n	public static final MMedicamentoDto meta = new MMedicamentoDto();\n\n	public final MetaField<String> principioAtivo = createField(String.class, ""principioAtivo"");\n	public final MetaField<String> unidadeFornecimento = createField(String.class, ""unidadeFornecimento"");\n	public final MetaField<String> concentracao = createField(String.class, ""concentracao"");\n	public final MetaField<String> formaFarmaceutica = createField(String.class, ""formaFarmaceutica"");\n	public final MetaField<CategoriaMedicamentoEnum> categoriaMedicamento = createField(CategoriaMedicamentoEnum.class, ""categoriaMedicamento"");\n	public final MetaField<String> codigoCatMat = createField(String.class, ""codigoCatMat"");\n\n	public MMedicamentoDto() {\n		super(MedicamentoDto.class);\n	}\n\n	public MMedicamentoDto(MetaBean<?> parent) {\n		super(parent, MedicamentoDto.class);\n	}\n\n	public MMedicamentoDto(MetaBean<?> parent, String alias) {\n		super(parent, MedicamentoDto.class, alias);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoFrequenciaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoReceitaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper.TipoFrequenciaMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper.TipoReceitaMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoFrequencia;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoReceita;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class ReceitaMedicamentoMapperImpl extends ReceitaMedicamentoMapper {\n\n    @Autowired\n    private MedicamentoMapper medicamentoMapper;\n    @Autowired\n    private TipoFrequenciaMapper tipoFrequenciaMapper;\n    @Autowired\n    private TipoReceitaMapper tipoReceitaMapper;\n\n    @Override\n    public ReceitaMedicamentoDto toDto(ReceitaMedicamento receitaMedicamentos) {\n        if ( receitaMedicamentos == null ) {\n            return null;\n        }\n\n        ReceitaMedicamentoDto receitaMedicamentoDto = new ReceitaMedicamentoDto();\n\n        receitaMedicamentoDto.setId( receitaMedicamentos.getId() );\n        receitaMedicamentoDto.setPosologia( receitaMedicamentos.getPosologia() );\n        receitaMedicamentoDto.setQuantidadeReceitada( receitaMedicamentos.getQuantidadeReceitada() );\n        receitaMedicamentoDto.setViaAdministracao( receitaMedicamentos.getViaAdministracao() );\n        receitaMedicamentoDto.setUsoContinuo( receitaMedicamentos.getUsoContinuo() );\n        receitaMedicamentoDto.setMedicamento( medicamentoMapper.toDto( receitaMedicamentos.getMedicamento() ) );\n        receitaMedicamentoDto.setDataInicioTratamento( receitaMedicamentos.getDataInicioTratamento() );\n        receitaMedicamentoDto.setDataFimTratamento( receitaMedicamentos.getDataFimTratamento() );\n        receitaMedicamentoDto.setDuracaoTratamento( receitaMedicamentos.getDuracaoTratamento() );\n        receitaMedicamentoDto.setDose( receitaMedicamentos.getDose() );\n        receitaMedicamentoDto.setTipoFrequencia( tipoFrequenciaMapper.toEnum( receitaMedicamentos.getTipoFrequencia(), TipoFrequenciaEnum.class ) );\n        receitaMedicamentoDto.setFrequenciaDose( receitaMedicamentos.getFrequenciaDose() );\n        receitaMedicamentoDto.setDoseUnica( receitaMedicamentos.getDoseUnica() );\n        receitaMedicamentoDto.setRecomendacao( receitaMedicamentos.getRecomendacao() );\n        receitaMedicamentoDto.setTipoReceita( tipoReceitaMapper.toEnum( receitaMedicamentos.getTipoReceita(), TipoReceitaEnum.class ) );\n\n        return receitaMedicamentoDto;\n    }\n\n    @Override\n    public List<ReceitaMedicamentoDto> toDto(List<ReceitaMedicamento> receitaMedicamentos) {\n        if ( receitaMedicamentos == null ) {\n            return null;\n        }\n\n        List<ReceitaMedicamentoDto> list = new ArrayList<ReceitaMedicamentoDto>( receitaMedicamentos.size() );\n        for ( ReceitaMedicamento receitaMedicamento : receitaMedicamentos ) {\n            list.add( toDto( receitaMedicamento ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public ReceitaMedicamento toEntity(ReceitaMedicamentoDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        ReceitaMedicamento receitaMedicamento = new ReceitaMedicamento();\n\n        receitaMedicamento.setId( dto.getId() );\n        receitaMedicamento.setQuantidadeReceitada( dto.getQuantidadeReceitada() );\n        receitaMedicamento.setViaAdministracao( dto.getViaAdministracao() );\n        receitaMedicamento.setUsoContinuo( dto.getUsoContinuo() );\n        receitaMedicamento.setDataInicioTratamento( dto.getDataInicioTratamento() );\n        receitaMedicamento.setDataFimTratamento( dto.getDataFimTratamento() );\n        receitaMedicamento.setDuracaoTratamento( dto.getDuracaoTratamento() );\n        receitaMedicamento.setDose( dto.getDose() );\n        receitaMedicamento.setTipoFrequencia( tipoFrequenciaMapper.toEntity( dto.getTipoFrequencia(), TipoFrequencia.class ) );\n        receitaMedicamento.setFrequenciaDose( dto.getFrequenciaDose() );\n        receitaMedicamento.setDoseUnica( dto.getDoseUnica() );\n        receitaMedicamento.setRecomendacao( dto.getRecomendacao() );\n        receitaMedicamento.setTipoReceita( tipoReceitaMapper.toEntity( dto.getTipoReceita(), TipoReceita.class ) );\n\n        afterEntityMapping( receitaMedicamento, dto );\n\n        return receitaMedicamento;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.CategoriaMedicamentoEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper.CategoriaMedicamentoMapper;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.CategoriaMedicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.Medicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.MedicamentoDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class MedicamentoMapperImpl extends MedicamentoMapper {\n\n    @Autowired\n    private CategoriaMedicamentoMapper categoriaMedicamentoMapper;\n\n    @Override\n    public List<Medicamento> toEntity(List<MedicamentoDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Medicamento> list = new ArrayList<Medicamento>( dtoList.size() );\n        for ( MedicamentoDto medicamentoDto : dtoList ) {\n            list.add( toEntity( medicamentoDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<MedicamentoDto> toDto(List<Medicamento> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<MedicamentoDto> list = new ArrayList<MedicamentoDto>( entityList.size() );\n        for ( Medicamento medicamento : entityList ) {\n            list.add( toDto( medicamento ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public Medicamento toEntity(MedicamentoDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Medicamento medicamento = new Medicamento();\n\n        medicamento.setPrincipioAtivo( dto.getPrincipioAtivo() );\n        medicamento.setConcentracao( dto.getConcentracao() );\n        medicamento.setFormaFarmaceutica( dto.getFormaFarmaceutica() );\n        medicamento.setUnidadeFornecimento( dto.getUnidadeFornecimento() );\n        medicamento.setCategoriaMedicamento( categoriaMedicamentoMapper.toEntity( dto.getCategoriaMedicamento(), CategoriaMedicamento.class ) );\n        medicamento.setCodigoCatMat( dto.getCodigoCatMat() );\n\n        return medicamento;\n    }\n\n    @Override\n    public MedicamentoDto toDto(Medicamento dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        MedicamentoDto medicamentoDto = new MedicamentoDto();\n\n        medicamentoDto.setPrincipioAtivo( dto.getPrincipioAtivo() );\n        medicamentoDto.setUnidadeFornecimento( dto.getUnidadeFornecimento() );\n        medicamentoDto.setConcentracao( dto.getConcentracao() );\n        medicamentoDto.setFormaFarmaceutica( dto.getFormaFarmaceutica() );\n        medicamentoDto.setCategoriaMedicamento( categoriaMedicamentoMapper.toEnum( dto.getCategoriaMedicamento(), CategoriaMedicamentoEnum.class ) );\n        medicamentoDto.setCodigoCatMat( dto.getCodigoCatMat() );\n\n        return medicamentoDto;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class TipoReceitaMapperImpl extends TipoReceitaMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper;\n\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.dto.ReceitaMedicamentoQueryDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoFrequenciaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.enums.TipoReceitaEnum;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.Medicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.ReceitaMedicamento;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoFrequencia;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.common.model.TipoReceita;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.dto.ReceitaMedicamentoDto;\nimport br.ufsc.bridge.pecassinador.receitamedicamento.latest.mapper.MedicamentoMapper;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class ReceitaMedicamentoQueryDtoMapperImpl implements ReceitaMedicamentoQueryDtoMapper {\n\n    @Autowired\n    private MedicamentoMapper medicamentoMapper;\n    @Autowired\n    private TipoReceitaMapper tipoReceitaMapper;\n    @Autowired\n    private TipoFrequenciaMapper tipoFrequenciaMapper;\n\n    @Override\n    public ReceitaMedicamentoQueryDto toEntity(ReceitaMedicamentoDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        boolean fornecidaAnteriormente = false;\n\n        if ( dto.getFornecidaAnteriormente() != null ) {\n            fornecidaAnteriormente = dto.getFornecidaAnteriormente();\n        }\n\n        ReceitaMedicamento receitaMedicamento = null;\n\n        ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto = new ReceitaMedicamentoQueryDto( receitaMedicamento, fornecidaAnteriormente );\n\n        return receitaMedicamentoQueryDto;\n    }\n\n    @Override\n    public List<ReceitaMedicamentoQueryDto> toEntity(List<ReceitaMedicamentoDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<ReceitaMedicamentoQueryDto> list = new ArrayList<ReceitaMedicamentoQueryDto>( dtoList.size() );\n        for ( ReceitaMedicamentoDto receitaMedicamentoDto : dtoList ) {\n            list.add( toEntity( receitaMedicamentoDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<ReceitaMedicamentoDto> toDto(List<ReceitaMedicamentoQueryDto> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<ReceitaMedicamentoDto> list = new ArrayList<ReceitaMedicamentoDto>( entityList.size() );\n        for ( ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto : entityList ) {\n            list.add( toDto( receitaMedicamentoQueryDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public ReceitaMedicamentoDto toDto(ReceitaMedicamentoQueryDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        ReceitaMedicamentoDto receitaMedicamentoDto = new ReceitaMedicamentoDto();\n\n        receitaMedicamentoDto.setFornecidaAnteriormente( dto.fornecidaAnteriormente() );\n        receitaMedicamentoDto.setId( dtoReceitaMedicamentoId( dto ) );\n        receitaMedicamentoDto.setPosologia( dtoReceitaMedicamentoPosologia( dto ) );\n        receitaMedicamentoDto.setQuantidadeReceitada( dtoReceitaMedicamentoQuantidadeReceitada( dto ) );\n        receitaMedicamentoDto.setViaAdministracao( dtoReceitaMedicamentoViaAdministracao( dto ) );\n        receitaMedicamentoDto.setUsoContinuo( dtoReceitaMedicamentoUsoContinuo( dto ) );\n        receitaMedicamentoDto.setMedicamento( medicamentoMapper.toDto( dtoReceitaMedicamentoMedicamento( dto ) ) );\n        receitaMedicamentoDto.setDataInicioTratamento( dtoReceitaMedicamentoDataInicioTratamento( dto ) );\n        receitaMedicamentoDto.setDataFimTratamento( dtoReceitaMedicamentoDataFimTratamento( dto ) );\n        receitaMedicamentoDto.setDuracaoTratamento( dtoReceitaMedicamentoDuracaoTratamento( dto ) );\n        receitaMedicamentoDto.setDose( dtoReceitaMedicamentoDose( dto ) );\n        receitaMedicamentoDto.setTipoFrequencia( tipoFrequenciaMapper.toEnum( dtoReceitaMedicamentoTipoFrequencia( dto ), TipoFrequenciaEnum.class ) );\n        receitaMedicamentoDto.setFrequenciaDose( dtoReceitaMedicamentoFrequenciaDose( dto ) );\n        receitaMedicamentoDto.setDoseUnica( dtoReceitaMedicamentoDoseUnica( dto ) );\n        receitaMedicamentoDto.setRecomendacao( dtoReceitaMedicamentoRecomendacao( dto ) );\n        receitaMedicamentoDto.setTipoReceita( tipoReceitaMapper.toEnum( dtoReceitaMedicamentoTipoReceita( dto ), TipoReceitaEnum.class ) );\n\n        return receitaMedicamentoDto;\n    }\n\n    private Long dtoReceitaMedicamentoId(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        Long id = receitaMedicamento.getId();\n        if ( id == null ) {\n            return null;\n        }\n        return id;\n    }\n\n    private String dtoReceitaMedicamentoPosologia(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        String posologia = receitaMedicamento.getPosologia();\n        if ( posologia == null ) {\n            return null;\n        }\n        return posologia;\n    }\n\n    private Long dtoReceitaMedicamentoQuantidadeReceitada(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        Long quantidadeReceitada = receitaMedicamento.getQuantidadeReceitada();\n        if ( quantidadeReceitada == null ) {\n            return null;\n        }\n        return quantidadeReceitada;\n    }\n\n    private String dtoReceitaMedicamentoViaAdministracao(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        String viaAdministracao = receitaMedicamento.getViaAdministracao();\n        if ( viaAdministracao == null ) {\n            return null;\n        }\n        return viaAdministracao;\n    }\n\n    private Boolean dtoReceitaMedicamentoUsoContinuo(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        Boolean usoContinuo = receitaMedicamento.getUsoContinuo();\n        if ( usoContinuo == null ) {\n            return null;\n        }\n        return usoContinuo;\n    }\n\n    private Medicamento dtoReceitaMedicamentoMedicamento(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        Medicamento medicamento = receitaMedicamento.getMedicamento();\n        if ( medicamento == null ) {\n            return null;\n        }\n        return medicamento;\n    }\n\n    private LocalDate dtoReceitaMedicamentoDataInicioTratamento(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        LocalDate dataInicioTratamento = receitaMedicamento.getDataInicioTratamento();\n        if ( dataInicioTratamento == null ) {\n            return null;\n        }\n        return dataInicioTratamento;\n    }\n\n    private LocalDate dtoReceitaMedicamentoDataFimTratamento(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        LocalDate dataFimTratamento = receitaMedicamento.getDataFimTratamento();\n        if ( dataFimTratamento == null ) {\n            return null;\n        }\n        return dataFimTratamento;\n    }\n\n    private String dtoReceitaMedicamentoDuracaoTratamento(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        String duracaoTratamento = receitaMedicamento.getDuracaoTratamento();\n        if ( duracaoTratamento == null ) {\n            return null;\n        }\n        return duracaoTratamento;\n    }\n\n    private String dtoReceitaMedicamentoDose(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        String dose = receitaMedicamento.getDose();\n        if ( dose == null ) {\n            return null;\n        }\n        return dose;\n    }\n\n    private TipoFrequencia dtoReceitaMedicamentoTipoFrequencia(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        TipoFrequencia tipoFrequencia = receitaMedicamento.getTipoFrequencia();\n        if ( tipoFrequencia == null ) {\n            return null;\n        }\n        return tipoFrequencia;\n    }\n\n    private String dtoReceitaMedicamentoFrequenciaDose(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        String frequenciaDose = receitaMedicamento.getFrequenciaDose();\n        if ( frequenciaDose == null ) {\n            return null;\n        }\n        return frequenciaDose;\n    }\n\n    private Boolean dtoReceitaMedicamentoDoseUnica(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        Boolean doseUnica = receitaMedicamento.getDoseUnica();\n        if ( doseUnica == null ) {\n            return null;\n        }\n        return doseUnica;\n    }\n\n    private String dtoReceitaMedicamentoRecomendacao(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        String recomendacao = receitaMedicamento.getRecomendacao();\n        if ( recomendacao == null ) {\n            return null;\n        }\n        return recomendacao;\n    }\n\n    private TipoReceita dtoReceitaMedicamentoTipoReceita(ReceitaMedicamentoQueryDto receitaMedicamentoQueryDto) {\n        if ( receitaMedicamentoQueryDto == null ) {\n            return null;\n        }\n        ReceitaMedicamento receitaMedicamento = receitaMedicamentoQueryDto.receitaMedicamento();\n        if ( receitaMedicamento == null ) {\n            return null;\n        }\n        TipoReceita tipoReceita = receitaMedicamento.getTipoReceita();\n        if ( tipoReceita == null ) {\n            return null;\n        }\n        return tipoReceita;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class CategoriaMedicamentoMapperImpl extends CategoriaMedicamentoMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.receitamedicamento.common.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class TipoFrequenciaMapperImpl extends TipoFrequenciaMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MCboDto extends MetaBean<CboDto> {\n\n	public static final MCboDto meta = new MCboDto();\n\n	public final MetaField<String> descricao = createField(String.class, ""descricao"");\n	public final MetaField<String> codigoCbo2002 = createField(String.class, ""codigoCbo2002"");\n\n	public MCboDto() {\n		super(CboDto.class);\n	}\n\n	public MCboDto(MetaBean<?> parent) {\n		super(parent, CboDto.class);\n	}\n\n	public MCboDto(MetaBean<?> parent, String alias) {\n		super(parent, CboDto.class, alias);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.MCboDto;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MEmissorDto extends MetaBean<EmissorDto> {\n\n	public static final MEmissorDto meta = new MEmissorDto();\n\n	public final MetaField<Long> id = createField(Long.class, ""id"");\n	public final MetaField<String> cpf = createField(String.class, ""cpf"");\n	public final MetaField<String> nome = createField(String.class, ""nome"");\n	public final MetaField<String> siglaConselhoClasse = createField(String.class, ""siglaConselhoClasse"");\n	public final MetaField<String> numeroConselhoClasse = createField(String.class, ""numeroConselhoClasse"");\n	public final MetaField<String> ufEmissoraConselhoClasse = createField(String.class, ""ufEmissoraConselhoClasse"");\n	private MCboDto cbo;\n\n	public MEmissorDto() {\n		super(EmissorDto.class);\n	}\n\n	public MEmissorDto(MetaBean<?> parent) {\n		super(parent, EmissorDto.class);\n	}\n\n	public MEmissorDto(MetaBean<?> parent, String alias) {\n		super(parent, EmissorDto.class, alias);\n	}\n\n	public MCboDto cbo(){\n		if(cbo == null){\n			cbo = new MCboDto(this, ""cbo"");\n		}\n		return cbo;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.mapper;\n\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Cbo;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.CboDto;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class CboMapperImpl implements CboMapper {\n\n    @Override\n    public Cbo toEntity(CboDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Cbo cbo = new Cbo();\n\n        cbo.setDescricao( dto.getDescricao() );\n        cbo.setCodigoCbo2002( dto.getCodigoCbo2002() );\n\n        return cbo;\n    }\n\n    @Override\n    public CboDto toDto(Cbo entity) {\n        if ( entity == null ) {\n            return null;\n        }\n\n        CboDto cboDto = new CboDto();\n\n        cboDto.setDescricao( entity.getDescricao() );\n        cboDto.setCodigoCbo2002( entity.getCodigoCbo2002() );\n\n        return cboDto;\n    }\n\n    @Override\n    public List<Cbo> toEntity(List<CboDto> dtoList) {\n        if ( dtoList == null ) {\n            return null;\n        }\n\n        List<Cbo> list = new ArrayList<Cbo>( dtoList.size() );\n        for ( CboDto cboDto : dtoList ) {\n            list.add( toEntity( cboDto ) );\n        }\n\n        return list;\n    }\n\n    @Override\n    public List<CboDto> toDto(List<Cbo> entityList) {\n        if ( entityList == null ) {\n            return null;\n        }\n\n        List<CboDto> list = new ArrayList<CboDto>( entityList.size() );\n        for ( Cbo cbo : entityList ) {\n            list.add( toDto( cbo ) );\n        }\n\n        return list;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.latest.mapper;\n\nimport br.ufsc.bridge.pecassinador.emissor.common.model.Emissor;\nimport br.ufsc.bridge.pecassinador.emissor.latest.dto.EmissorDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class EmissorMapperImpl extends EmissorMapper {\n\n    @Autowired\n    private CboMapper cboMapper;\n\n    @Override\n    public Emissor toEntity(EmissorDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Emissor emissor = new Emissor();\n\n        emissor.setCpf( dto.getCpf() );\n        emissor.setNome( dto.getNome() );\n        emissor.setNumeroConselhoClasse( dto.getNumeroConselhoClasse() );\n        emissor.setCbo( cboMapper.toEntity( dto.getCbo() ) );\n\n        afterEntityMapping( emissor, dto );\n\n        return emissor;\n    }\n\n    @Override\n    public EmissorDto toDto(Emissor emissor) {\n        if ( emissor == null ) {\n            return null;\n        }\n\n        EmissorDto emissorDto = new EmissorDto();\n\n        emissorDto.setCpf( emissor.getCpf() );\n        emissorDto.setNome( emissor.getNome() );\n        emissorDto.setNumeroConselhoClasse( emissor.getNumeroConselhoClasse() );\n        emissorDto.setCbo( cboMapper.toDto( emissor.getCbo() ) );\n\n        afterDtoMapping( emissorDto, emissor );\n\n        return emissorDto;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.emissor.common.mapper;\n\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class ConselhoClasseMapperImpl extends ConselhoClasseMapper {\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.prescricao.latest.mapper;\n\nimport br.ufsc.bridge.pecassinador.cidadao.latest.mapper.CidadaoMapper;\nimport br.ufsc.bridge.pecassinador.documento.common.enums.TipoDocumentoEnum;\nimport br.ufsc.bridge.pecassinador.documento.common.mapper.TipoDocumentoMapper;\nimport br.ufsc.bridge.pecassinador.documento.common.model.Documento;\nimport br.ufsc.bridge.pecassinador.documento.common.model.TipoDocumento;\nimport br.ufsc.bridge.pecassinador.documento.latest.dto.DocumentoTemporarioCreateDto;\nimport br.ufsc.bridge.pecassinador.emissor.latest.mapper.EmissorMapper;\nimport br.ufsc.bridge.pecassinador.prescricao.common.dto.PrescricaoDto;\nimport javax.annotation.processing.Generated;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class PrescricaoMapperImpl extends PrescricaoMapper {\n\n    @Autowired\n    private EmissorMapper emissorMapper;\n    @Autowired\n    private CidadaoMapper cidadaoMapper;\n    @Autowired\n    private TipoDocumentoMapper tipoDocumentoMapper;\n\n    @Override\n    public PrescricaoDto toDto(Documento documento) {\n        if ( documento == null ) {\n            return null;\n        }\n\n        PrescricaoDto prescricaoDto = new PrescricaoDto();\n\n        prescricaoDto.setId( documento.getId() );\n        prescricaoDto.setCodigoAcesso( documento.getCodigoAcesso() );\n        prescricaoDto.setDataAssinatura( documento.getDataAssinatura() );\n        prescricaoDto.setDataEmissao( documento.getDataEmissao() );\n        prescricaoDto.setCidadao( cidadaoMapper.toDto( documento.getCidadao() ) );\n        prescricaoDto.setEmissor( emissorMapper.toDto( documento.getEmissor() ) );\n        prescricaoDto.setTipoDocumento( tipoDocumentoMapper.toEnum( documento.getTipoDocumento(), TipoDocumentoEnum.class ) );\n        prescricaoDto.setDataInicioAtendimento( documento.getDataInicioAtendimento() );\n\n        return prescricaoDto;\n    }\n\n    @Override\n    public Documento toEntity(DocumentoTemporarioCreateDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        Documento documento = new Documento();\n\n        documento.setCidadao( cidadaoMapper.toEntity( dto.getCidadao() ) );\n        documento.setTipoDocumento( tipoDocumentoMapper.toEntity( dto.getTipoDocumento(), TipoDocumento.class ) );\n        documento.setDataInicioAtendimento( dto.getDataInicioAtendimento() );\n\n        afterEntityMapping( documento, dto );\n\n        return documento;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.contaservico.mapper;\n\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoCreateRequestDto;\nimport br.ufsc.bridge.pecassinador.contaservico.dto.ContaServicoDto;\nimport br.ufsc.bridge.pecassinador.contaservico.model.ContaServico;\nimport javax.annotation.processing.Generated;\nimport org.springframework.stereotype.Component;\n\n@Generated(\n    value = ""org.mapstruct.ap.MappingProcessor"",\n    date = ""2024-10-03T15:26:36-0300"",\n    comments = ""version: 1.5.3.Final, compiler: javac, environment: Java 17.0.12 (Azul Systems, Inc.)""\n)\n@Component\npublic class ContaServicoMapperImpl extends ContaServicoMapper {\n\n    @Override\n    public ContaServico toEntity(ContaServicoCreateRequestDto dto) {\n        if ( dto == null ) {\n            return null;\n        }\n\n        ContaServico contaServico = new ContaServico();\n\n        contaServico.setNome( dto.getClientId() );\n        contaServico.setRedirectUri( dto.getRedirectUri() );\n\n        afterEntityMapping( contaServico, dto );\n\n        return contaServico;\n    }\n\n    @Override\n    public ContaServicoDto toDto(ContaServico contaServico) {\n        if ( contaServico == null ) {\n            return null;\n        }\n\n        ContaServicoDto contaServicoDto = new ContaServicoDto();\n\n        contaServicoDto.setClientId( contaServico.getNome() );\n        contaServicoDto.setId( contaServico.getId() );\n        contaServicoDto.setRedirectUri( contaServico.getRedirectUri() );\n\n        return contaServicoDto;\n    }\n}\n"
not_service,"package br.ufsc.bridge.pecassinador.sandbox.dto;\n\nimport br.ufsc.bridge.metafy.MetaBean;\nimport br.ufsc.bridge.metafy.MetaField;\nimport br.ufsc.bridge.pecassinador.sandbox.dto.SandboxCreateDto;\nimport jakarta.annotation.Generated;\n\n@Generated(""br.ufsc.bridge.metafy.processor.MetafyProcessor"")\npublic class MSandboxCreateDto extends MetaBean<SandboxCreateDto> {\n\n	public static final MSandboxCreateDto meta = new MSandboxCreateDto();\n\n	public final MetaField<String> cpf = createField(String.class, ""cpf"");\n\n	public MSandboxCreateDto() {\n		super(SandboxCreateDto.class);\n	}\n\n	public MSandboxCreateDto(MetaBean<?> parent) {\n		super(parent, SandboxCreateDto.class);\n	}\n\n	public MSandboxCreateDto(MetaBean<?> parent, String alias) {\n		super(parent, SandboxCreateDto.class, alias);\n	}\n\n}\n"
