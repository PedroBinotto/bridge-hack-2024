service,"package br.ufsc.bridge.jornadaestudante.backend.module.info.service;\n\nimport lombok.Getter;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class InfoService {\n\n	@Getter\n	@Value(""${bridge.validadorDiploma.url:}"")\n	private String urlValidadorDiploma;\n\n	public String loadUrlValidadorDiploma() {\n		return this.getUrlValidadorDiploma();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.service;\n\nimport static java.util.Objects.nonNull;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.AllDevicesTopicSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.EstudanteAndDependentesInstituicaoIdListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenIdByTokenAndEstudanteIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenUpdateCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTopicListByTokenDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.InstituicaoFirebaseTopicListSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.TokenHasAnotherEstudanteQueryCommand;\n\n@Service\n@RequiredArgsConstructor\npublic class FirebaseTokenService {\n\n	private final AllDevicesTopicSaveCommand allDevicesTopicSaveCommand;\n	private final EstudanteAndDependentesInstituicaoIdListQueryCommand estudanteAndDependentesInstituicaoIdListQueryCommand;\n	private final FirebaseTokenDeleteCommand firebaseTokenDeleteCommand;\n	private final FirebaseTokenIdByTokenAndEstudanteIdQueryCommand firebaseTokenIdByTokenAndEstudanteIdQueryCommand;\n	private final FirebaseTokenIdQueryCommand firebaseTokenIdQueryCommand;\n	private final FirebaseTokenSaveCommand firebaseTokenSaveCommand;\n	private final FirebaseTokenUpdateCommand firebaseTokenUpdateCommand;\n	private final FirebaseTopicListByTokenDeleteCommand firebaseTopicListByTokenDeleteCommand;\n	private final InstituicaoFirebaseTopicListSaveCommand instituicaoFirebaseTopicListSaveCommand;\n	private final TokenHasAnotherEstudanteQueryCommand tokenHasAnotherEstudanteQueryCommand;\n\n	@Transactional\n	public void saveTokenEstudante(String token, Long estudanteId) {\n		var firebaseTokenId = this.firebaseTokenIdQueryCommand.execute(token);\n		if (nonNull(firebaseTokenId)) {\n			this.firebaseTokenUpdateCommand.execute(firebaseTokenId);\n		} else {\n			firebaseTokenId = this.firebaseTokenSaveCommand.execute(token, estudanteId);\n		}\n\n		this.allDevicesTopicSaveCommand.execute(token, firebaseTokenId);\n		var instituicaoIdSet = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(estudanteId);\n		this.instituicaoFirebaseTopicListSaveCommand.execute(token, firebaseTokenId, instituicaoIdSet);\n	}\n\n	@Transactional\n	public void deleteTokenEstudante(String token, Long estudanteId) {\n		var tokenId = this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand.execute(token, estudanteId);\n		if (nonNull(tokenId)) {\n			this.firebaseTopicListByTokenDeleteCommand.execute(tokenId, token);\n			this.firebaseTokenDeleteCommand.execute(tokenId);\n		}\n	}\n\n	public boolean tokenHasAnotherEstudante(Long estudanteId, String token) {\n		return this.tokenHasAnotherEstudanteQueryCommand.execute(estudanteId, token);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.command.ParcelasEstudanteQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\n\n@Service\n@RequiredArgsConstructor\npublic class PeMeiaService {\n\n	private final ParcelasEstudanteQueryCommand parcelasEstudanteQueryCommand;\n\n	public List<PeMeiaParcelaDto> loadDadosEstudante(Long estudanteId) {\n		return this.parcelasEstudanteQueryCommand.execute(estudanteId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command.EstudanteInstituicaoIdsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command.MensagemDtoListAllEstudantesQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MensagemDto;\n\n@Service\n@RequiredArgsConstructor\npublic class MensagemService {\n\n	private final EstudanteInstituicaoIdsQueryCommand estudanteInstituicaoIdsQueryCommand;\n	private final MensagemDtoListAllEstudantesQueryCommand mensagemDtoListAllEstudantesQueryCommand;\n\n	public List<MensagemDto> loadMensagens(Long estudanteId) {\n		var instituicaoIds = this.estudanteInstituicaoIdsQueryCommand.execute(estudanteId);\n		return this.mensagemDtoListAllEstudantesQueryCommand.execute(instituicaoIds);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command.CursoDtoByFilterListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command.InstituicaoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.InstituicaoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class InstituicaoService {\n\n	private final InstituicaoDtoListQueryCommand instituicaoDtoListQueryCommand;\n	private final CursoDtoByFilterListQueryCommand cursoDtoByFilterListQueryCommand;\n\n	public List<InstituicaoDto> loadInstituicaoList(Long municipioId, Integer sistemaOrigemId) {\n		return this.instituicaoDtoListQueryCommand.execute(municipioId, sistemaOrigemId);\n	}\n\n	public List<CursoSolicitacaoDadosDto> loadCursoListByInstituicao(Long instituicaoId, Long municipioId, Integer turnoId) {\n		return this.cursoDtoByFilterListQueryCommand.execute(instituicaoId, municipioId, turnoId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.command.V1CursoDtoByFilterListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.command.V1InstituicaoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1InstituicaoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class V1InstituicaoService {\n\n	private final V1InstituicaoDtoListQueryCommand instituicaoDtoListQueryCommand;\n	private final V1CursoDtoByFilterListQueryCommand cursoDtoByFilterListQueryCommand;\n\n	public List<V1InstituicaoDto> loadInstituicaoList(Long municipioId) {\n		return this.instituicaoDtoListQueryCommand.execute(municipioId);\n	}\n\n	public List<V1CursoSolicitacaoDadosDto> loadCursoListByInstituicao(Long instituicaoId, Long municipioId) {\n		return this.cursoDtoByFilterListQueryCommand.execute(instituicaoId, municipioId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service;\n\nimport static java.util.Objects.nonNull;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.service.BcpfService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.DependenteDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteCpfByIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteCreateUpdateCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteIdByMatriculaIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteLoginDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.TermoUsoEstudanteSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteCreateUpdateInput;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class EstudanteService {\n\n	private final BcpfService bcpfService;\n	private final DependenteDtoListQueryCommand dependenteDtoListQueryCommand;\n	private final EstudanteCreateUpdateCommand estudanteCreateUpdateCommand;\n	private final EstudanteCpfByIdQueryCommand estudanteCpfByIdQueryCommand;\n	private final EstudanteDtoQueryCommand estudanteDtoQueryCommand;\n	private final EstudanteIdByMatriculaIdQueryCommand estudanteIdByMatriculaIdQueryCommand;\n	private final EstudanteLoginDtoQueryCommand estudanteLoginDtoQueryCommand;\n	private final MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand;\n	private final EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand;\n	private final TermoUsoEstudanteSaveCommand termoUsoEstudanteSaveCommand;\n\n	public EstudanteAuthenticatedDto createUpdate(EstudanteCreateUpdateInput estudanteInput) {\n		var estudanteBcpf = this.bcpfService.getDadosEstudanteByCpf(estudanteInput.getCpf());\n		return this.estudanteCreateUpdateCommand.execute(estudanteInput, estudanteBcpf);\n	}\n\n	public EstudanteAuthenticatedDto getEstudanteAuthenticatedDto(String cpf) {\n		return this.estudanteLoginDtoQueryCommand.execute(cpf);\n	}\n\n	public String loadCpfById(Long estudanteId) {\n		return this.estudanteCpfByIdQueryCommand.execute(estudanteId);\n	}\n\n	public EstudanteDto loadDadosPessoais(Long estudanteId) {\n		var estudanteDto = this.estudanteDtoQueryCommand.execute(estudanteId);\n		estudanteDto.setMotivosSituacaoPeMeia(this.motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand.execute(estudanteId));\n		return estudanteDto;\n	}\n\n	public List<EstudanteDto> loadDependentes(Long estudanteId) {\n		var dependenteDtoList = this.dependenteDtoListQueryCommand.execute(estudanteId);\n		var estudanteIdSet = dependenteDtoList.stream()\n				.map(EstudanteDto::getId)\n				.collect(Collectors.toSet());\n		var estudanteIdToMotivoSituacao = this.estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand.execute(estudanteIdSet);\n		return dependenteDtoList.stream()\n				.map(estudanteDto -> {\n					estudanteDto.setMotivosSituacaoPeMeia(estudanteIdToMotivoSituacao.get(estudanteDto.getId()));\n					return estudanteDto;\n				}).toList();\n	}\n\n	public List<EstudanteDto> loadDependentesBcpf(Long estudanteId) {\n		this.loadDependentes(estudanteId).forEach(dependente -> {\n			var estudanteBcpf = this.bcpfService.getDadosEstudanteByCpf(dependente.getCpf());\n\n			if (nonNull(estudanteBcpf)) {\n				this.estudanteCreateUpdateCommand.executeBcpf(dependente.getCpf(), estudanteBcpf);\n			}\n		});\n\n		return this.loadDependentes(estudanteId)\n				.stream()\n				.filter(dto -> dto.getDataNascimento() != null)\n				.toList();\n	}\n\n	public Long loadEstudanteIdByMatriculaId(Long matriculaId) {\n		return this.estudanteIdByMatriculaIdQueryCommand.execute(matriculaId);\n	}\n\n	public TermoUsoDto saveTermoUso(TermoUsoDto termoUso, Long estudanteId) {\n		return this.termoUsoEstudanteSaveCommand.execute(termoUso, estudanteId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service;\n\nimport static java.util.stream.Collectors.toSet;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.CursoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.DisciplinaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteInstituicaoDtoByInstituicaoIdsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.MatriculaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.DisciplinaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MatriculaDto;\n\n@Service\n@RequiredArgsConstructor\npublic class MatriculaService {\n\n	private final CursoDtoListQueryCommand cursoDtoListQueryCommand;\n	private final DisciplinaDtoListQueryCommand disciplinaDtoListQueryCommand;\n	private final EstudanteInstituicaoDtoByInstituicaoIdsQueryCommand estudanteInstituicaoDtoByInstituicaoIdsQueryCommand;\n	private final MatriculaDtoListQueryCommand matriculaDtoListQueryCommand;\n\n	public List<MatriculaDto> loadMatriculasByEstudanteId(Long estudanteId) {\n		var matriculas = this.matriculaDtoListQueryCommand.execute(estudanteId);\n\n		if (!matriculas.isEmpty()) {\n			var cursos = this.cursoDtoListQueryCommand.executeByIds(matriculas.values().stream().map(MatriculaDto::getCursoId).collect(toSet()));\n\n			if (!cursos.isEmpty()) {\n				var instituicoes = this.estudanteInstituicaoDtoByInstituicaoIdsQueryCommand.execute(\n						matriculas\n								.values()\n								.stream()\n								.map(MatriculaDto::getInstituicaoId)\n								.collect(toSet())\n				);\n\n				matriculas.forEach((matriculaId, matriculaDto) -> {\n					matriculaDto.setInstituicao(instituicoes.get(matriculaDto.getInstituicaoId()));\n					matriculaDto.setCurso(cursos.get(matriculaDto.getCursoId()));\n				});\n			}\n		}\n\n		return matriculas\n				.values()\n				.stream()\n				.toList();\n	}\n\n	public List<DisciplinaDto> loadDisciplinasByMatricula(Long matriculaId) {\n		return this.disciplinaDtoListQueryCommand.executeByMatriculaId(matriculaId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.MunicipioDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.UfDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.UfDto;\n\n@Service\n@RequiredArgsConstructor\npublic class EnderecoService {\n\n	private final UfDtoListQueryCommand ufDtoListQueryCommand;\n	private final MunicipioDtoListQueryCommand municipioDtoListQueryCommand;\n\n	public List<UfDto> loadUfList() {\n		return this.ufDtoListQueryCommand.execute();\n	}\n\n	public List<MunicipioDto> loadMunicipioList(Long ufId) {\n		return this.municipioDtoListQueryCommand.execute(ufId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.command.BannerListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\n\n@Service\n@RequiredArgsConstructor\npublic class BannerService {\n	private final BannerListQueryCommand bannerListQueryCommand;\n\n	public List<BannerDto> loadBannerList() {\n		return this.bannerListQueryCommand.execute();\n	}\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.bcpf.service;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.lang.Nullable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfResponse;\n\nimport reactor.core.publisher.Mono;\n\n@Service\n@Slf4j\npublic class BcpfService {\n\n	private final WebClient webClient;\n\n	private BcpfService(@Nullable @Qualifier(""bcpfWebClient"") WebClient webClient) {\n		this.webClient = webClient;\n	}\n\n	public BcpfEstudanteDto getDadosEstudanteByCpf(String cpf) {\n		return this.webClient != null ?\n				this.webClient\n						.post()\n						.uri(""/api/cpf/consultar-cpf"")\n						.bodyValue(new BcpfDto(cpf))\n						.retrieve()\n						.bodyToMono(BcpfResponse.class)\n						.flatMap(bcpfResponse -> Mono.just(bcpfResponse.getData()))\n						.doOnError(error -> log.error(""Não foi possível sincronizar com o b-CPF. {}"", error.getMessage()))\n						.onErrorResume(error -> Mono.empty())\n						.block()\n				: null;\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service;\n\nimport static java.util.Objects.isNull;\nimport static java.util.Objects.nonNull;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ComprovanteVinculoDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ComprovanteVinculoInfoDtoFillCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.HashValidadorExistsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ValidadorHashSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.VinculoMatriculaQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.VinculoMatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.VinculoHash;\n\n@Service\n@RequiredArgsConstructor\npublic class ComprovanteVinculoService {\n\n	private final ComprovanteVinculoBuilder builder;\n	private final ComprovanteVinculoDtoQueryCommand comprovanteVinculoDtoQueryCommand;\n	private final ComprovanteVinculoInfoDtoFillCommand comprovanteVinculoInfoDtoFillCommand;\n	private final ValidadorHashSaveCommand validadorHashSaveCommand;\n	private final VinculoMatriculaQueryCommand vinculoMatriculaQueryCommand;\n	private final HashValidadorExistsQueryCommand hashValidadorExistsQueryCommand;\n\n	public ByteArrayResource generateComprovanteVinculoPdf(Long matriculaId) {\n		var vinculoDto = this.generateComprovanteVinculo(matriculaId);\n		return nonNull(vinculoDto) ? this.builder.generatePdfComprovanteVinculo(vinculoDto) : null;\n	}\n\n	public ComprovanteVinculoInfoDto generateComprovanteVinculoInfo(Long matriculaId) {\n		var vinculoDto = this.generateComprovanteVinculo(matriculaId);\n		return nonNull(vinculoDto) ? this.comprovanteVinculoInfoDtoFillCommand.execute(vinculoDto) : null;\n	}\n\n	public VinculoMatriculaDto loadVinculoByHashValidador(String hash) {\n		return this.vinculoMatriculaQueryCommand.execute(hash);\n	}\n\n	protected ComprovanteVinculoDto generateComprovanteVinculo(Long matriculaId) {\n		var vinculoDto = this.comprovanteVinculoDtoQueryCommand.execute(matriculaId);\n		if (nonNull(vinculoDto) && isNull(vinculoDto.getHash())) {\n			String hash;\n			do {\n				hash = VinculoHash.generate();\n			} while (this.hashValidadorExistsQueryCommand.execute(hash));\n			this.validadorHashSaveCommand.execute(vinculoDto.getMatriculaId(), hash);\n			vinculoDto.setHash(hash);\n		}\n		return vinculoDto;\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.service;\n\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.formatDayMonthYear;\n\nimport java.time.LocalDate;\nimport java.util.UUID;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.lang.Nullable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.config.AvaliacaoServicoProperties;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AcompanhamentoPayload;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AcompanhamentoResponse;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AvaliacaoServicoPayload;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AvaliacaoServicoResponse;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\n\nimport reactor.core.publisher.Mono;\n\n@Service\n@Slf4j\npublic class AvaliacaoService {\n\n	private final WebClient avaliacaoWebClient;\n	private final WebClient acompanhamentoWebClient;\n	private final AvaliacaoServicoProperties properties;\n	private final EstudanteService estudanteService;\n\n	private AvaliacaoService(AvaliacaoServicoProperties properties, EstudanteService estudanteService,\n			@Nullable @Qualifier(""avaliacaoWebClient"") WebClient avaliacaoWebClient,\n			@Nullable @Qualifier(""acompanhamentoWebClient"") WebClient acompanhamentoWebClient) {\n		this.properties = properties;\n		this.avaliacaoWebClient = avaliacaoWebClient;\n		this.acompanhamentoWebClient = acompanhamentoWebClient;\n		this.estudanteService = estudanteService;\n	}\n\n	public AvaliacaoServicoResponse getAvaliacaoServicoForm(Long estudanteId, String servico) {\n		var servicoId = this.properties.getServico(servico);\n		var orgao = this.properties.getOrgao();\n		if (StringUtils.isNotBlank(orgao) && servicoId != null && this.avaliacaoWebClient != null && this.acompanhamentoWebClient != null) {\n			var acompanhamento = this.generateAcompanhamento(this.estudanteService.loadCpfById(estudanteId), orgao, servicoId);\n			if (acompanhamento != null) {\n				return this.generateAvaliacao(acompanhamento);\n			}\n		}\n\n		log.error(""Não foi possível obter formulário de avaliação para o serviço {}."", servico);\n		return null;\n	}\n\n	private AcompanhamentoPayload generateAcompanhamento(String cpfCidadao, String orgao, String servicoId) {\n		var dataEtapa = formatDayMonthYear(LocalDate.now());\n		var payload =\n				AcompanhamentoPayload.builder()\n						.cpfCidadao(cpfCidadao)\n						.dataEtapa(dataEtapa)\n						.dataSituacaoEtapa(dataEtapa)\n						.orgao(orgao)\n						.protocolo(UUID.randomUUID().toString())\n						.servico(servicoId)\n						.etapa(AcompanhamentoPayload.ETAPA_INICIAL)\n						.situacaoEtapa(AcompanhamentoPayload.ETAPA_INICIAL)\n						.build();\n\n		return this.acompanhamentoWebClient\n				.post()\n				.uri(""/api/acompanhamento/"")\n				.body(Mono.just(payload), AcompanhamentoPayload.class)\n				.retrieve()\n				.bodyToMono(AcompanhamentoResponse.class)\n				.flatMap(response -> Mono.just(payload))\n				.doOnError(error -> log.error(""Não foi possível criar um novo acompanhamento. {}"", error.getMessage()))\n				.onErrorResume(error -> Mono.empty())\n				.block();\n	}\n\n	private AvaliacaoServicoResponse generateAvaliacao(AcompanhamentoPayload acompanhamento) {\n		var payload = AvaliacaoServicoPayload.builder()\n				.orgao(acompanhamento.getOrgao())\n				.etapa(acompanhamento.getEtapa())\n				.protocolo(acompanhamento.getProtocolo())\n				.servico(acompanhamento.getServico())\n				.cpfCidadao(acompanhamento.getCpfCidadao())\n				.build();\n\n		return this.avaliacaoWebClient\n				.post()\n				.uri(""/api/avaliacao/formulario"")\n				.body(Mono.just(payload), AvaliacaoServicoPayload.class)\n				.retrieve()\n				.bodyToMono(AvaliacaoServicoResponse.class)\n				.doOnError(error -> log.error(""Não foi possível obter formulário de avaliação. {}"", error.getMessage()))\n				.onErrorResume(error -> Mono.empty())\n				.block();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.CursoExistInMunicipioQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.CursoTurnoExistsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.DependenteIdListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.EstudanteIdBySolicitacaoDadosIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormDto;\n\n@Service\n@RequiredArgsConstructor\npublic class SolicitacaoDadosService {\n\n	private final CursoExistInMunicipioQueryCommand cursoExistInMunicipioQueryCommand;\n	private final CursoTurnoExistsQueryCommand cursoTurnoExistsQueryCommand;\n	private final DependenteIdListQueryCommand dependenteIdListQueryCommand;\n	private final EstudanteIdBySolicitacaoDadosIdQueryCommand estudanteIdBySolicitacaoDadosIdQueryCommand;\n	private final SolicitacaoDadosEstudanteDeleteCommand solicitacaoDadosEstudantedDeleteCommand;\n	private final SolicitacaoDadosEstudanteDtoListQueryCommand solicitacaoDadosEstudanteDtoListQueryCommand;\n	private final SolicitacaoDadosEstudanteSaveCommand solicitacaoDadosEstudanteSaveCommand;\n\n	@Transactional\n	public SolicitacaoDadosEstudanteFormDto saveSolicitacaoDadosEstudante(\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosDto,\n			Long estudanteLogadoId,\n			Long estudanteId\n	) {\n		this.solicitacaoDadosEstudanteSaveCommand.save(solicitacaoDadosDto, estudanteLogadoId, estudanteId);\n		return solicitacaoDadosDto;\n	}\n\n	public List<SolicitacaoDadosEstudanteDto> loadSolicitacaoDadosEstudanteList(Long estudanteId) {\n		return this.solicitacaoDadosEstudanteDtoListQueryCommand.execute(estudanteId);\n	}\n\n	@Transactional\n	public SolicitacaoDadosEstudanteFormDto updateSolicitacaoDadosEstudante(\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosDto,\n			Long estudanteLogadoId,\n			Long solicitacaoDadosId\n	) {\n		this.solicitacaoDadosEstudanteSaveCommand.update(solicitacaoDadosDto, estudanteLogadoId, solicitacaoDadosId);\n		return solicitacaoDadosDto;\n	}\n\n	public Long loadEstudanteIdBySolicitacaoDadosId(Long solicitacaoDadosId) {\n		return this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosId);\n	}\n\n	public List<Long> loadDependentesIds(Long estudanteId) {\n		return this.dependenteIdListQueryCommand.execute(estudanteId);\n	}\n\n	public Boolean cursoExistsInMunicipio(Long cursoId, Long municipioId) {\n		return this.cursoExistInMunicipioQueryCommand.execute(cursoId, municipioId);\n	}\n\n	public Boolean cursoTurnoExists(Long cursoId, Integer turnoId) {\n		return this.cursoTurnoExistsQueryCommand.execute(cursoId, turnoId);\n	}\n\n	@Transactional\n	public void deleteSolicitacaoDadosEstudante(Long solicitacaoDadosId) {\n		this.solicitacaoDadosEstudantedDeleteCommand.execute(solicitacaoDadosId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.auth.service;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QRefreshToken.refreshToken;\n\nimport java.time.Instant;\nimport java.util.UUID;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.RefreshToken;\n\n@Service\n@RequiredArgsConstructor\npublic class RefreshTokenService {\n\n	@Getter\n	@Value(""${bridge.auth.frontend.refresh-token.expiration:604800}"") // default 1 semana\n	private Long expirationInSeconds;\n\n	private final DAO dao;\n\n	@Transactional\n	public RefreshToken create(String principal) {\n		RefreshToken refreshToken = new RefreshToken();\n		refreshToken.setToken(UUID.randomUUID().toString());\n		refreshToken.setPrincipal(principal);\n		refreshToken.setDataCriacao(Instant.now());\n		refreshToken.setDataExpiracao(refreshToken.getDataCriacao().plusSeconds(this.expirationInSeconds));\n		this.dao.persist(refreshToken);\n		return refreshToken;\n	}\n\n	@Transactional\n	public void removeByPrincipal(String principal) {\n		this.dao.queryFactory().delete(refreshToken).where(refreshToken.principal.eq(principal)).execute();\n	}\n\n	public RefreshToken load(String token) {\n		return this.dao.find(RefreshToken.class, token);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.app.config.security;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\nimport org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser;\nimport org.springframework.security.oauth2.core.oidc.user.OidcUser;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.security.model.GovBrUserPrincipal;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteCreateUpdateInput;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\n\n@Component\n@RequiredArgsConstructor\npublic class OAuthDetailService extends OidcUserService {\n\n	private static final String SOCIAL_NAME = ""social_name"";\n\n	private final EstudanteService estudanteService;\n\n	@Override\n	public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {\n		OidcUser oidcUser = super.loadUser(userRequest);\n		String cpf = oidcUser.getSubject();\n\n		EstudanteCreateUpdateInput input = new EstudanteCreateUpdateInput();\n		input.setCpf(cpf);\n		input.setEmail(oidcUser.getEmail());\n		input.setTelefone(oidcUser.getPhoneNumber());\n		input.setNome(oidcUser.getFullName());\n		input.setNomeSocial(oidcUser.getClaimAsString(SOCIAL_NAME));\n\n		EstudanteAuthenticatedDto estudanteAuthenticatedDto = this.estudanteService.createUpdate(input);\n\n		return new DefaultOidcUser(oidcUser.getAuthorities(), oidcUser.getIdToken(), new GovBrUserPrincipal(estudanteAuthenticatedDto, oidcUser.getClaims()));\n	}\n}\n"
