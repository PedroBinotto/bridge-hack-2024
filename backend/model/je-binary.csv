service,"package br.ufsc.bridge.jornadaestudante.backend.module.info.service;\n\nimport lombok.Getter;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class InfoService {\n\n	@Getter\n	@Value(""${bridge.validadorDiploma.url:}"")\n	private String urlValidadorDiploma;\n\n	public String loadUrlValidadorDiploma() {\n		return this.getUrlValidadorDiploma();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.service;\n\nimport static java.util.Objects.nonNull;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.AllDevicesTopicSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.EstudanteAndDependentesInstituicaoIdListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenIdByTokenAndEstudanteIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTokenUpdateCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.FirebaseTopicListByTokenDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.InstituicaoFirebaseTopicListSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command.TokenHasAnotherEstudanteQueryCommand;\n\n@Service\n@RequiredArgsConstructor\npublic class FirebaseTokenService {\n\n	private final AllDevicesTopicSaveCommand allDevicesTopicSaveCommand;\n	private final EstudanteAndDependentesInstituicaoIdListQueryCommand estudanteAndDependentesInstituicaoIdListQueryCommand;\n	private final FirebaseTokenDeleteCommand firebaseTokenDeleteCommand;\n	private final FirebaseTokenIdByTokenAndEstudanteIdQueryCommand firebaseTokenIdByTokenAndEstudanteIdQueryCommand;\n	private final FirebaseTokenIdQueryCommand firebaseTokenIdQueryCommand;\n	private final FirebaseTokenSaveCommand firebaseTokenSaveCommand;\n	private final FirebaseTokenUpdateCommand firebaseTokenUpdateCommand;\n	private final FirebaseTopicListByTokenDeleteCommand firebaseTopicListByTokenDeleteCommand;\n	private final InstituicaoFirebaseTopicListSaveCommand instituicaoFirebaseTopicListSaveCommand;\n	private final TokenHasAnotherEstudanteQueryCommand tokenHasAnotherEstudanteQueryCommand;\n\n	@Transactional\n	public void saveTokenEstudante(String token, Long estudanteId) {\n		var firebaseTokenId = this.firebaseTokenIdQueryCommand.execute(token);\n		if (nonNull(firebaseTokenId)) {\n			this.firebaseTokenUpdateCommand.execute(firebaseTokenId);\n		} else {\n			firebaseTokenId = this.firebaseTokenSaveCommand.execute(token, estudanteId);\n		}\n\n		this.allDevicesTopicSaveCommand.execute(token, firebaseTokenId);\n		var instituicaoIdSet = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(estudanteId);\n		this.instituicaoFirebaseTopicListSaveCommand.execute(token, firebaseTokenId, instituicaoIdSet);\n	}\n\n	@Transactional\n	public void deleteTokenEstudante(String token, Long estudanteId) {\n		var tokenId = this.firebaseTokenIdByTokenAndEstudanteIdQueryCommand.execute(token, estudanteId);\n		if (nonNull(tokenId)) {\n			this.firebaseTopicListByTokenDeleteCommand.execute(tokenId, token);\n			this.firebaseTokenDeleteCommand.execute(tokenId);\n		}\n	}\n\n	public boolean tokenHasAnotherEstudante(Long estudanteId, String token) {\n		return this.tokenHasAnotherEstudanteQueryCommand.execute(estudanteId, token);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.command.ParcelasEstudanteQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\n\n@Service\n@RequiredArgsConstructor\npublic class PeMeiaService {\n\n	private final ParcelasEstudanteQueryCommand parcelasEstudanteQueryCommand;\n\n	public List<PeMeiaParcelaDto> loadDadosEstudante(Long estudanteId) {\n		return this.parcelasEstudanteQueryCommand.execute(estudanteId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command.EstudanteInstituicaoIdsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command.MensagemDtoListAllEstudantesQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model.MensagemDto;\n\n@Service\n@RequiredArgsConstructor\npublic class MensagemService {\n\n	private final EstudanteInstituicaoIdsQueryCommand estudanteInstituicaoIdsQueryCommand;\n	private final MensagemDtoListAllEstudantesQueryCommand mensagemDtoListAllEstudantesQueryCommand;\n\n	public List<MensagemDto> loadMensagens(Long estudanteId) {\n		var instituicaoIds = this.estudanteInstituicaoIdsQueryCommand.execute(estudanteId);\n		return this.mensagemDtoListAllEstudantesQueryCommand.execute(instituicaoIds);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command.CursoDtoByFilterListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.command.InstituicaoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model.InstituicaoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class InstituicaoService {\n\n	private final InstituicaoDtoListQueryCommand instituicaoDtoListQueryCommand;\n	private final CursoDtoByFilterListQueryCommand cursoDtoByFilterListQueryCommand;\n\n	public List<InstituicaoDto> loadInstituicaoList(Long municipioId, Integer sistemaOrigemId) {\n		return this.instituicaoDtoListQueryCommand.execute(municipioId, sistemaOrigemId);\n	}\n\n	public List<CursoSolicitacaoDadosDto> loadCursoListByInstituicao(Long instituicaoId, Long municipioId, Integer turnoId) {\n		return this.cursoDtoByFilterListQueryCommand.execute(instituicaoId, municipioId, turnoId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.command.V1CursoDtoByFilterListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.command.V1InstituicaoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1CursoSolicitacaoDadosDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model.V1InstituicaoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class V1InstituicaoService {\n\n	private final V1InstituicaoDtoListQueryCommand instituicaoDtoListQueryCommand;\n	private final V1CursoDtoByFilterListQueryCommand cursoDtoByFilterListQueryCommand;\n\n	public List<V1InstituicaoDto> loadInstituicaoList(Long municipioId) {\n		return this.instituicaoDtoListQueryCommand.execute(municipioId);\n	}\n\n	public List<V1CursoSolicitacaoDadosDto> loadCursoListByInstituicao(Long instituicaoId, Long municipioId) {\n		return this.cursoDtoByFilterListQueryCommand.execute(instituicaoId, municipioId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service;\n\nimport static java.util.Objects.nonNull;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.service.BcpfService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.DependenteDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteCpfByIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteCreateUpdateCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteIdByMatriculaIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteLoginDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.TermoUsoEstudanteSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteCreateUpdateInput;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\n\n@Service\n@RequiredArgsConstructor\npublic class EstudanteService {\n\n	private final BcpfService bcpfService;\n	private final DependenteDtoListQueryCommand dependenteDtoListQueryCommand;\n	private final EstudanteCreateUpdateCommand estudanteCreateUpdateCommand;\n	private final EstudanteCpfByIdQueryCommand estudanteCpfByIdQueryCommand;\n	private final EstudanteDtoQueryCommand estudanteDtoQueryCommand;\n	private final EstudanteIdByMatriculaIdQueryCommand estudanteIdByMatriculaIdQueryCommand;\n	private final EstudanteLoginDtoQueryCommand estudanteLoginDtoQueryCommand;\n	private final MotivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand;\n	private final EstudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand;\n	private final TermoUsoEstudanteSaveCommand termoUsoEstudanteSaveCommand;\n\n	public EstudanteAuthenticatedDto createUpdate(EstudanteCreateUpdateInput estudanteInput) {\n		var estudanteBcpf = this.bcpfService.getDadosEstudanteByCpf(estudanteInput.getCpf());\n		return this.estudanteCreateUpdateCommand.execute(estudanteInput, estudanteBcpf);\n	}\n\n	public EstudanteAuthenticatedDto getEstudanteAuthenticatedDto(String cpf) {\n		return this.estudanteLoginDtoQueryCommand.execute(cpf);\n	}\n\n	public String loadCpfById(Long estudanteId) {\n		return this.estudanteCpfByIdQueryCommand.execute(estudanteId);\n	}\n\n	public EstudanteDto loadDadosPessoais(Long estudanteId) {\n		var estudanteDto = this.estudanteDtoQueryCommand.execute(estudanteId);\n		estudanteDto.setMotivosSituacaoPeMeia(this.motivoSituacaoPeMeiaDtoListByEstudanteIdQueryCommand.execute(estudanteId));\n		return estudanteDto;\n	}\n\n	public List<EstudanteDto> loadDependentes(Long estudanteId) {\n		var dependenteDtoList = this.dependenteDtoListQueryCommand.execute(estudanteId);\n		var estudanteIdSet = dependenteDtoList.stream()\n				.map(EstudanteDto::getId)\n				.collect(Collectors.toSet());\n		var estudanteIdToMotivoSituacao = this.estudanteIdToMotivoSituacaoPeMeiaDtoListQueryCommand.execute(estudanteIdSet);\n		return dependenteDtoList.stream()\n				.map(estudanteDto -> {\n					estudanteDto.setMotivosSituacaoPeMeia(estudanteIdToMotivoSituacao.get(estudanteDto.getId()));\n					return estudanteDto;\n				}).toList();\n	}\n\n	public List<EstudanteDto> loadDependentesBcpf(Long estudanteId) {\n		this.loadDependentes(estudanteId).forEach(dependente -> {\n			var estudanteBcpf = this.bcpfService.getDadosEstudanteByCpf(dependente.getCpf());\n\n			if (nonNull(estudanteBcpf)) {\n				this.estudanteCreateUpdateCommand.executeBcpf(dependente.getCpf(), estudanteBcpf);\n			}\n		});\n\n		return this.loadDependentes(estudanteId)\n				.stream()\n				.filter(dto -> dto.getDataNascimento() != null)\n				.toList();\n	}\n\n	public Long loadEstudanteIdByMatriculaId(Long matriculaId) {\n		return this.estudanteIdByMatriculaIdQueryCommand.execute(matriculaId);\n	}\n\n	public TermoUsoDto saveTermoUso(TermoUsoDto termoUso, Long estudanteId) {\n		return this.termoUsoEstudanteSaveCommand.execute(termoUso, estudanteId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service;\n\nimport static java.util.stream.Collectors.toSet;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.CursoDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.DisciplinaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.EstudanteInstituicaoDtoByInstituicaoIdsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command.MatriculaDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.DisciplinaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.MatriculaDto;\n\n@Service\n@RequiredArgsConstructor\npublic class MatriculaService {\n\n	private final CursoDtoListQueryCommand cursoDtoListQueryCommand;\n	private final DisciplinaDtoListQueryCommand disciplinaDtoListQueryCommand;\n	private final EstudanteInstituicaoDtoByInstituicaoIdsQueryCommand estudanteInstituicaoDtoByInstituicaoIdsQueryCommand;\n	private final MatriculaDtoListQueryCommand matriculaDtoListQueryCommand;\n\n	public List<MatriculaDto> loadMatriculasByEstudanteId(Long estudanteId) {\n		var matriculas = this.matriculaDtoListQueryCommand.execute(estudanteId);\n\n		if (!matriculas.isEmpty()) {\n			var cursos = this.cursoDtoListQueryCommand.executeByIds(matriculas.values().stream().map(MatriculaDto::getCursoId).collect(toSet()));\n\n			if (!cursos.isEmpty()) {\n				var instituicoes = this.estudanteInstituicaoDtoByInstituicaoIdsQueryCommand.execute(\n						matriculas\n								.values()\n								.stream()\n								.map(MatriculaDto::getInstituicaoId)\n								.collect(toSet())\n				);\n\n				matriculas.forEach((matriculaId, matriculaDto) -> {\n					matriculaDto.setInstituicao(instituicoes.get(matriculaDto.getInstituicaoId()));\n					matriculaDto.setCurso(cursos.get(matriculaDto.getCursoId()));\n				});\n			}\n		}\n\n		return matriculas\n				.values()\n				.stream()\n				.toList();\n	}\n\n	public List<DisciplinaDto> loadDisciplinasByMatricula(Long matriculaId) {\n		return this.disciplinaDtoListQueryCommand.executeByMatriculaId(matriculaId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.MunicipioDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.UfDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.UfDto;\n\n@Service\n@RequiredArgsConstructor\npublic class EnderecoService {\n\n	private final UfDtoListQueryCommand ufDtoListQueryCommand;\n	private final MunicipioDtoListQueryCommand municipioDtoListQueryCommand;\n\n	public List<UfDto> loadUfList() {\n		return this.ufDtoListQueryCommand.execute();\n	}\n\n	public List<MunicipioDto> loadMunicipioList(Long ufId) {\n		return this.municipioDtoListQueryCommand.execute(ufId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.command.BannerListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\n\n@Service\n@RequiredArgsConstructor\npublic class BannerService {\n	private final BannerListQueryCommand bannerListQueryCommand;\n\n	public List<BannerDto> loadBannerList() {\n		return this.bannerListQueryCommand.execute();\n	}\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.bcpf.service;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.lang.Nullable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model.BcpfResponse;\n\nimport reactor.core.publisher.Mono;\n\n@Service\n@Slf4j\npublic class BcpfService {\n\n	private final WebClient webClient;\n\n	private BcpfService(@Nullable @Qualifier(""bcpfWebClient"") WebClient webClient) {\n		this.webClient = webClient;\n	}\n\n	public BcpfEstudanteDto getDadosEstudanteByCpf(String cpf) {\n		return this.webClient != null ?\n				this.webClient\n						.post()\n						.uri(""/api/cpf/consultar-cpf"")\n						.bodyValue(new BcpfDto(cpf))\n						.retrieve()\n						.bodyToMono(BcpfResponse.class)\n						.flatMap(bcpfResponse -> Mono.just(bcpfResponse.getData()))\n						.doOnError(error -> log.error(""Não foi possível sincronizar com o b-CPF. {}"", error.getMessage()))\n						.onErrorResume(error -> Mono.empty())\n						.block()\n				: null;\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.service;\n\nimport static java.util.Objects.isNull;\nimport static java.util.Objects.nonNull;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.stereotype.Service;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ComprovanteVinculoDtoQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ComprovanteVinculoInfoDtoFillCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.HashValidadorExistsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.ValidadorHashSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command.VinculoMatriculaQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.VinculoMatriculaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.VinculoHash;\n\n@Service\n@RequiredArgsConstructor\npublic class ComprovanteVinculoService {\n\n	private final ComprovanteVinculoBuilder builder;\n	private final ComprovanteVinculoDtoQueryCommand comprovanteVinculoDtoQueryCommand;\n	private final ComprovanteVinculoInfoDtoFillCommand comprovanteVinculoInfoDtoFillCommand;\n	private final ValidadorHashSaveCommand validadorHashSaveCommand;\n	private final VinculoMatriculaQueryCommand vinculoMatriculaQueryCommand;\n	private final HashValidadorExistsQueryCommand hashValidadorExistsQueryCommand;\n\n	public ByteArrayResource generateComprovanteVinculoPdf(Long matriculaId) {\n		var vinculoDto = this.generateComprovanteVinculo(matriculaId);\n		return nonNull(vinculoDto) ? this.builder.generatePdfComprovanteVinculo(vinculoDto) : null;\n	}\n\n	public ComprovanteVinculoInfoDto generateComprovanteVinculoInfo(Long matriculaId) {\n		var vinculoDto = this.generateComprovanteVinculo(matriculaId);\n		return nonNull(vinculoDto) ? this.comprovanteVinculoInfoDtoFillCommand.execute(vinculoDto) : null;\n	}\n\n	public VinculoMatriculaDto loadVinculoByHashValidador(String hash) {\n		return this.vinculoMatriculaQueryCommand.execute(hash);\n	}\n\n	protected ComprovanteVinculoDto generateComprovanteVinculo(Long matriculaId) {\n		var vinculoDto = this.comprovanteVinculoDtoQueryCommand.execute(matriculaId);\n		if (nonNull(vinculoDto) && isNull(vinculoDto.getHash())) {\n			String hash;\n			do {\n				hash = VinculoHash.generate();\n			} while (this.hashValidadorExistsQueryCommand.execute(hash));\n			this.validadorHashSaveCommand.execute(vinculoDto.getMatriculaId(), hash);\n			vinculoDto.setHash(hash);\n		}\n		return vinculoDto;\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.service;\n\nimport static br.ufsc.bridge.jornadaestudante.common.utils.ParseUtils.formatDayMonthYear;\n\nimport java.time.LocalDate;\nimport java.util.UUID;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.lang.Nullable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.config.AvaliacaoServicoProperties;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AcompanhamentoPayload;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AcompanhamentoResponse;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AvaliacaoServicoPayload;\nimport br.ufsc.bridge.jornadaestudante.backend.module.avaliacaoServico.latest.model.AvaliacaoServicoResponse;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\n\nimport reactor.core.publisher.Mono;\n\n@Service\n@Slf4j\npublic class AvaliacaoService {\n\n	private final WebClient avaliacaoWebClient;\n	private final WebClient acompanhamentoWebClient;\n	private final AvaliacaoServicoProperties properties;\n	private final EstudanteService estudanteService;\n\n	private AvaliacaoService(AvaliacaoServicoProperties properties, EstudanteService estudanteService,\n			@Nullable @Qualifier(""avaliacaoWebClient"") WebClient avaliacaoWebClient,\n			@Nullable @Qualifier(""acompanhamentoWebClient"") WebClient acompanhamentoWebClient) {\n		this.properties = properties;\n		this.avaliacaoWebClient = avaliacaoWebClient;\n		this.acompanhamentoWebClient = acompanhamentoWebClient;\n		this.estudanteService = estudanteService;\n	}\n\n	public AvaliacaoServicoResponse getAvaliacaoServicoForm(Long estudanteId, String servico) {\n		var servicoId = this.properties.getServico(servico);\n		var orgao = this.properties.getOrgao();\n		if (StringUtils.isNotBlank(orgao) && servicoId != null && this.avaliacaoWebClient != null && this.acompanhamentoWebClient != null) {\n			var acompanhamento = this.generateAcompanhamento(this.estudanteService.loadCpfById(estudanteId), orgao, servicoId);\n			if (acompanhamento != null) {\n				return this.generateAvaliacao(acompanhamento);\n			}\n		}\n\n		log.error(""Não foi possível obter formulário de avaliação para o serviço {}."", servico);\n		return null;\n	}\n\n	private AcompanhamentoPayload generateAcompanhamento(String cpfCidadao, String orgao, String servicoId) {\n		var dataEtapa = formatDayMonthYear(LocalDate.now());\n		var payload =\n				AcompanhamentoPayload.builder()\n						.cpfCidadao(cpfCidadao)\n						.dataEtapa(dataEtapa)\n						.dataSituacaoEtapa(dataEtapa)\n						.orgao(orgao)\n						.protocolo(UUID.randomUUID().toString())\n						.servico(servicoId)\n						.etapa(AcompanhamentoPayload.ETAPA_INICIAL)\n						.situacaoEtapa(AcompanhamentoPayload.ETAPA_INICIAL)\n						.build();\n\n		return this.acompanhamentoWebClient\n				.post()\n				.uri(""/api/acompanhamento/"")\n				.body(Mono.just(payload), AcompanhamentoPayload.class)\n				.retrieve()\n				.bodyToMono(AcompanhamentoResponse.class)\n				.flatMap(response -> Mono.just(payload))\n				.doOnError(error -> log.error(""Não foi possível criar um novo acompanhamento. {}"", error.getMessage()))\n				.onErrorResume(error -> Mono.empty())\n				.block();\n	}\n\n	private AvaliacaoServicoResponse generateAvaliacao(AcompanhamentoPayload acompanhamento) {\n		var payload = AvaliacaoServicoPayload.builder()\n				.orgao(acompanhamento.getOrgao())\n				.etapa(acompanhamento.getEtapa())\n				.protocolo(acompanhamento.getProtocolo())\n				.servico(acompanhamento.getServico())\n				.cpfCidadao(acompanhamento.getCpfCidadao())\n				.build();\n\n		return this.avaliacaoWebClient\n				.post()\n				.uri(""/api/avaliacao/formulario"")\n				.body(Mono.just(payload), AvaliacaoServicoPayload.class)\n				.retrieve()\n				.bodyToMono(AvaliacaoServicoResponse.class)\n				.doOnError(error -> log.error(""Não foi possível obter formulário de avaliação. {}"", error.getMessage()))\n				.onErrorResume(error -> Mono.empty())\n				.block();\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.service;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command.CursoExistInMunicipioQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.CursoTurnoExistsQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.DependenteIdListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.EstudanteIdBySolicitacaoDadosIdQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteDeleteCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteDtoListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command.SolicitacaoDadosEstudanteSaveCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model.SolicitacaoDadosEstudanteFormDto;\n\n@Service\n@RequiredArgsConstructor\npublic class SolicitacaoDadosService {\n\n	private final CursoExistInMunicipioQueryCommand cursoExistInMunicipioQueryCommand;\n	private final CursoTurnoExistsQueryCommand cursoTurnoExistsQueryCommand;\n	private final DependenteIdListQueryCommand dependenteIdListQueryCommand;\n	private final EstudanteIdBySolicitacaoDadosIdQueryCommand estudanteIdBySolicitacaoDadosIdQueryCommand;\n	private final SolicitacaoDadosEstudanteDeleteCommand solicitacaoDadosEstudantedDeleteCommand;\n	private final SolicitacaoDadosEstudanteDtoListQueryCommand solicitacaoDadosEstudanteDtoListQueryCommand;\n	private final SolicitacaoDadosEstudanteSaveCommand solicitacaoDadosEstudanteSaveCommand;\n\n	@Transactional\n	public SolicitacaoDadosEstudanteFormDto saveSolicitacaoDadosEstudante(\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosDto,\n			Long estudanteLogadoId,\n			Long estudanteId\n	) {\n		this.solicitacaoDadosEstudanteSaveCommand.save(solicitacaoDadosDto, estudanteLogadoId, estudanteId);\n		return solicitacaoDadosDto;\n	}\n\n	public List<SolicitacaoDadosEstudanteDto> loadSolicitacaoDadosEstudanteList(Long estudanteId) {\n		return this.solicitacaoDadosEstudanteDtoListQueryCommand.execute(estudanteId);\n	}\n\n	@Transactional\n	public SolicitacaoDadosEstudanteFormDto updateSolicitacaoDadosEstudante(\n			SolicitacaoDadosEstudanteFormDto solicitacaoDadosDto,\n			Long estudanteLogadoId,\n			Long solicitacaoDadosId\n	) {\n		this.solicitacaoDadosEstudanteSaveCommand.update(solicitacaoDadosDto, estudanteLogadoId, solicitacaoDadosId);\n		return solicitacaoDadosDto;\n	}\n\n	public Long loadEstudanteIdBySolicitacaoDadosId(Long solicitacaoDadosId) {\n		return this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosId);\n	}\n\n	public List<Long> loadDependentesIds(Long estudanteId) {\n		return this.dependenteIdListQueryCommand.execute(estudanteId);\n	}\n\n	public Boolean cursoExistsInMunicipio(Long cursoId, Long municipioId) {\n		return this.cursoExistInMunicipioQueryCommand.execute(cursoId, municipioId);\n	}\n\n	public Boolean cursoTurnoExists(Long cursoId, Integer turnoId) {\n		return this.cursoTurnoExistsQueryCommand.execute(cursoId, turnoId);\n	}\n\n	@Transactional\n	public void deleteSolicitacaoDadosEstudante(Long solicitacaoDadosId) {\n		this.solicitacaoDadosEstudantedDeleteCommand.execute(solicitacaoDadosId);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.module.auth.service;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QRefreshToken.refreshToken;\n\nimport java.time.Instant;\nimport java.util.UUID;\n\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.RefreshToken;\n\n@Service\n@RequiredArgsConstructor\npublic class RefreshTokenService {\n\n	@Getter\n	@Value(""${bridge.auth.frontend.refresh-token.expiration:604800}"") // default 1 semana\n	private Long expirationInSeconds;\n\n	private final DAO dao;\n\n	@Transactional\n	public RefreshToken create(String principal) {\n		RefreshToken refreshToken = new RefreshToken();\n		refreshToken.setToken(UUID.randomUUID().toString());\n		refreshToken.setPrincipal(principal);\n		refreshToken.setDataCriacao(Instant.now());\n		refreshToken.setDataExpiracao(refreshToken.getDataCriacao().plusSeconds(this.expirationInSeconds));\n		this.dao.persist(refreshToken);\n		return refreshToken;\n	}\n\n	@Transactional\n	public void removeByPrincipal(String principal) {\n		this.dao.queryFactory().delete(refreshToken).where(refreshToken.principal.eq(principal)).execute();\n	}\n\n	public RefreshToken load(String token) {\n		return this.dao.find(RefreshToken.class, token);\n	}\n\n}\n"
service,"package br.ufsc.bridge.jornadaestudante.backend.app.config.security;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\nimport org.springframework.security.oauth2.client.oidc.userinfo.OidcUserService;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser;\nimport org.springframework.security.oauth2.core.oidc.user.OidcUser;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.app.config.security.model.GovBrUserPrincipal;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteCreateUpdateInput;\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.service.EstudanteService;\n\n@Component\n@RequiredArgsConstructor\npublic class OAuthDetailService extends OidcUserService {\n\n	private static final String SOCIAL_NAME = ""social_name"";\n\n	private final EstudanteService estudanteService;\n\n	@Override\n	public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {\n		OidcUser oidcUser = super.loadUser(userRequest);\n		String cpf = oidcUser.getSubject();\n\n		EstudanteCreateUpdateInput input = new EstudanteCreateUpdateInput();\n		input.setCpf(cpf);\n		input.setEmail(oidcUser.getEmail());\n		input.setTelefone(oidcUser.getPhoneNumber());\n		input.setNome(oidcUser.getFullName());\n		input.setNomeSocial(oidcUser.getClaimAsString(SOCIAL_NAME));\n\n		EstudanteAuthenticatedDto estudanteAuthenticatedDto = this.estudanteService.createUpdate(input);\n\n		return new DefaultOidcUser(oidcUser.getAuthorities(), oidcUser.getIdToken(), new GovBrUserPrincipal(estudanteAuthenticatedDto, oidcUser.getClaims()));\n	}\n}\n"
not_service,filecontents
not_service, String latestVersion) {\n\n	}\n\n}\n"
not_service, ModuleVersion> modules;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.info.controller;\n\nimport javax.annotation.PostConstruct;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.model.InfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.model.ModuleVersionEnum;\nimport br.ufsc.bridge.jornadaestudante.backend.module.info.service.InfoService;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@Tag(name = ""info"")\n@RestController\n@RequiredArgsConstructor\npublic class InfoController {\n\n	private InfoDto infoDto;\n	private final InfoService service;\n\n	@PostConstruct\n	protected void init() {\n		this.infoDto = new InfoDto(ModuleVersionEnum.getModuleVersionMap());\n	}\n\n	@GetMapping(""/api/info"")\n	@Operation(summary = ""Informações da API"")\n	public InfoDto showInfo() {\n		return this.infoDto;\n	}\n\n	@GetMapping(""/api/info/validador-documento"")\n	@Operation(summary = ""Informação da URL do validador de diploma"")\n	public String showValidadorDiplomaInfo() {\n		return this.service.loadUrlValidadorDiploma();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FirebaseTokenDto {\n\n	private String token;\n\n}\n"
not_service, maxLength(255));\n\n		return validator;\n	}\n\n}\n"
not_service, topicName);\n					var firebaseTopic = new FirebaseTopic();\n					firebaseTopic.setTopic(topicName);\n					firebaseTopic.setFirebaseTokenId(firebaseTokenId);\n					this.dao.persist(firebaseTopic);\n				});\n	}\n\n}\n"
not_service, topic));\n\n		this.dao.queryFactory()\n				.delete(firebaseTopic)\n				.where(firebaseTopic.firebaseTokenId.eq(tokenId))\n				.where(firebaseTopic.topic.in(topicList))\n				.execute();\n	}\n\n}\n"
not_service, firebaseTokenId);\n		firebaseToken.setDataAtualizacao(Instant.now());\n		this.dao.persist(firebaseToken);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseTopic.firebaseTopic;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTopicListByTokenIdQueryCommand {\n\n	private final DAO dao;\n\n	public List<String> execute(Long tokenId) {\n		return this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseTopic)\n				.where(firebaseTopic.firebaseTokenId.eq(tokenId))\n				.fetch();\n	}\n\n}\n"
not_service, Set<String> topics) {\n		return this.dao.queryFactory()\n				.from(firebaseTopic)\n				.where(firebaseTopic.firebaseTokenId.eq(firebaseTokenId))\n				.where(firebaseTopic.topic.in(topics))\n				.select(firebaseTopic.topic)\n				.fetch()\n				.stream()\n				.collect(toSet());\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseToken.firebaseToken;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTokenDeleteCommand {\n\n	private final DAO dao;\n\n	public void execute(Long tokenId) {\n		this.dao.queryFactory()\n				.delete(firebaseToken)\n				.where(firebaseToken.id.eq(tokenId))\n				.execute();\n	}\n\n}\n"
not_service, String token) {\n		return this.dao.queryFactory()\n				.selectFrom(firebaseToken)\n				.where(firebaseToken.token.eq(token))\n				.where(firebaseToken.estudanteId.ne(estudanteId))\n				.fetchOne() != null;\n	}\n\n}\n"
not_service, Long estudanteId) {\n		return this.dao.queryFactory()\n				.select(firebaseToken.id)\n				.from(firebaseToken)\n				.where(firebaseToken.token.eq(token))\n				.where(firebaseToken.estudanteId.eq(estudanteId))\n				.fetchOne();\n	}\n}\n"
not_service, Set.of(TOPICO_TODOS_DISPOSITIVOS)).isEmpty()) {\n			var firebaseTopic = new FirebaseTopic();\n			firebaseTopic.setTopic(TOPICO_TODOS_DISPOSITIVOS);\n			firebaseTopic.setFirebaseTokenId(firebaseTokenId);\n			this.dao.persist(firebaseTopic);\n			return firebaseTopic.getId();\n		}\n		return null;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QFirebaseToken.firebaseToken;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class FirebaseTokenIdQueryCommand {\n\n	private final DAO dao;\n\n	public Long execute(String token) {\n		return this.dao.queryFactory()\n				.from(firebaseToken)\n				.where(firebaseToken.token.eq(token))\n				.select(firebaseToken.id)\n				.fetchOne();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudanteResponsavel.estudanteResponsavel;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\nimport static java.util.stream.Collectors.toSet;\n\nimport java.util.Set;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.QEstudante;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteAndDependentesInstituicaoIdListQueryCommand {\n\n	private final DAO dao;\n\n	public Set<Long> execute(Long estudanteId) {\n		var estudanteDependente = new QEstudante(""estudanteDependente"");\n\n		return this.dao.queryFactory()\n				.select(curso.instituicaoId)\n				.from(estudante)\n				.leftJoin(estudanteResponsavel).on(estudanteResponsavel.cpfResponsavel.eq(estudante.cpf))\n				.leftJoin(estudanteDependente).on(estudanteDependente.cpf.eq(estudanteResponsavel.cpfEstudante))\n				.leftJoin(matricula).on(matricula.estudanteId.eq(estudante.id)\n						.or(matricula.estudanteId.eq(estudanteDependente.id)))\n				.leftJoin(curso).on(curso.id.eq(matricula.cursoId))\n				.where(estudante.id.eq(estudanteId))\n				.groupBy(curso.instituicaoId)\n				.fetch()\n				.stream()\n				.collect(toSet());\n	}\n\n}\n"
not_service, Long estudanteId) {\n		var firebaseToken = new FirebaseToken();\n		firebaseToken.setToken(token);\n		firebaseToken.setEstudanteId(estudanteId);\n		firebaseToken.setDataAtualizacao(Instant.now());\n		this.dao.persist(firebaseToken);\n\n		return firebaseToken.getId();\n	}\n\n}\n"
not_service, estudanteId);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class PeMeiaParcelaDto {\n\n	private Long codigoParcela;\n	private BigDecimal valorParcela;\n	private Integer numeroParcela;\n	private Integer situacaoParcelaId;\n	private String competencia;\n	private LocalDate dataOperacao;\n	private Integer motivoRejeicaoId;\n	private String descricaoMotivoRejeicao;\n	private String orientacaoMotivoRejeicao;\n	private String codigoBanco;\n	private String codigoAgencia;\n	private String numeroConta;\n\n}\n"
not_service, meta.orientacaoMotivoRejeicao);\n\n		return this.dao.queryFactory()\n				.select(select)\n				.from(parcelaPeMeia)\n				.join(estudante).on(estudante.cpf.eq(parcelaPeMeia.cpf))\n				.leftJoin(dadosBancarios).on(dadosBancarios.id.eq(parcelaPeMeia.dadosBancariosId))\n				.leftJoin(motivoRejeicao).on(motivoRejeicao.id.eq(parcelaPeMeia.motivoRejeicaoId))\n				.where(estudante.id.eq(estudanteId))\n				.fetch();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service.PeMeiaService;\nimport br.ufsc.bridge.jornadaestudante.backend.security.AuthContext;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""pedemeia"")\n@RequestMapping(""/api/v1/pedemeia"")\npublic class PeMeiaController {\n\n	private final PeMeiaService peMeiaService;\n\n	@GetMapping\n	@Operation(summary = ""Retorna a lista de parcelas do estudante"")\n	public List<PeMeiaParcelaDto> showParcelas(@AuthenticationPrincipal Jwt principal) {\n		return this.peMeiaService.loadDadosEstudante(AuthContext.from(principal).getPrincipal().getId());\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model;\n\nimport static com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@Data\n@Metafy\npublic class MensagemDto {\n\n	private String titulo;\n	private String descricao;\n	private LocalDate dataValidade;\n\n	@JsonProperty(access = READ_ONLY)\n	private Long id;\n\n	@JsonProperty(access = READ_ONLY)\n	private Instant dataCriacao;\n\n	@JsonProperty(access = READ_ONLY)\n	private Instant dataAtualizacao;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QCurso.curso;\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteInstituicaoIdsQueryCommand {\n\n	private final DAO dao;\n\n	public List<Long> execute(Long estudanteId) {\n		return this.dao.queryFactory()\n				.from(matricula)\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.where(matricula.estudanteId.eq(estudanteId))\n				.select(curso.instituicaoId)\n				.groupBy(curso.instituicaoId)\n				.fetch();\n	}\n\n}\n"
not_service, meta.dataAtualizacao);\n\n		var mensagensFilterByInstituicaoOrAllUsers = this.dao.queryFactory()\n				.from(mensagem)\n				.leftJoin(mensagemInstituicao).on(mensagemInstituicao.mensagemId.eq(mensagem.id))\n				.where(mensagemInstituicao.instituicaoId.in(instituicaoIds)\n						.or(mensagemInstituicao.instituicaoId.isNull()))\n				.where(mensagem.dataValidade.goe(LocalDate.now()))\n				.where(mensagem.situacaoMensagem.eq(SituacaoMensagemDbEnum.ATIVA.getId()))\n				.select(mensagem.id);\n\n		return this.dao.queryFactory()\n				.from(mensagem)\n				.where(mensagem.id.in(mensagensFilterByInstituicaoOrAllUsers))\n				.select(select)\n				.fetch();\n	}\n\n}\n"
not_service, estudanteId);\n		return this.service.loadMensagens(estudanteId != null ? estudanteId : estudanteLogadoId);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class CursoSolicitacaoDadosDto {\n\n	private Long id;\n	private String nome;\n	private Integer cargaHoraria;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class InstituicaoDto {\n\n	private Long id;\n	private String nome;\n	private String sigla;\n	private String siglaUfReitoria;\n	private String municipioReitoria;\n	private String cnpj;\n	private String email;\n	private String telefone;\n	private String inep;\n	private String dependenciaAdministrativa;\n	private String cep;\n\n}"
not_service,\n						instituicao.cep);\n\n		if (sistemaOrigemId != null) {\n			query.where(instituicao.sistemaOrigemInstituicao.eq(sistemaOrigemId));\n		}\n\n		return query.select(select).fetch();\n	}\n}\n"
not_service, meta.cargaHoraria);\n\n		var query = this.dao.queryFactory()\n				.from(localOferta)\n				.join(curso).on(curso.id.eq(localOferta.cursoId))\n				.where(curso.instituicaoId.eq(instituicaoId)\n						.and(localOferta.municipioId.eq(municipioId)));\n\n		if (turnoId != null) {\n			query.join(cursoTurno).on(curso.id.eq(cursoTurno.cursoId))\n					.where(cursoTurno.turnoId.eq(turnoId));\n		}\n\n		return query.select(select)\n				.fetch();\n	}\n\n}\n"
not_service, turnoId);\n	}\n\n	@GetMapping(value = ""/sistemas-origem"")\n	@Operation(summary = ""Retorna os possíveis sistemas de origem e escolaridades equivalentes"")\n	public List<SistemaOrigemDto> indexSistemasOrigem() {\n		return SistemaOrigemDbEnum.list();\n	}\n\n	@GetMapping(value = ""/turnos"")\n	@Operation(summary = ""Retorna os possíveis turnos dos cursos"")\n	public List<EnumDto> indexCursoTurnos() {\n		return TurnoDbEnum.list();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class V1InstituicaoDto {\n\n	private Long id;\n	private String nome;\n	private String sigla;\n	private String siglaUfReitoria;\n	private String municipioReitoria;\n	private String cnpj;\n	private String email;\n	private String telefone;\n	private String inep;\n	private String dependenciaAdministrativa;\n	private String cep;\n\n}"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.instituicao.v1.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class V1CursoSolicitacaoDadosDto {\n\n	private Long id;\n	private String nome;\n\n}"
not_service,\n						instituicao.cep)\n				.select(select)\n				.fetch();\n	}\n\n}\n"
not_service, meta.nome);\n\n		return this.dao.queryFactory().from(localOferta)\n				.join(curso).on(curso.id.eq(localOferta.cursoId))\n				.where(curso.instituicaoId.eq(instituicaoId).and(localOferta.municipioId.eq(municipioId)))\n				.select(select)\n				.fetch();\n	}\n\n}\n"
not_service, municipioId);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Metafy\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class MotivoSituacaoPeMeiaDto {\n\n	private Integer id;\n	private String motivo;\n	private String orientacao;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class EstudanteDto {\n\n	private Long id;\n	private String cpf;\n	private String nome;\n	private String nomeSocial;\n	private String nomeMae;\n	private LocalDate dataNascimento;\n	private String email;\n	private String telefone;\n	private String paisNascimento;\n	private Boolean isResponsavel = false;\n	private Boolean aceitouTermoUso;\n	private Instant dataRegistroTermo;\n	private Instant dataAtualizacaoSituacaoPeMeia;\n	private List<MotivoSituacaoPeMeiaDto> motivosSituacaoPeMeia;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class EstudanteAuthenticatedDto {\n\n	private Long id;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class EstudanteInstituicaoDto {\n\n	private Long id;\n	private String nome;\n	private String sigla;\n	private String siglaUfReitoria;\n	private String municipioReitoria;\n	private String cnpj;\n	private String email;\n	private String telefone;\n	private String inep;\n	private String dependenciaAdministrativa;\n	private String cep;\n\n}"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class TermoUsoDto {\n\n	private Boolean aceitouTermoUso;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class DisciplinaDto {\n\n	private Long id;\n	private String identificadorDisciplina;\n	private String nome;\n	private Integer cargaHoraria;\n	private Integer periodo;\n	private Boolean matrizCurso;\n	private String resultado;\n	private String nota;\n	private Boolean componenteObrigatorio;\n\n}"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CursoDto {\n\n	private Long id;\n	private String nome;\n	private String grauAcademico;\n	private String nivelEnsino;\n	private String etapaEnsino;\n	private String email;\n	private String telefone;\n	private String eixoTecnologico;\n	private String areaCurso;\n	private String nomePrograma;\n	private String nomeAreaConhecimento;\n	private String modalidadePosGraduacao;\n\n}"
not_service, format = ""yearmonth"")\n	private YearMonth anoMesConclusao;\n	private Integer posicionamentoCurso;\n	private String turno;\n	private Integer cargaHorariaIntegralizada;\n	private Integer cargaHorariaTotalCurso;\n	private Double indiceAproveitamentoEstudante;\n	private Double indiceAproveitamentoMedio;\n	private Instant dataAtualizacao;\n	private EstudanteInstituicaoDto instituicao;\n	private CursoDto curso;\n	private String modalidadeEnsino;\n	private LocalDate dataQualificacao;\n	private LocalDate dataDefesa;\n	private String urlDiplomaXml;\n	private String urlDiplomaPdf;\n\n	@JsonIgnore\n	private Long instituicaoId;\n	@JsonIgnore\n	private Long cursoId;\n\n}"
not_service, required);\n		return validator;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.Estudante;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteByCpfQueryCommand {\n\n	private final DAO dao;\n\n	public Estudante execute(String cpf) {\n		return this.dao.queryFactory()\n				.selectFrom(estudante)\n				.where(estudante.cpf.eq(cpf))\n				.fetchOne();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.EstudanteAuthenticatedDto;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteLoginDtoQueryCommand {\n\n	private final DAO dao;\n\n	public EstudanteAuthenticatedDto execute(String cpf) {\n		var estudanteId = this.dao.queryFactory().from(estudante)\n				.where(estudante.cpf.eq(cpf))\n				.select(estudante.id)\n				.fetchOne();\n\n		if (estudanteId != null) {\n			return new EstudanteAuthenticatedDto(estudanteId);\n		}\n\n		return null;\n	}\n\n}"
not_service, meta.orientacao);\n\n		return this.dao.queryFactory()\n				.select(select)\n				.from(estudanteMotivoSituacao)\n				.join(motivoSituacaoPeMeia).on(motivoSituacaoPeMeia.id.eq(estudanteMotivoSituacao.motivoSituacaoId))\n				.where(estudanteMotivoSituacao.estudanteId.eq(estudanteId))\n				.fetch();\n	}\n\n}\n"
not_service, meta.dataAtualizacaoSituacaoPeMeia);\n\n		return this.dao.queryFactory()\n				.from(estudanteResp)\n				.join(estudanteResponsavel).on(estudanteResponsavel.cpfResponsavel.eq(estudanteResp.cpf))\n				.leftJoin(estudante).on(estudante.cpf.eq(estudanteResponsavel.cpfEstudante))\n				.leftJoin(pais).on(pais.id.eq(estudante.paisId))\n				.where(estudanteResp.id.eq(estudanteId))\n				.select(select)\n				.fetch();\n	}\n\n	private static final ComparableExpression<String> coalesceCpf = new Coalesce<>(String.class)\n			.add(estudante.cpf)\n			.add(estudanteResponsavel.cpfEstudante)\n			.getValue();\n\n}\n"
not_service, meta.componenteObrigatorio);\n\n		return this.dao.queryFactory()\n				.from(disciplina)\n				.join(disciplinaResultado).on(disciplinaResultado.id.eq(disciplina.resultadoId))\n				.join(matricula).on(matricula.id.eq(disciplina.matriculaId))\n				.where(disciplina.matriculaId.eq(matriculaId))\n				.where(matricula.situacaoMatriculaId.eq(CONSISTENTE.getId()))\n				.select(select)\n				.fetch();\n	}\n\n}\n"
not_service,\n						tuple -> tuple.get(select))\n				);\n	}\n\n}\n"
not_service, estudanteId);\n		estudante.setAceitouTermoUso(termoUso.getAceitouTermoUso());\n		estudante.setDataRegistroTermo(Instant.now());\n		this.dao.persist(estudante);\n		return termoUso;\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteIdByMatriculaIdQueryCommand {\n\n	private final DAO dao;\n\n	public Long execute(Long matriculaId) {\n		return this.dao.queryFactory().from(matricula)\n				.where(matricula.id.eq(matriculaId))\n				.select(matricula.estudanteId)\n				.fetchOne();\n	}\n\n}"
not_service, tuple -> tuple.get(select)));\n	}\n\n}\n"
not_service, meta.dataAtualizacaoSituacaoPeMeia);\n\n		return this.dao.queryFactory()\n				.from(estudante)\n				.leftJoin(pais).on(pais.id.eq(estudante.paisId))\n				.where(estudante.id.eq(estudanteId))\n				.select(select)\n				.fetchOne();\n	}\n\n	private ComparableExpression<Boolean> isResponsavelSubQuery() {\n		var query = this.dao.queryFactory()\n				.selectFrom(estudanteResponsavel)\n				.where(estudanteResponsavel.cpfResponsavel.eq(estudante.cpf))\n				.exists();\n\n		return new CaseBuilder()\n				.when(query)\n				.then(Boolean.TRUE)\n				.otherwise(Boolean.FALSE);\n	}\n\n}\n"
not_service,\n										toList())\n						)\n				);\n	}\n\n}\n"
not_service, BcpfEstudanteDto estudanteBcpf) {\n		var estudante = this.estudanteByCpfQueryCommand.execute(cpf);\n\n		if (isNull(estudante)) {\n			estudante = new Estudante();\n			estudante.setCpf(cpf);\n		}\n\n		if (nonNull(estudanteBcpf)) {\n			estudante.setNomeCivil(capitalizeNames(estudanteBcpf.getNome()));\n			estudante.setNomeSocial(capitalizeNames(estudanteBcpf.getNomeSocial()));\n			estudante.setNomeMae(capitalizeNames(estudanteBcpf.getNomeMae()));\n			estudante.setDataNascimento(estudanteBcpf.getDataNascimento());\n		}\n\n		return estudante;\n	}\n\n}\n"
not_service, tuple -> tuple.get(select)));\n	}\n\n}\n"
not_service, Integer motivoSituacaoId) {\n		var estudanteMotivoSituacao = new EstudanteMotivoSituacao();\n		estudanteMotivoSituacao.setEstudanteId(estudanteId);\n		estudanteMotivoSituacao.setMotivoSituacaoId(motivoSituacaoId);\n		this.dao.persist(estudanteMotivoSituacao);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteCpfByIdQueryCommand {\n\n	private final DAO dao;\n\n	public String execute(Long estudanteId) {\n		return this.dao.queryFactory().from(estudante)\n				.where(estudante.id.eq(estudanteId))\n				.select(estudante.cpf)\n				.fetchOne();\n	}\n\n}\n"
not_service, matriculaId);\n		return this.matriculaService.loadDisciplinasByMatricula(matriculaId);\n	}\n\n}\n"
not_service, AuthContext.from(principal).getPrincipal().getId());\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class UfDto {\n\n	private Long id;\n	private String nome;\n	private String sigla;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class MunicipioDto {\n\n	private Long id;\n	private String nome;\n	private Long ufId;\n\n}\n"
not_service, meta.sigla);\n\n		return this.dao.queryFactory().from(uF)\n				.select(select)\n				.fetch();\n	}\n\n}\n"
not_service, Long municipioId) {\n		return this.dao.queryFactory()\n				.from(localOferta)\n				.where(localOferta.cursoId.eq(cursoId).and(localOferta.municipioId.eq(municipioId)))\n				.fetchOne() != null;\n	}\n}\n"
not_service, meta.ufId);\n\n		var query = this.dao.queryFactory()\n				.from(municipio)\n				.select(select);\n\n		if (ufId != null) {\n			query.where(municipio.ufId.eq(ufId));\n		}\n\n		return query.fetch();\n	}\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.UfDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.service.EnderecoService;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequiredArgsConstructor\n@Tag(name = ""enderecos"")\npublic class EnderecoController {\n\n	private final EnderecoService enderecoService;\n\n	@GetMapping(""/api/v2/unidades-federativas"")\n	@Operation(summary = ""Retorna as unidades federativas"")\n	public List<UfDto> indexUf() {\n		return this.enderecoService.loadUfList();\n	}\n\n	@GetMapping(""/api/v2/municipios"")\n	@Operation(summary = ""Retorna os municípios"")\n	public List<MunicipioDto> indexMunicipios(@RequestParam(required = false) Long ufId) {\n		return this.enderecoService.loadMunicipioList(ufId);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class BannerDto {\n	private Long id;\n	private String titulo;\n	private byte[] banner;\n	private String contentType;\n	private String url;\n}\n"
not_service, meta.contentType);\n\n		return this.dao.queryFactory()\n				.select(select)\n				.from(banner)\n				.where(banner.situacaoBanner.eq(ATIVO.getId()))\n				.where(banner.dataValidade.goe(LocalDate.now()))\n				.orderBy(banner.dataAtualizacao.desc())\n				.limit(MAX_SIZE_BANNERS)\n				.fetch();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.controller;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.service.BannerService;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@Tag(name = ""banners"")\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(""/api/v1/banners"")\npublic class BannerController {\n\n	private final BannerService service;\n\n	@GetMapping\n	@Operation(summary = ""Retorna a lista de banners enviados pelo MEC"")\n	public List<BannerDto> indexBanner() {\n		return this.service.loadBannerList();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class BcpfDto {\n\n	private String cpf;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.bcpf.model;\n\nimport java.time.LocalDate;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@Getter\n@Setter\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class BcpfEstudanteDto {\n\n	private String nome;\n	private String nomeSocial;\n	private String nomeMae;\n	private Long codigoPaisNacionalidade;\n\n	@JsonFormat(pattern = ""yyyyMMdd"")\n	private LocalDate dataNascimento;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model;\n\nimport lombok.Data;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\npublic class ComprovanteVinculoDto {\n\n	private Long matriculaId;\n	private String cpfEstudante;\n	private String nomeEstudante;\n	private String nomeSocial;\n	private String nomeCurso;\n	private String nomeInstituicao;\n	private String hash;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model;\n\nimport lombok.Data;\nimport lombok.RequiredArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@RequiredArgsConstructor\npublic class VinculoMatriculaDto {\n\n	private String nome;\n	private String cpf;\n	private String nomeInstituicao;\n	private String nomeCurso;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model;\n\nimport lombok.Data;\n\n@Data\npublic class ComprovanteVinculoInfoDto {\n\n	private String nomeEstudante;\n	private String cpfEstudante;\n	private String nomeInstituicao;\n	private String nomeCurso;\n	private String qrCode;\n	private String codigoValidacao;\n	private String urlValidador;\n\n}"
not_service, matriculaId);\n		matricula.setHashValidador(hash);\n		this.dao.persist(matricula);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QMatricula.matricula;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class HashValidadorExistsQueryCommand {\n\n	private final DAO dao;\n\n	public boolean execute(String hash) {\n		return this.dao.queryFactory()\n				.selectFrom(matricula)\n				.where(matricula.hashValidador.eq(hash))\n				.fetchOne() != null;\n	}\n\n}\n"
not_service, 1)\n				.with(lastDayOfMonth())\n				.atTime(LocalTime.MAX)\n				.atZone(ZoneId.systemDefault())\n				.toInstant();\n\n		return this.dao.queryFactory()\n				.from(matricula)\n				.join(estudante).on(estudante.id.eq(matricula.estudanteId))\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.join(instituicao).on(instituicao.id.eq(curso.instituicaoId))\n				.where(matricula.dataAtualizacao.year().eq(yearNow)\n						.or(matricula.dataAtualizacao.year().eq(yearNow - 1)\n								.and(Expressions.asBoolean(Instant.now().isBefore(lastDayMarch)).isTrue())))\n				.where(matricula.situacaoVinculoId.eq(SituacaoVinculoDbEnum.CURSANDO.getId()))\n				.where(matricula.id.eq(matriculaId))\n				.select(select)\n				.fetchOne();\n	}\n\n}\n"
not_service, 1)\n				.with(lastDayOfMonth())\n				.atTime(LocalTime.MAX)\n				.atZone(ZoneId.systemDefault())\n				.toInstant();\n\n		return this.dao.queryFactory()\n				.from(matricula)\n				.join(estudante).on(estudante.id.eq(matricula.estudanteId))\n				.join(curso).on(curso.id.eq(matricula.cursoId))\n				.join(instituicao).on(instituicao.id.eq(curso.instituicaoId))\n				.where(matricula.dataAtualizacao.year().eq(yearNow)\n						.or(matricula.dataAtualizacao.year().eq(yearNow - 1)\n								.and(Expressions.asBoolean(Instant.now().isBefore(lastDayMarch)).isTrue())))\n				.where(matricula.situacaoVinculoId.eq(SituacaoVinculoDbEnum.CURSANDO.getId()))\n				.where(matricula.hashValidador.eq(hash))\n				.select(select)\n				.fetchOne();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static java.util.Objects.nonNull;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoInfoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.QRCodeGenerator;\n\n@Component\npublic class ComprovanteVinculoInfoDtoFillCommand {\n\n	@Value(""${bridge.comprovanteVinculo.validador.url:localhost}"")\n	private String url;\n\n	public ComprovanteVinculoInfoDto execute(ComprovanteVinculoDto vinculoDto) {\n		ComprovanteVinculoInfoDto infoDto = new ComprovanteVinculoInfoDto();\n		infoDto.setCpfEstudante(vinculoDto.getCpfEstudante());\n		infoDto.setNomeInstituicao(vinculoDto.getNomeInstituicao());\n		infoDto.setNomeCurso(vinculoDto.getNomeCurso());\n		infoDto.setQrCode(QRCodeGenerator.buildQrCodeBase64(this.url + ""?codigoValidacao="" + vinculoDto.getHash()));\n		infoDto.setCodigoValidacao(vinculoDto.getHash());\n		infoDto.setUrlValidador(this.url);\n\n		var nomeSocial = vinculoDto.getNomeSocial();\n		infoDto.setNomeEstudante(nonNull(nomeSocial) ? nomeSocial : vinculoDto.getNomeEstudante());\n		return infoDto;\n	}\n\n}"
not_service, matriculaId);\n		return this.comprovanteVinculoService.generateComprovanteVinculoInfo(matriculaId);\n	}\n\n}\n"
not_service, @RequestParam String token) {\n		if (!this.recaptchaGoogleValidator.isValid(token)) {\n			return ResponseEntity.badRequest().build();\n		}\n\n		return ResponseEntity.ok(this.service.loadVinculoByHashValidador(hash));\n	}\n\n}\n"
not_service, servico);\n	}\n\n}\n"
not_service, error.getMessage()))\n				.onErrorResume(error -> Mono.empty())\n				.block();\n		return response != null && response.isSuccess();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@NoArgsConstructor\n@Metafy\npublic class SolicitacaoDadosEstudanteFormDto {\n\n	private Long municipioId;\n	private Long cursoId;\n	private Integer turnoId;\n	private Integer situacaoVinculoId;\n	private Integer dataAnoInicio;\n	private Integer dataAnoFim;\n\n	@Deprecated\n	private Long instituicaoId;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model;\n\nimport java.time.LocalDate;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@NoArgsConstructor\npublic class SolicitacaoDadosEstudanteDto {\n\n	private Long id;\n	private Long instituicaoId;\n	private String nomeInstituicao;\n	private String siglaInstituicao;\n	private Integer sistemaOrigemInstituicaoId;\n	private Long cursoId;\n	private String nomeCurso;\n	private Integer turnoId;\n	private Integer cargaHorariaCurso;\n	private Long municipioId;\n	private String nomeMunicipio;\n	private Long ufId;\n	private String nomeUf;\n	private LocalDate dataAnoInicio;\n	private LocalDate dataAnoFim;\n	private Integer situacaoVinculoId;\n	private LocalDate dataSolicitacao;\n	private String nomeAutorSolicitacao;\n	private LocalDate dataAtualizacao;\n	private String nomeAutorAtualizacao;\n\n}\n"
not_service, afterOrEqualFieldValidationMessage(meta.dataAnoInicio));\n			}\n		}\n\n		return validator;\n	}\n\n}\n"
not_service, meta.nomeAutorAtualizacao);\n\n		return this.dao.queryFactory().from(solicitacaoDadosEstudante)\n				.join(estudante).on(estudante.id.eq(solicitacaoDadosEstudante.autorSolicitacaoId))\n				.join(autorAtualizacao).on(autorAtualizacao.id.eq(solicitacaoDadosEstudante.autorAtualizacaoId))\n				.join(instituicao).on(instituicao.id.eq(solicitacaoDadosEstudante.instituicaoId))\n				.leftJoin(curso).on(curso.id.eq(solicitacaoDadosEstudante.cursoId))\n				.leftJoin(municipio).on(municipio.id.eq(solicitacaoDadosEstudante.municipioId))\n				.leftJoin(uF).on(uF.id.eq(municipio.ufId))\n				.where(solicitacaoDadosEstudante.estudanteId.eq(estudanteId))\n				.where(solicitacaoDadosEstudante.solicitacaoAtendida.isFalse())\n				.select(select)\n				.fetch();\n	}\n\n	public static ComparableExpression<String> coalesceNomeEstudante(QEstudante estudante) {\n		return new Coalesce<>(String.class)\n				.add(estudante.nomeSocial)\n				.add(estudante.nomeCivil)\n				.getValue();\n	}\n\n}\n"
not_service, solicitacaoDadosId));\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudante.estudante;\nimport static br.ufsc.bridge.jornadaestudante.model.QEstudanteResponsavel.estudanteResponsavel;\n\nimport java.util.List;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.model.QEstudante;\n\n@Component\n@RequiredArgsConstructor\npublic class DependenteIdListQueryCommand {\n\n	private final DAO dao;\n\n	public List<Long> execute(Long estudanteId) {\n		var estudanteDependentes = new QEstudante(""estudanteDependentes"");\n\n		return this.dao.queryFactory()\n				.from(estudanteDependentes)\n				.join(estudanteResponsavel).on(estudanteResponsavel.cpfResponsavel.eq(estudanteDependentes.cpf))\n				.join(estudante).on(estudante.cpf.eq(estudanteResponsavel.cpfEstudante))\n				.where(estudanteDependentes.id.eq(estudanteId))\n				.select(estudante.id)\n				.fetch();\n	}\n\n}\n"
not_service, Integer turnoId) {\n		return this.dao.queryFactory()\n				.selectFrom(cursoTurno)\n				.where(cursoTurno.cursoId.eq(cursoId).and(cursoTurno.turnoId.eq(turnoId)))\n				.fetchOne() != null;\n	}\n\n}\n"
not_service, MATRICULA_TRANCADA.getId()).contains(solicitacaoDadosEstudanteFormDto.getSituacaoVinculoId())\n				&& nonNull(solicitacaoDadosEstudanteFormDto.getDataAnoFim())) {\n			solicitacaoDadosEstudante.setDataAnoFim(parseYearLastMonthAndDay(solicitacaoDadosEstudanteFormDto.getDataAnoFim().toString()));\n		} else {\n			solicitacaoDadosEstudante.setDataAnoFim(null);\n		}\n		solicitacaoDadosEstudante.setAutorAtualizacaoId(estudanteLogadoId);\n		solicitacaoDadosEstudante.setDataAtualizacao(dataAtual);\n		solicitacaoDadosEstudante.setSolicitacaoAtendida(false);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QSolicitacaoDadosEstudante.solicitacaoDadosEstudante;\n\nimport lombok.RequiredArgsConstructor;\n\nimport org.springframework.stereotype.Component;\n\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@Component\n@RequiredArgsConstructor\npublic class EstudanteIdBySolicitacaoDadosIdQueryCommand {\n\n	private final DAO dao;\n\n	public Long execute(Long solicitacaoDadosId) {\n		return this.dao.queryFactory().from(solicitacaoDadosEstudante)\n				.where(solicitacaoDadosEstudante.id.eq(solicitacaoDadosId))\n				.where(solicitacaoDadosEstudante.solicitacaoAtendida.isFalse())\n				.select(solicitacaoDadosEstudante.estudanteId)\n				.fetchOne();\n	}\n\n}"
not_service, solicitacaoDadosId);\n		this.solicitacaoDadosService.deleteSolicitacaoDadosEstudante(solicitacaoDadosId);\n	}\n\n}\n\n"
not_service, String refreshToken) {\n	}\n\n}\n"
not_service, authentication);\n	}\n\n}\n"
not_service, cause);\n	}\n\n}\n"
not_service, cause);\n	}\n\n}"
not_service, cause);\n	}\n\n}"
not_service, properties.getPassword()))\n				.build();\n	}\n\n}\n"
not_service, t);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.app.config.security.jwt;\n\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\n\nimport lombok.Data;\n\n@Data\npublic class JwtConfigurationDto {\n\n	private RSAPrivateKey jwtPrivateKey;\n	private RSAPublicKey jwtPublicKey;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.info.service;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\nclass InfoServiceTest {\n\n	private InfoService infoService;\n	private final BridgeFaker faker = new BridgeFaker();\n\n	@BeforeEach\n	void setup() {\n		this.infoService = spy(new InfoService());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar a mesma URL ao carregar a URL do validador de diploma digital"")\n	void loadUrlValidadorDiplomaExpectSameUrl() {\n		var url = this.faker.randomHTTPUrl();\n\n		when(this.infoService.getUrlValidadorDiploma()).thenReturn(url);\n\n		var result = this.infoService.loadUrlValidadorDiploma();\n\n		assertThat(result).isEqualTo(url);\n	}\n\n}\n"
not_service, InfoDto.class);\n\n		assertThat(result).isEqualTo(dto);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o endpoint de GET na rota /api/info/validador-documento retorna corretamente a URL do validador de diploma"")\n	void showValidadorDiplomaInfoExpectSuccessAndSameUrl() {\n		var result = given()\n				.contentType(JSON)\n				.get(BASE_URL + ""/validador-documento"")\n				.then()\n				.statusCode(200)\n				.extract()\n				.response()\n				.asString();\n\n		assertThat(result).isEqualTo(this.urlValidadorDiploma);\n	}\n\n}\n"
not_service, times(1)).loadUrlValidadorDiploma();\n	}\n\n}\n"
not_service, token);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.firebase.latest.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport br.ufsc.bridge.metafy.Metafy;\n\n@Data\n@Metafy\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FirebaseTokenITDto {\n\n	private String token;\n\n}\n"
not_service, 255));\n\n		Validator<FirebaseTokenDto> validator = this.firebaseTokenValidator.validate(firebaseTokenDto);\n\n		assertThat(validator.isValid()).isTrue();\n	}\n\n	@Test\n	void checkTokenNotNull() {\n		FirebaseTokenDto firebaseTokenDto = new FirebaseTokenDto();\n		firebaseTokenDto.setToken(null);\n\n		Validator<FirebaseTokenDto> validator = this.firebaseTokenValidator.validate(firebaseTokenDto);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).isEqualTo(""{token=%s}"".formatted(PREENCHIMENTO_OBRIGATORIO));\n	}\n\n	@Test\n	void checkTokenMaxLength() {\n		FirebaseTokenDto firebaseTokenDto = new FirebaseTokenDto();\n		firebaseTokenDto.setToken(this.faker.lorem().characters(256));\n\n		Validator<FirebaseTokenDto> validator = this.firebaseTokenValidator.validate(firebaseTokenDto);\n\n		assertThat(validator.isValid()).isFalse();\n		assertThat(validator.getErrors().toString()).isEqualTo(""{token=%s}"".formatted(maxLengthValidationMessage(255)));\n	}\n\n}"
not_service, 255));\n		return spec;\n	}\n\n	public static class Spec {\n		public final SpecValue<String> token = new SpecValue<>();\n	}\n\n}\n"
not_service, sendo que este não possui responsável e/ou dependente"")\n	void estudanteWithInstituicaoDbExpectSameInstituicao() {\n		var matriculaEstudanteWithoutDependenteResponsavel = this.createMatriculaRecord();\n		var matriculaEstudanteResponsavel = this.createMatriculaRecord();\n		var matriculaEstudanteDependente = this.createMatriculaRecord();\n		this.estudanteResponsavelFactory.create(s -> {\n			s.cpfEstudante.set(matriculaEstudanteDependente.estudante.getCpf());\n			s.cpfResponsavel.set(matriculaEstudanteResponsavel.estudante.getCpf());\n		});\n\n		var instituicaoIdList = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(matriculaEstudanteWithoutDependenteResponsavel.estudante.getId());\n\n		assertThat(instituicaoIdList)\n				.isNotEmpty()\n				.containsOnly(matriculaEstudanteWithoutDependenteResponsavel.curso.getInstituicaoId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio se não existir estudante no banco de dados"")\n	void dbEmptyExpectEmptyList() {\n		var instituicaoIdList = this.estudanteAndDependentesInstituicaoIdListQueryCommand.execute(new Random().nextLong());\n\n		assertThat(instituicaoIdList).isEmpty();\n	}\n\n}\n"
not_service, topicName);\n	}\n\n}\n"
not_service, estudanteId));\n	}\n\n}\n"
not_service, () -> this.firebaseTokenUpdateCommand.execute(firebaseTokenId));\n	}\n\n}\n"
not_service, TOPICO_TODOS_DISPOSITIVOS);\n	}\n\n}\n"
not_service, tokenFirebaseEstudante2.getId());\n\n		assertThat(result1).isNull();\n		assertThat(result2).isNotNull();\n	}\n\n	@Test\n	@DisplayName(""Deve deletar com sucesso os tópicos de um token do Firebase de um estudante quando houver mais de um token cadastrado"")\n	void deleteFirebaseTopicsWhenThereIsMoreThanOneTokenRegisteredExpectSuccess() {\n		var cursoAndMatriculaRecordEstudante1 = this.createCursoAndMatricula();\n		var firebaseTokenEstudante1 = this.firebaseTokenFactory.create(f ->\n				f.estudanteId.set(cursoAndMatriculaRecordEstudante1.estudante.getId())\n		);\n		this.firebaseTopicFactory.create(t -> {\n			t.firebaseTokenId.set(firebaseTokenEstudante1.getId());\n			t.topic.set(TOPICO_TODOS_DISPOSITIVOS);\n		});\n		var cursoAndMatriculaRecordEstudante2 = this.createCursoAndMatricula();\n		var firebaseTokenEstudante2 = this.firebaseTokenFactory.create(f ->\n				f.estudanteId.set(cursoAndMatriculaRecordEstudante2.estudante.getId())\n		);\n		this.firebaseTopicFactory.create(t -> {\n			t.firebaseTokenId.set(firebaseTokenEstudante2.getId());\n			t.topic.set(TOPICO_TODOS_DISPOSITIVOS);\n		});\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(cursoAndMatriculaRecordEstudante1.estudante)))\n				.delete(BASE_URL + firebaseTokenEstudante1.getToken())\n				.then()\n				.statusCode(200);\n\n		var result1 = this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseToken)\n				.join(firebaseTopic).on(firebaseTopic.firebaseTokenId.eq(firebaseToken.id))\n				.where(firebaseToken.token.eq(firebaseTokenEstudante1.getToken()))\n				.fetch();\n\n		var result2 = this.dao.queryFactory()\n				.select(firebaseTopic.topic)\n				.from(firebaseToken)\n				.join(firebaseTopic).on(firebaseTopic.firebaseTokenId.eq(firebaseToken.id))\n				.where(firebaseToken.token.eq(firebaseTokenEstudante2.getToken()))\n				.fetch();\n\n		assertThat(result1).isEmpty();\n		assertThat(result2).isNotEmpty();\n	}\n\n}\n"
not_service, bearerAuth.getValue()))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.firebaseTokenService);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service;\n\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.MockitoAnnotations.openMocks;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.command.ParcelasEstudanteQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\n\npublic class PeMeiaServiceTest {\n\n	private PeMeiaService peMeiaService;\n	@Mock private ParcelasEstudanteQueryCommand parcelasEstudanteQueryCommand;\n\n	@BeforeEach\n	void setup() {\n		openMocks(this);\n		this.peMeiaService = new PeMeiaService(this.parcelasEstudanteQueryCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve testar o método loadDadosEstudante e retornar a lista de parcelas"")\n	void loadDadosEstudanteExpectSuccess() {\n		var estudanteId = new Random().nextLong();\n		List<PeMeiaParcelaDto> peMeiaParcelaDtoList = Collections.emptyList();\n\n		when(this.parcelasEstudanteQueryCommand.execute(estudanteId)).thenReturn(peMeiaParcelaDtoList);\n\n		var result = this.peMeiaService.loadDadosEstudante(estudanteId);\n\n		Assertions.assertThat(result).isEqualTo(peMeiaParcelaDtoList);\n\n		verify(this.parcelasEstudanteQueryCommand).execute(estudanteId);\n	}\n\n}\n"
not_service, names = { ""PARCELA_DUPLICADA"" })\n	//	@DisplayName(""Deve retornar parcelas com um motivo de rejeição para o estudante"")\n	//	void loadParcelasWithRejectedMotivesExpectList(MotivoRejeicaoDbEnum motivoRejeicao) {\n	//		var estudante = this.estudanteFactory.createRandom();\n	//		this.peMeiaParcelaFactory.create(spec -> {\n	//			spec.cpfEstudante.set(estudante.getCpf());\n	//			spec.motivoRejeicaoId.set(motivoRejeicao.getId());\n	//		});\n	//\n	//		var parcelasDto = this.parcelasEstudanteQueryCommand.execute(estudante.getId());\n	//\n	//		Assertions.assertThat(parcelasDto).isNotNull();\n	//		Assertions.assertThat(parcelasDto).hasSize(1);\n	//		Assertions.assertThat(parcelasDto.get(0).getMotivoRejeicaoId()).isEqualTo(motivoRejeicao.getId());\n	//	}\n\n}\n"
not_service, PeMeiaParcelaDto.class);\n\n		assertThat(result).isEmpty();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.controller;\n\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.model.PeMeiaParcelaDto;\nimport br.ufsc.bridge.jornadaestudante.backend.module.peDeMeia.latest.service.PeMeiaService;\nimport br.ufsc.bridge.jornadaestudante.backend.module.security.PrincipalFactory;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\n\n@SpringJUnit5Test\n@AutoConfigureMockMvc\npublic class PeMeiaControllerTest {\n\n	private static final String BASE_URL = ""/api/v1/pedemeia"";\n	private PrincipalFactory principalFactory = new PrincipalFactory();\n\n	@MockBean\n	@Autowired\n	private PeMeiaService peMeiaService;\n\n	@Autowired\n	private MockMvc mockMvc;\n\n	@Test\n	@DisplayName(""Unauthorized ao tentar obter dados do Pe de Meia sem token de autenticação"")\n	void loadDadosPeMeiaWithoutValidJwtExpectUnauthorized() throws Exception {\n		this.mockMvc.perform(get(BASE_URL))\n				.andExpect(status().isUnauthorized());\n	}\n\n	@Test\n	@DisplayName(""Sucesso ao obter dados do Pe de Meia"")\n	void loadDadosPeMeiaExpectSuccess() throws Exception {\n		var estudanteId = 1L;\n		var jwt = this.principalFactory.withEstudante(e -> e.id.set(estudanteId));\n\n		List<PeMeiaParcelaDto> peMeiaParcelaDtoList = Collections.emptyList();\n\n		when(this.peMeiaService.loadDadosEstudante(estudanteId)).thenReturn(peMeiaParcelaDtoList);\n\n		this.mockMvc.perform(get(BASE_URL)\n						.with(jwt().jwt(jwt)))\n				.andExpect(status().is2xxSuccessful());\n\n		verify(this.peMeiaService).loadDadosEstudante(estudanteId);\n	}\n\n}\n"
not_service, this.mensagemDtoListAllEstudantesQueryCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método loadMensagens é bem sucedido"")\n	void loadMensagensExpectSuccess() {\n		var estudanteId = new Random().nextLong();\n		var instituicaoList = singletonList(new Random().nextLong());\n		var mensagemDto = new MensagemDto();\n\n		when(this.estudanteInstituicaoIdsQueryCommand.execute(estudanteId))\n				.thenReturn(instituicaoList);\n\n		when(this.mensagemDtoListAllEstudantesQueryCommand.execute(instituicaoList))\n				.thenReturn(List.of(mensagemDto));\n\n		var result = this.mensagemService.loadMensagens(estudanteId);\n\n		assertThat(result.iterator().next()).isEqualTo(mensagemDto);\n\n		verify(this.estudanteInstituicaoIdsQueryCommand).execute(estudanteId);\n		verify(this.mensagemDtoListAllEstudantesQueryCommand).execute(instituicaoList);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.mensagem.latest.model;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\n\nimport lombok.Data;\n\n@Data\npublic class MensagemITDto {\n\n	private Long id;\n	private String titulo;\n	private String descricao;\n	private LocalDate dataValidade;\n	private Instant dataCriacao;\n	private Instant dataAtualizacao;\n\n}\n"
not_service,\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar vazio quando a situacaoMensagem não for ativa"")\n	void executeWhenSituacaoMensagemNotAtivaExpectEmpty(SituacaoMensagemRefEnum situacaoMensagemRefEnum) {\n		this.mensagemFactory.create(m -> m.situacaoMensagem.set(situacaoMensagemRefEnum.getId()));\n\n		var result = this.mensagemDtoListAllEstudantesQueryCommand.execute(emptyList());\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar vazio quando a dataValidade estiver expirada"")\n	void executeWhenExpiredDataValidadeExpectEmpty() {\n		this.mensagemFactory.create(m -> {\n			m.situacaoMensagem.set(ATIVA.getId());\n			m.dataValidade.set(LocalDate.now().minusDays(1));\n		});\n\n		var result = this.mensagemDtoListAllEstudantesQueryCommand.execute(emptyList());\n\n		assertThat(result).isEmpty();\n	}\n\n}\n"
not_service, segundaInstituicao.getId());\n	}\n\n}\n"
not_service, bearerAuth.getValue()))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.mensagemService);\n	}\n\n}\n"
not_service, MensagemITDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(result.getTitulo()).isEqualTo(mensagem.getTitulo());\n		assertThat(result.getDescricao()).isEqualTo(mensagem.getDescricao());\n		assertThat(result.getDataValidade()).isEqualTo(mensagem.getDataValidade());\n		assertThat(result.getDataCriacao()).isEqualTo(mensagem.getDataCriacao());\n		assertThat(result.getDataAtualizacao()).isEqualTo(mensagem.getDataAtualizacao());\n	}\n\n}\n"
not_service, turnoId);\n	}\n\n}\n"
not_service, null));\n	}\n\n}\n"
not_service, null));\n	}\n\n}\n"
not_service, 1);\n	}\n\n}\n"
not_service, CursoSolicitacaoDadosDto.class);\n\n		assertThat(resultList).isEmpty();\n	}\n\n}\n"
not_service, V1InstituicaoDto.class);\n\n		var iterator = resultList.iterator();\n		var result1 = iterator.next();\n		var result2 = iterator.next();\n\n		assertThat(resultList).hasSize(2);\n\n		assertThat(result1.getId()).isEqualTo(curso1.getId());\n		assertThat(result1.getNome()).isEqualTo(curso1.getNome());\n\n		assertThat(result2.getId()).isEqualTo(curso2.getId());\n		assertThat(result2.getNome()).isEqualTo(curso2.getNome());\n	}\n\n}\n"
not_service, estudanteId);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model;\n\nimport lombok.Data;\n\n@Data\npublic class TermoUsoITDto {\n\n    private Boolean aceitouTermoUso;\n\n}\n"
not_service, wrongDependenteMatricula.getId()));\n\n		assertThat(httpForbidden.getMessage()).isEqualTo(ESTUDANTE_SEM_VINCULO);\n\n		verify(this.estudanteService).loadDependentes(responsavelId);\n		verify(this.estudanteService).loadEstudanteIdByMatriculaId(wrongDependenteMatricula.getId());\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.validator;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.validation.ValidationMessagesTests.PREENCHIMENTO_OBRIGATORIO;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.model.TermoUsoDto;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\nclass TermoUsoValidatorTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	private TermoUsoValidator termoUsoValidator = new TermoUsoValidator();\n\n	@Test\n	@DisplayName(""Deve ser válido caso o termo de uso esteja preenchido corretamente"")\n	void dtoWithAceitouTermoUsoExpectSuccess() {\n		var termoUsoDto = new TermoUsoDto();\n		termoUsoDto.setAceitouTermoUso(this.faker.random().nextBoolean());\n\n		var result = this.termoUsoValidator.validate(termoUsoDto);\n\n		assertThat(result.isValid()).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve ser inválido caso o termo de uso seja nulo"")\n	void dtoWithoutAceitouTermoUsoExpectNotNull() {\n		var termoUsoDto = new TermoUsoDto();\n		termoUsoDto.setAceitouTermoUso(null);\n\n		var result = this.termoUsoValidator.validate(termoUsoDto);\n\n		assertThat(result.isValid()).isFalse();\n		assertThat(result.getErrors().toString()).hasToString(""{aceitouTermoUso=%s}"".formatted(PREENCHIMENTO_OBRIGATORIO));\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass EstudanteDtoQueryCommandIntegrationTest {\n\n	@Autowired private EstudanteDtoQueryCommand estudanteDtoQueryCommand;\n	@Autowired private EstudanteFactory estudanteFactory;\n\n	@Test\n	@DisplayName(""Deve retornar os dados do estudante filtrado pelo id"")\n	void executeWhenHasEstudanteInDbExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var result = this.estudanteDtoQueryCommand.execute(estudante.getId());\n\n		assertThat(result).isNotNull();\n		assertThat(result.getNome()).isEqualTo(estudante.getNomeCivil());\n		assertThat(result.getCpf()).isEqualTo(estudante.getCpf());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando não existir nenhum estudante"")\n	void executeWhenEmptyDbExpectNull() {\n		var result = this.estudanteDtoQueryCommand.execute(new Random().nextLong());\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando o id do estudante não existir"")\n	void executeWhenEstudanteIdDoesntExistsInDbExpectNull() {\n		this.estudanteFactory.createRandom();\n\n		var result = this.estudanteDtoQueryCommand.execute(new Random().nextLong());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.estudante.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass EstudanteLoginDtoQueryCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private EstudanteFactory estudanteFactory;\n	@Autowired private EstudanteLoginDtoQueryCommand estudanteLoginDtoQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar o id do estudante filtrado pelo cpf"")\n	void executeWhenHasEstudanteInDbExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n\n		var result = this.estudanteLoginDtoQueryCommand.execute(estudante.getCpf());\n		\n		assertThat(result.getId()).isEqualTo(estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando não existir nenhum estudante"")\n	void executeWhenEmptyDbExpectNull() {\n		var result = this.estudanteLoginDtoQueryCommand.execute(this.faker.cpf());\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando o cpf do estudante não existe"")\n	void executeWhenCpfDoesntExistsInDbExpectNull() {\n		this.estudanteFactory.createRandom();\n\n		var result = this.estudanteLoginDtoQueryCommand.execute(this.faker.cpf());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
not_service, estudanteId);\n\n		assertThat(result.getAceitouTermoUso()).isEqualTo(termoUsoDto.getAceitouTermoUso());\n	}\n\n}\n"
not_service,\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar uma lista contendo apenas a matrícula consistente"")\n	void executeWhenOnlyOneMatriculaConsistenteExpectOnlyMatriculaConsistente(SituacaoMatriculaRefEnum situacaoMatriculaRefEnum) {\n		var matricula = this.matriculaFactory.create(m -> m.situacaoMatriculaId.set(CONSISTENTE.getId()));\n		this.matriculaFactory.create(m -> {\n			m.estudanteId.set(matricula.getEstudanteId());\n			m.situacaoMatriculaId.set(situacaoMatriculaRefEnum.getId());\n		});\n\n		var resultList = this.matriculaDtoListQueryCommand.execute(matricula.getEstudanteId());\n\n		assertThat(resultList).hasSize(1);\n		assertThat(resultList.get(matricula.getId()).getId()).isEqualTo(matricula.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando o id do estudante não existir"")\n	void executeWhenEstudanteIdDoesntExistsExpectEmptyList() {\n		var estudanteId = new Random().nextLong();\n\n		var result = this.matriculaDtoListQueryCommand.execute(estudanteId);\n\n		assertThat(result).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando não existir nenhuma matrícula do estudante buscado"")\n	void executeWhenEstudanteDoesntHaveMatriculaExpectEmptyList() {\n		var estudanteId = this.estudanteFactory.createRandom().getId();\n\n		var result = this.matriculaDtoListQueryCommand.execute(estudanteId);\n\n		assertThat(result).isEmpty();\n	}\n\n}\n"
not_service, cursoDois.getId());\n\n		var result = this.cursoDtoListQueryCommand.executeByIds(cursosId)\n				.values()\n				.stream()\n				.toList();\n\n		assertThat(result.size()).isEqualTo(2);\n		assertThat(result.get(0)).isNotEqualTo(result.get(1));\n	}\n\n	@Getter\n	@AllArgsConstructor\n	private static class CursoComparator {\n		private Long id;\n		private String nome;\n		private String grauAcademico;\n		private String nivelEnsino;\n		private String etapaEnsino;\n		private String email;\n		private String telefone;\n		private String eixoTecnologico;\n		private String nomePrograma;\n		private String nomeAreaConhecimento;\n		private String areaCurso;\n		private String modalidadePosGraduacao;\n	}\n\n}"
not_service, DisciplinaDto.class);\n\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(disciplina1.getId());\n		assertThat(result.getIdentificadorDisciplina()).isEqualTo(disciplina1.getIdentificadorDisciplina());\n		assertThat(result.getNome()).isEqualTo(disciplina1.getNome());\n		assertThat(result.getCargaHoraria()).isEqualTo(disciplina1.getCargaHoraria());\n		assertThat(result.getPeriodo()).isEqualTo(disciplina1.getPeriodo());\n		assertThat(result.getMatrizCurso()).isEqualTo(disciplina1.getMatrizCurso());\n		assertThat(result.getResultado()).isEqualTo(getById(disciplina1.getResultadoId()).getNome());\n		assertThat(result.getNota()).isEqualTo(disciplina1.getNota());\n		assertThat(result.getComponenteObrigatorio()).isEqualTo(disciplina1.getComponenteObrigatorio());\n	}\n\n}\n"
not_service, estudante.getId());\n\n		assertThat(estudanteInDb.getAceitouTermoUso()).isNotEqualTo(estudante.getAceitouTermoUso());\n		assertThat(estudanteInDb.getDataRegistroTermo()).isNotEqualTo(estudante.getDataRegistroTermo());\n	}\n\n}\n"
not_service, MatriculaDto.class);\n		var result = resultList.iterator().next();\n\n		assertThat(resultList).hasSize(1);\n		assertThat(result.getId()).isEqualTo(matricula.getId());\n		assertThat(result.getInstituicao().getId()).isEqualTo(instituicao.getId());\n		assertThat(result.getCurso().getId()).isEqualTo(curso.getId());\n		assertThat(result.getAnoMesIngresso()).isEqualTo(YearMonth.from(matricula.getDataIngresso()));\n		assertThat(result.getInstituicao().getSigla()).isNull();\n		assertThat(result.getInstituicao().getEmail()).isNull();\n		assertThat(result.getInstituicao().getTelefone()).isNull();\n		assertThat(result.getInstituicao().getMunicipioReitoria()).isNull();\n		assertThat(result.getCargaHorariaTotalCurso()).isNull();\n		assertThat(result.getCargaHorariaIntegralizada()).isNull();\n		assertThat(result.getIndiceAproveitamentoEstudante()).isNull();\n		assertThat(result.getIndiceAproveitamentoMedio()).isNull();\n		assertThat(result.getPosicionamentoCurso()).isNull();\n		assertThat(result.getAnoMesConclusao()).isNull();\n	}\n\n}\n"
not_service, bearerAuth.getValue())\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(new TermoUsoDto())))\n				.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.termoUsoValidator);\n		verifyNoInteractions(this.estudanteService);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento dos métodos internos do endpoint de termo de uso não continua após erros de validação"")\n	void storeTermoUsoWhenValidatorHasErrorsExpectBadRequest() throws Exception {\n		var estudanteAndJwtRecord = this.createEstudanteAndJwtRecord();\n		var termoUsoDto = new TermoUsoDto();\n		var validatorWithError = Validator.of(termoUsoDto);\n		validatorWithError.error(""ERROR"");\n\n		when(this.termoUsoValidator.validate(termoUsoDto))\n				.thenReturn(validatorWithError);\n\n		this.mockMvc.perform(post(BASE_URL + ""/termo-uso"")\n						.with(jwt().jwt(estudanteAndJwtRecord.jwt))\n						.contentType(MediaType.APPLICATION_JSON)\n						.content(this.objectMapper.writeValueAsString(termoUsoDto)))\n				.andExpect(status().isBadRequest());\n\n		verify(this.termoUsoValidator).validate(termoUsoDto);\n		verifyNoInteractions(this.estudanteService);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model;\n\nimport lombok.Data;\n\n@Data\npublic class MunicipioITDto {\n\n	private Long id;\n	private String nome;\n	private Long ufId;\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QUF.uF;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass UfDtoListQueryCommandIntegrationTest {\n\n	@Autowired private DAO dao;\n	@Autowired private UfDtoListQueryCommand ufDtoListQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar uma lista com todas as UFs"")\n	void executeWhenHasUFInDbExpectSuccess() {\n		var ufInDb = this.dao.queryFactory()\n				.selectFrom(uF)\n				.fetch();\n\n		var result = this.ufDtoListQueryCommand.execute();\n\n		assertThat(result).hasSize(ufInDb.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(ufInDb);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.command;\n\nimport static br.ufsc.bridge.jornadaestudante.model.QMunicipio.municipio;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.endereco.latest.model.MunicipioDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.common.data.DAO;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioDomainFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.endereco.MunicipioRefEnum;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass MunicipioDtoListQueryCommandIntegrationTest {\n\n	@Autowired private DAO dao;\n	@Autowired private MunicipioDtoListQueryCommand municipioDtoListQueryCommand;\n	@Autowired private MunicipioDomainFactory municipioDomainFactory;\n\n	@Test\n	@DisplayName(""Deve retornar uma lista vazia quando não existir o UfId que foi passado como parâmetro"")\n	void executeWhenUfIdNotExistsExpectEmptyList() {\n		var municipioDtoList = this.municipioDtoListQueryCommand.execute(0L);\n\n		assertThat(municipioDtoList).isEmpty();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista com todos os municípios do sistema quando não for passado nenhum parâmetro"")\n	void executeWhenUfIdIsNullExpectAllMunicipiosInDbList() {\n		var municipiosInDb = this.dao.queryFactory()\n				.selectFrom(municipio)\n				.fetch();\n\n		var result = this.municipioDtoListQueryCommand.execute(null);\n\n		assertThat(result).hasSize(municipiosInDb.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(municipiosInDb);\n	}\n\n	@Test\n	@DisplayName(""Deve retornar uma lista somente dos municípios vinculados ao UfId que foi passado como parâmetro"")\n	void executeWhenUfIdIsNotNullExpectOnlyUfMunicipiosList() {\n		var municipiosDtoInDbList = new ArrayList<MunicipioDto>();\n		var municipioUfId = this.municipioDomainFactory.createRandom().getUfId();\n		var municipiosEnumByUfId = Arrays.stream(MunicipioRefEnum.values())\n				.filter(municipioRefEnum -> municipioRefEnum.getUfId().equals(municipioUfId))\n				.toList();\n\n		municipiosEnumByUfId.forEach(municipioRefEnum -> {\n			var municipioDto = new MunicipioDto();\n			municipioDto.setId(municipioRefEnum.getId());\n			municipioDto.setNome(municipioRefEnum.getNome());\n			municipioDto.setUfId(municipioRefEnum.getUfId());\n			municipiosDtoInDbList.add(municipioDto);\n		});\n\n		var result = this.municipioDtoListQueryCommand.execute(municipioUfId);\n\n		assertThat(result).hasSize(municipiosDtoInDbList.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(municipiosDtoInDbList);\n	}\n\n}\n"
not_service, MunicipioDto.class);\n\n		assertThat(result).hasSize(municipiosInDb.size());\n		assertThat(result).usingRecursiveComparison().ignoringExpectedNullFields().isEqualTo(municipiosInDb);\n	}\n	\n}"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.command.BannerListQueryCommand;\nimport br.ufsc.bridge.jornadaestudante.backend.module.banner.latest.model.BannerDto;\n\npublic class BannerServiceTest {\n\n	private BannerService bannerService;\n	private BannerListQueryCommand bannerListQueryCommand;\n\n	@BeforeEach\n	void setup() {\n		this.bannerListQueryCommand = mock(BannerListQueryCommand.class);\n		this.bannerService = new BannerService(this.bannerListQueryCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve testar o método loadBannerList"")\n	void loadBannerListSuccess() {\n		List<BannerDto> bannerDtoList = Collections.emptyList();\n\n		when(this.bannerListQueryCommand.execute()).thenReturn(bannerDtoList);\n\n		var result = this.bannerService.loadBannerList();\n\n		assertThat(result).isEqualTo(bannerDtoList);\n\n		verify(this.bannerListQueryCommand).execute();\n	}\n\n}\n"
not_service, ChronoUnit.DAYS));\n			spec.dataValidade.set(LocalDate.now().minusDays(9));\n		});\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(INATIVO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXCLUIDO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXPIRADO.getId()));\n\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result.stream().map(BannerDto::getId)).containsOnly(bannerAtivo.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar no máximo 14 banners ativos"")\n	void loadActiveBannersExpectAtMostFourteenBanners() {\n		var bannerList = new ArrayList<Banner>();\n		while (bannerList.size() < MAX_SIZE_BANNERS) {\n			bannerList.add(this.bannerFactory.create(spec -> {\n				spec.situacaoBanner.set(ATIVO.getId());\n				spec.dataValidade.set(LocalDate.now());\n			}));\n		}\n\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(INATIVO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXPIRADO.getId()));\n		this.bannerFactory.create(spec -> spec.situacaoBanner.set(EXCLUIDO.getId()));\n\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result.size()).isEqualTo(MAX_SIZE_BANNERS);\n		assertThat(result.stream().map(BannerDto::getId)).containsExactlyInAnyOrderElementsOf(bannerList.stream().map(Banner::getId).toList());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar os banners ordenados por data de atualização da mais recente à mais antiga"")\n	void loadActiveBannersExpectOrderByMostRecentUpdated() {\n		var bannerRecente = this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now());\n			spec.dataAtualizacao.set(Instant.now());\n		});\n		var bannerAntigo = this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now());\n			spec.dataAtualizacao.set(Instant.now().minusSeconds(1));\n		});\n\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result.size()).isEqualTo(2);\n		assertThat(result.get(0).getId()).isEqualTo(bannerRecente.getId());\n		assertThat(result.get(1).getId()).isEqualTo(bannerAntigo.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar lista vazia se não houverem banners válidos"")\n	void whenNotHaveValidBannersExpectEmptyList() {\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(ATIVO.getId());\n			spec.dataValidade.set(LocalDate.now().minusDays(1));\n		});\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(INATIVO.getId());\n		});\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(EXPIRADO.getId());\n		});\n		this.bannerFactory.create(spec -> {\n			spec.situacaoBanner.set(EXPIRADO.getId());\n		});\n\n		var result = this.bannerListQueryCommand.execute();\n\n		assertThat(result).isEmpty();\n	}\n\n}\n"
not_service, BannerDto.class);\n\n		assertThat(response).hasSize(bannerActiveList.size());\n		assertThat(response.stream().map(BannerDto::getId)).containsAll(bannerActiveList.stream().map(Banner::getId).toList());\n	}\n\n}\n"
not_service, bearerAuth.getValue());\n\n		var response = this.mockMvc.perform(getRequest);\n\n		response.andExpect(status().isUnauthorized());\n\n		verifyNoInteractions(this.bannerService);\n	}\n\n	@Test\n	@DisplayName(""Sucesso ao listar banners"")\n	void indexBannerExpectSuccess() throws Exception {\n		var jwt = this.principalFactory.withEstudanteRandom();\n		var dto = new BannerDto();\n\n		when(this.bannerService.loadBannerList()).thenReturn(List.of(dto));\n\n		var getRequest = get(BASE_URL).with(jwt().jwt(jwt));\n\n		var response = this.mockMvc.perform(getRequest);\n\n		response.andExpect(status().is2xxSuccessful());\n\n		verify(this.bannerService).loadBannerList();\n	}\n}\n"
not_service, anyString());\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculo é bem sucedido""\n			+ "" e não houveram interações com hashValidadorExistsQueryCommand e validadorHashSaveCommand quando o hash já existe"")\n	void generateComprovanteVinculoWhenHashAlreadyExistsExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n		var hash = this.faker.hashHexadecimal();\n		var comprovanteVinculoDto = new ComprovanteVinculoDto();\n		comprovanteVinculoDto.setMatriculaId(matriculaId);\n		comprovanteVinculoDto.setHash(hash);\n\n		when(this.comprovanteVinculoDtoQueryCommand.execute(matriculaId))\n				.thenReturn(comprovanteVinculoDto);\n\n		var result = this.comprovanteVinculoService.generateComprovanteVinculo(matriculaId);\n\n		assertThat(result).isNotNull();\n		assertThat(result.getMatriculaId()).isEqualTo(matriculaId);\n		assertThat(result.getHash()).isEqualTo(hash);\n\n		verify(this.comprovanteVinculoDtoQueryCommand).execute(matriculaId);\n		verifyNoInteractions(this.hashValidadorExistsQueryCommand);\n		verifyNoInteractions(this.validadorHashSaveCommand);\n	}\n\n	@Test\n	@DisplayName(""Deve verificar se o acionamento do método generateComprovanteVinculo é bem sucedido""\n			+ "" e não houveram interações com hashValidadorExistsQueryCommand e validadorHashSaveCommand quando o vínculo não existe"")\n	void generateComprovanteVinculoWhenVinculoNotExistsExpectSuccess() {\n		var matriculaId = new Random().nextLong();\n\n		when(this.comprovanteVinculoDtoQueryCommand.execute(matriculaId))\n				.thenReturn(null);\n\n		var result = this.comprovanteVinculoService.generateComprovanteVinculo(matriculaId);\n\n		assertThat(result).isNull();\n\n		verify(this.comprovanteVinculoDtoQueryCommand).execute(matriculaId);\n		verifyNoInteractions(this.hashValidadorExistsQueryCommand);\n		verifyNoInteractions(this.validadorHashSaveCommand);\n	}\n\n}\n"
not_service, times(1));\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model;\n\nimport lombok.Data;\n\n@Data\npublic class ComprovanteVinculoInfoITDto {\n\n    private String nomeEstudante;\n    private String cpfEstudante;\n    private String nomeInstituicao;\n    private String nomeCurso;\n    private String qrCode;\n    private String codigoValidacao;\n    private String urlValidador;\n\n}"
not_service,\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar nulo quando a situação da matrícula for diferente de cursando"")\n	void executeWhenSituacaoNotCursandoExpectNull(SituacaoVinculoRefEnum situacaoVinculo) {\n		this.createCurso();\n		this.createMatricula(situacaoVinculo.getId());\n\n		var result = this.vinculoMatriculaQueryCommand.execute(this.matricula.getHashValidador());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
not_service, matriculaInDb.getId()).getHashValidador();\n\n		assertThat(hashPersisted).isEqualTo(hashGenerated);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.utils.QRCodeGenerator.buildQrCodeBase64;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\n\nimport br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.model.ComprovanteVinculoDto;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\n\n@SpringJUnit5Test\nclass ComprovanteVinculoInfoDtoFillCommandTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Value(""${bridge.comprovanteVinculo.validador.url:localhost}"")\n	private String url;\n	@Autowired private ComprovanteVinculoInfoDtoFillCommand comprovanteVinculoInfoDtoFillCommand;\n\n	private ComprovanteVinculoDto createComprovanteVinculoDto(Boolean hasNomeSocial) {\n		var comprovanteVinculoDto = new ComprovanteVinculoDto();\n		comprovanteVinculoDto.setMatriculaId(this.faker.random().nextLong());\n		comprovanteVinculoDto.setCpfEstudante(this.faker.cpf());\n		comprovanteVinculoDto.setNomeInstituicao(this.faker.university().name());\n		comprovanteVinculoDto.setNomeCurso(this.faker.educator().course());\n		comprovanteVinculoDto.setHash(this.faker.hashHexadecimal());\n		comprovanteVinculoDto.setNomeEstudante(this.faker.name().fullName());\n		comprovanteVinculoDto.setNomeSocial(hasNomeSocial ? this.faker.name().firstName() : null);\n		return comprovanteVinculoDto;\n	}\n\n	@Test\n	@DisplayName(""Verifica se as informações do comprovante de vínculo foram preenchidas corretamente quando o estudante não possui nome social"")\n	void executeWithoutNomeSocialExpectSuccess() {\n		var comprovanteVinculoDto = this.createComprovanteVinculoDto(Boolean.FALSE);\n\n		var result = this.comprovanteVinculoInfoDtoFillCommand.execute(comprovanteVinculoDto);\n\n		assertThat(result.getCpfEstudante()).isEqualTo(comprovanteVinculoDto.getCpfEstudante());\n		assertThat(result.getNomeInstituicao()).isEqualTo(comprovanteVinculoDto.getNomeInstituicao());\n		assertThat(result.getNomeCurso()).isEqualTo(comprovanteVinculoDto.getNomeCurso());\n		assertThat(result.getQrCode()).isEqualTo(buildQrCodeBase64(this.url + ""?codigoValidacao="" + comprovanteVinculoDto.getHash()));\n		assertThat(result.getCodigoValidacao()).isEqualTo(comprovanteVinculoDto.getHash());\n		assertThat(result.getUrlValidador()).isEqualTo(this.url);\n		assertThat(result.getNomeEstudante()).isEqualTo(comprovanteVinculoDto.getNomeEstudante());\n	}\n\n	@Test\n	@DisplayName(""Verifica se as informações do comprovante de vínculo foram preenchidas corretamente quando o estudante possui nome social"")\n	void executeWithNomeSocialExpectSuccess() {\n		var comprovanteVinculoDto = this.createComprovanteVinculoDto(Boolean.TRUE);\n\n		var result = this.comprovanteVinculoInfoDtoFillCommand.execute(comprovanteVinculoDto);\n\n		assertThat(result.getCpfEstudante()).isEqualTo(comprovanteVinculoDto.getCpfEstudante());\n		assertThat(result.getNomeInstituicao()).isEqualTo(comprovanteVinculoDto.getNomeInstituicao());\n		assertThat(result.getNomeCurso()).isEqualTo(comprovanteVinculoDto.getNomeCurso());\n		assertThat(result.getQrCode()).isEqualTo(buildQrCodeBase64(this.url + ""?codigoValidacao="" + comprovanteVinculoDto.getHash()));\n		assertThat(result.getCodigoValidacao()).isEqualTo(comprovanteVinculoDto.getHash());\n		assertThat(result.getUrlValidador()).isEqualTo(this.url);\n		assertThat(result.getNomeEstudante()).isEqualTo(comprovanteVinculoDto.getNomeSocial());\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.comprovanteVinculo.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.faker.BridgeFaker;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass HashValidadorExistsQueryCommandIntegrationTest {\n\n	private final BridgeFaker faker = new BridgeFaker();\n	@Autowired private MatriculaFactory matriculaFactory;\n	@Autowired private HashValidadorExistsQueryCommand hashValidadorExistsQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar verdadeiro se o hash referenciado corresponder a uma matrícula"")\n	void executeWhenHasHashInDbExpectTrue() {\n		var matricula = this.matriculaFactory.createRandom();\n\n		var result = this.hashValidadorExistsQueryCommand.execute(matricula.getHashValidador());\n\n		assertThat(result).isTrue();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar falso se o hash referenciado não corresponder a uma matrícula"")\n	void executeWhenHashNotExistsInDbExpectFalse() {\n		this.matriculaFactory.create(m -> m.hashValidador.set(null));\n\n		var result = this.hashValidadorExistsQueryCommand.execute(this.faker.hashHexadecimal());\n\n		assertThat(result).isFalse();\n	}\n\n}\n"
not_service,\n			mode = EnumSource.Mode.EXCLUDE)\n	@DisplayName(""Deve retornar nulo quando a situação da matrícula for diferente de cursando"")\n	void executeWhenSituacaoNotCursandoExpectNull(SituacaoVinculoRefEnum situacaoVinculo) {\n		this.createCurso();\n		this.createMatricula(situacaoVinculo.getId());\n\n		var result = this.comprovanteVinculoDtoQueryCommand.execute(this.matricula.getId());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
not_service, instituicao.nome)\n				.fetchOne();\n\n		assertThat(result.getNomeEstudante()).isEqualTo(infoMatriculaInDb.get(QEstudante.estudante.nomeCivil));\n		assertThat(result.getCpfEstudante()).isEqualTo(infoMatriculaInDb.get(QEstudante.estudante.cpf));\n		assertThat(result.getNomeInstituicao()).isEqualTo(infoMatriculaInDb.get(instituicao.nome));\n		assertThat(result.getNomeCurso()).isEqualTo(infoMatriculaInDb.get(curso.nome));\n		assertThat(result.getQrCode()).isNotNull();\n		assertThat(result.getCodigoValidacao()).isEqualTo(infoMatriculaInDb.get(matricula.hashValidador));\n		assertThat(result.getUrlValidador()).isNotNull();\n	}\n\n}\n"
not_service, matriculaRecord.matricula.getId());\n		verifyNoInteractions(this.comprovanteVinculoService);\n	}\n\n}\n"
not_service, token);\n\n		this.mockMvc\n				.perform(getRequest)\n				.andExpect(status().isBadRequest());\n\n		verify(this.recaptchaGoogleValidator).isValid(token);\n		verifyNoInteractions(this.comprovanteVinculoService);\n	}\n\n}\n"
not_service, Map.of());\n	}\n\n}\n"
not_service, ""none"")\n				.subject(estudante.getId().toString())\n				.build();\n	}\n}\n"
not_service, turnoId);\n	}\n\n	@Test\n	@DisplayName(""Deve remover a solicitacao de dados do estudante"")\n	void deleteSolicitacaoDadosEstudanteExpectSuccess() {\n		var solicitacaoDadosId = new Random().nextLong();\n\n		this.solicitacaoDadosService.deleteSolicitacaoDadosEstudante(solicitacaoDadosId);\n\n		verify(this.solicitacaoDadosEstudantedDeleteCommand).execute(solicitacaoDadosId);\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.model;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\npublic class SolicitacaoDadosEstudanteFormITDto {\n\n	private Long cursoId;\n	private Long municipioId;\n	private Integer turnoId;\n	private Integer situacaoVinculoId;\n	private Integer dataAnoInicio;\n	private Integer dataAnoFim;\n\n	@Deprecated\n	private Long instituicaoId;\n\n}\n"
not_service,\n				solicitacaoDadosEstudanteFormDto.getMunicipioId());\n	}\n\n}\n"
not_service, Mockito.times(1)).loadEstudanteIdBySolicitacaoDadosId(solicitacaoId);\n	}\n\n}\n"
not_service, Spec spec) {\n		spec.municipioId.setDefault(() -> this.municipioDomainFactory.createRandom().getId());\n		spec.cursoId.setDefault(() -> this.cursoFactory.createRandom().getId());\n		spec.dataAnoInicio.setDefault(() -> LocalDate.now().with(firstDayOfYear()).minusYears(5).getYear());\n		specApplier.accept(spec);\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> municipioId = new SpecValue<>();\n		public final SpecValue<Long> cursoId = new SpecValue<>();\n		public final SpecValue<Integer> turnoId = new SpecValue<>();\n		public final SpecValue<Integer> situacaoVinculoId = new SpecValue<>();\n		public final SpecValue<Integer> dataAnoInicio = new SpecValue<>();\n		public final SpecValue<Integer> dataAnoFim = new SpecValue<>();\n	}\n\n}\n"
not_service, Spec spec) {\n		spec.municipioId.setDefault(() -> this.municipioDomainFactory.createRandom().getId());\n		spec.cursoId.setDefault(() -> this.cursoFactory.createRandom().getId());\n		spec.dataAnoInicio.setDefault(() -> LocalDate.now().with(firstDayOfYear()).minusYears(5).getYear());\n		specApplier.accept(spec);\n	}\n\n	public static class Spec {\n		public final SpecValue<Long> municipioId = new SpecValue<>();\n		public final SpecValue<Long> cursoId = new SpecValue<>();\n		public final SpecValue<Integer> turnoId = new SpecValue<>();\n		public final SpecValue<Integer> situacaoVinculoId = new SpecValue<>();\n		public final SpecValue<Integer> dataAnoInicio = new SpecValue<>();\n		public final SpecValue<Integer> dataAnoFim = new SpecValue<>();\n	}\n\n}\n"
not_service, ignoringNanos());\n		assertThat(result.getAutorSolicitacaoId()).isEqualTo(solicitacaoDadosEstudanteInDb.getAutorSolicitacaoId());\n		assertThat(result.getSolicitacaoAtendida()).isEqualTo(Boolean.FALSE);\n		assertThat(result.getDataSolicitacaoAtendida()).isNull();\n		assertThat(result.getMatriculaId()).isNull();\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.module.solicitacaodados.latest.command;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Random;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.DatabaseTest;\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\nimport br.ufsc.bridge.jornadaestudante.factory.module.estudante.EstudanteFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.matricula.MatriculaFactory;\nimport br.ufsc.bridge.jornadaestudante.factory.module.solicitacaoDados.SolicitacaoDadosEstudanteFactory;\n\n@DatabaseTest\n@SpringJUnit5Test\nclass EstudanteIdBySolicitacaoDadosIdQueryCommandIntegrationTest {\n\n	@Autowired EstudanteFactory estudanteFactory;\n	@Autowired MatriculaFactory matriculaFactory;\n	@Autowired SolicitacaoDadosEstudanteFactory solicitacaoDadosEstudanteFactory;\n	@Autowired EstudanteIdBySolicitacaoDadosIdQueryCommand estudanteIdBySolicitacaoDadosIdQueryCommand;\n\n	@Test\n	@DisplayName(""Deve retornar o id do estudante filtrado pelo id da solicitação de dados"")\n	void executeWhenHasSolicitacaoDadosInDbExpectSuccess() {\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		});\n\n		var result = this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosEstudante.getId());\n\n		assertThat(result).isEqualTo(estudante.getId());\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando não existir a solicitação de dados"")\n	void executeWhenEmptyDbExpectNull() {\n		var solicitacaoDadosId = new Random().nextLong();\n\n		var result = this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosId);\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando o id da solicitação de dados não existe"")\n	void executeWhenSolicitacaoDadosIdDoesntExistsInDbExpectNull() {\n		var estudante = this.estudanteFactory.createRandom();\n		this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.FALSE);\n		});\n		var solicitacaoDadosId = new Random().nextLong();\n\n		var result = this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosId);\n\n		assertThat(result).isNull();\n	}\n\n	@Test\n	@DisplayName(""Deve retornar nulo quando a solicitação de dados foi atendida"")\n	void executeWhenSolicitacaoAtendidaExpectNull() {\n		var estudante = this.estudanteFactory.createRandom();\n		var matricula = this.matriculaFactory.create(m -> m.estudanteId.set(estudante.getId()));\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.TRUE);\n			s.matriculaId.set(matricula.getId());\n		});\n\n		var result = this.estudanteIdBySolicitacaoDadosIdQueryCommand.execute(solicitacaoDadosEstudante.getId());\n\n		assertThat(result).isNull();\n	}\n\n}\n"
not_service, solicitacaoDados2.getId());\n	}\n\n}\n"
not_service, solicitacaoDadosEstudante.getId());\n\n		assertThat(solicitacaoDadosEstudanteInDb).isNull();\n	}\n\n	@Test\n	@DisplayName(""Não deve permitir deletar a solicitação de dados de um estudante quando ela não existir"")\n	void deleteSolicitacaoDadosWithoutSolicitacaoExpectForbidden() {\n		var estudanteId = this.faker.random().nextLong();\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudanteRandom()))\n				.delete(BASE_URL + ""/"" + estudanteId)\n				.then()\n				.statusCode(403);\n	}\n\n	@Test\n	@DisplayName(""Não deve permitir deletar a solicitação de dados de outro estudante"")\n	void deleteSolicitacaoDadosWhenSolicitacaoBelongsToOtherStudentExpectForbidden() {\n		var estudanteSolicitacao = this.estudanteFactory.createRandom();\n		var estudanteErrado = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudante = this.solicitacaoDadosEstudanteFactory.create(s -> s.estudanteId.set(estudanteSolicitacao.getId()));\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudanteErrado)))\n				.delete(BASE_URL + ""/"" + solicitacaoDadosEstudante.getId())\n				.then()\n				.statusCode(403);\n	}\n\n	@Test\n	@DisplayName(""Não deve permitir deletar a solicitação de dados de um estudante quando já estiver sido atendida"")\n	void deleteSolicitacaoDadosWhenIsAlreadyAtendidaExpectForbidden() {\n		var estudante = this.estudanteFactory.createRandom();\n		var solicitacaoDadosEstudanteAtendida = this.solicitacaoDadosEstudanteFactory.create(s -> {\n			s.estudanteId.set(estudante.getId());\n			s.solicitacaoAtendida.set(Boolean.TRUE);\n		});\n\n		given()\n				.header(withBearerAuthorization(this.jwtFactory.withEstudante(estudante)))\n				.delete(BASE_URL + ""/"" + solicitacaoDadosEstudanteAtendida.getId())\n				.then()\n				.statusCode(403)\n				.body(equalTo(SOLICITACAO_DADOS_SEM_PERMISSAO));\n	}\n\n}\n"
not_service,"package br.ufsc.bridge.jornadaestudante.backend.test.restassured;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport br.ufsc.bridge.jornadaestudante.backend.test.annotation.SpringJUnit5Test;\n\nimport io.restassured.module.mockmvc.RestAssuredMockMvc;\n\n@SpringJUnit5Test\npublic abstract class RestAssuredMockMvcTest {\n\n	@Autowired\n	private WebApplicationContext webApplicationContext;\n\n	@BeforeEach\n	public void initializeRestAssuredMockMvcWebApplicationContext() {\n		RestAssuredMockMvc.webAppContextSetup(this.webApplicationContext);\n	}\n\n}\n"
not_service, mergeMode = MERGE_WITH_DEFAULTS)\n@ExtendWith(MockitoExtension.class)\n@Tag(""IntegrationTest"")\npublic @interface SpringJUnit5Test {\n\n}"
